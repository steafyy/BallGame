
BSP_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bac  0800f788  0800f788  0001f788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011334  08011334  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011334  08011334  00021334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801133c  0801133c  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801133c  0801133c  0002133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011340  08011340  00021340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08011344  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          00008ffc  200000dc  200000dc  000300dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200090d8  200090d8  000300dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034464  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006dd2  00000000  00000000  00064570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002800  00000000  00000000  0006b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002538  00000000  00000000  0006db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d690  00000000  00000000  00070080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003164b  00000000  00000000  0009d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8f23  00000000  00000000  000ced5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c7c7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ae1c  00000000  00000000  001c7cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f770 	.word	0x0800f770

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	0800f770 	.word	0x0800f770

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_uldivmod>:
 8000ac8:	b953      	cbnz	r3, 8000ae0 <__aeabi_uldivmod+0x18>
 8000aca:	b94a      	cbnz	r2, 8000ae0 <__aeabi_uldivmod+0x18>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	bf08      	it	eq
 8000ad0:	2800      	cmpeq	r0, #0
 8000ad2:	bf1c      	itt	ne
 8000ad4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad8:	f04f 30ff 	movne.w	r0, #4294967295
 8000adc:	f000 b974 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae8:	f000 f806 	bl	8000af8 <__udivmoddi4>
 8000aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af4:	b004      	add	sp, #16
 8000af6:	4770      	bx	lr

08000af8 <__udivmoddi4>:
 8000af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000afc:	9d08      	ldr	r5, [sp, #32]
 8000afe:	4604      	mov	r4, r0
 8000b00:	468e      	mov	lr, r1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d14d      	bne.n	8000ba2 <__udivmoddi4+0xaa>
 8000b06:	428a      	cmp	r2, r1
 8000b08:	4694      	mov	ip, r2
 8000b0a:	d969      	bls.n	8000be0 <__udivmoddi4+0xe8>
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	b152      	cbz	r2, 8000b28 <__udivmoddi4+0x30>
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	f1c2 0120 	rsb	r1, r2, #32
 8000b1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b22:	ea41 0e03 	orr.w	lr, r1, r3
 8000b26:	4094      	lsls	r4, r2
 8000b28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b2c:	0c21      	lsrs	r1, r4, #16
 8000b2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b32:	fa1f f78c 	uxth.w	r7, ip
 8000b36:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3e:	fb06 f107 	mul.w	r1, r6, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x64>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4e:	f080 811f 	bcs.w	8000d90 <__udivmoddi4+0x298>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 811c 	bls.w	8000d90 <__udivmoddi4+0x298>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3310 	mls	r3, r8, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 f707 	mul.w	r7, r0, r7
 8000b70:	42a7      	cmp	r7, r4
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x92>
 8000b74:	eb1c 0404 	adds.w	r4, ip, r4
 8000b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7c:	f080 810a 	bcs.w	8000d94 <__udivmoddi4+0x29c>
 8000b80:	42a7      	cmp	r7, r4
 8000b82:	f240 8107 	bls.w	8000d94 <__udivmoddi4+0x29c>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8e:	1be4      	subs	r4, r4, r7
 8000b90:	2600      	movs	r6, #0
 8000b92:	b11d      	cbz	r5, 8000b9c <__udivmoddi4+0xa4>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c5 4300 	strd	r4, r3, [r5]
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xc2>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80ef 	beq.w	8000d8a <__udivmoddi4+0x292>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x160>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd4>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80f9 	bhi.w	8000dbe <__udivmoddi4+0x2c6>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	469e      	mov	lr, r3
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa4>
 8000bda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa4>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xec>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 8092 	bne.w	8000d12 <__udivmoddi4+0x21a>
 8000bee:	eba1 010c 	sub.w	r1, r1, ip
 8000bf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	2601      	movs	r6, #1
 8000bfc:	0c20      	lsrs	r0, r4, #16
 8000bfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c02:	fb07 1113 	mls	r1, r7, r3, r1
 8000c06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0a:	fb0e f003 	mul.w	r0, lr, r3
 8000c0e:	4288      	cmp	r0, r1
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x12c>
 8000c12:	eb1c 0101 	adds.w	r1, ip, r1
 8000c16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x12a>
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	f200 80cb 	bhi.w	8000db8 <__udivmoddi4+0x2c0>
 8000c22:	4643      	mov	r3, r8
 8000c24:	1a09      	subs	r1, r1, r0
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c34:	fb0e fe00 	mul.w	lr, lr, r0
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x156>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c44:	d202      	bcs.n	8000c4c <__udivmoddi4+0x154>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f200 80bb 	bhi.w	8000dc2 <__udivmoddi4+0x2ca>
 8000c4c:	4608      	mov	r0, r1
 8000c4e:	eba4 040e 	sub.w	r4, r4, lr
 8000c52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c56:	e79c      	b.n	8000b92 <__udivmoddi4+0x9a>
 8000c58:	f1c6 0720 	rsb	r7, r6, #32
 8000c5c:	40b3      	lsls	r3, r6
 8000c5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c66:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	40f9      	lsrs	r1, r7
 8000c72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c76:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7e:	0c20      	lsrs	r0, r4, #16
 8000c80:	fa1f fe8c 	uxth.w	lr, ip
 8000c84:	fb09 1118 	mls	r1, r9, r8, r1
 8000c88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000c90:	4288      	cmp	r0, r1
 8000c92:	fa02 f206 	lsl.w	r2, r2, r6
 8000c96:	d90b      	bls.n	8000cb0 <__udivmoddi4+0x1b8>
 8000c98:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca0:	f080 8088 	bcs.w	8000db4 <__udivmoddi4+0x2bc>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f240 8085 	bls.w	8000db4 <__udivmoddi4+0x2bc>
 8000caa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	1a09      	subs	r1, r1, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000cbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc4:	458e      	cmp	lr, r1
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x1e2>
 8000cc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ccc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd0:	d26c      	bcs.n	8000dac <__udivmoddi4+0x2b4>
 8000cd2:	458e      	cmp	lr, r1
 8000cd4:	d96a      	bls.n	8000dac <__udivmoddi4+0x2b4>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4461      	add	r1, ip
 8000cda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cde:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce2:	eba1 010e 	sub.w	r1, r1, lr
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	46c8      	mov	r8, r9
 8000cea:	46a6      	mov	lr, r4
 8000cec:	d356      	bcc.n	8000d9c <__udivmoddi4+0x2a4>
 8000cee:	d053      	beq.n	8000d98 <__udivmoddi4+0x2a0>
 8000cf0:	b15d      	cbz	r5, 8000d0a <__udivmoddi4+0x212>
 8000cf2:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf6:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000d02:	40f1      	lsrs	r1, r6
 8000d04:	431f      	orrs	r7, r3
 8000d06:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	40d8      	lsrs	r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d20:	4091      	lsls	r1, r2
 8000d22:	4301      	orrs	r1, r0
 8000d24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d28:	fa1f fe8c 	uxth.w	lr, ip
 8000d2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d30:	fb07 3610 	mls	r6, r7, r0, r3
 8000d34:	0c0b      	lsrs	r3, r1, #16
 8000d36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	fa04 f402 	lsl.w	r4, r4, r2
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x260>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4e:	d22f      	bcs.n	8000db0 <__udivmoddi4+0x2b8>
 8000d50:	429e      	cmp	r6, r3
 8000d52:	d92d      	bls.n	8000db0 <__udivmoddi4+0x2b8>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1b9b      	subs	r3, r3, r6
 8000d5a:	b289      	uxth	r1, r1
 8000d5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d60:	fb07 3316 	mls	r3, r7, r6, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb06 f30e 	mul.w	r3, r6, lr
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x28a>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d78:	d216      	bcs.n	8000da8 <__udivmoddi4+0x2b0>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d914      	bls.n	8000da8 <__udivmoddi4+0x2b0>
 8000d7e:	3e02      	subs	r6, #2
 8000d80:	4461      	add	r1, ip
 8000d82:	1ac9      	subs	r1, r1, r3
 8000d84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d88:	e738      	b.n	8000bfc <__udivmoddi4+0x104>
 8000d8a:	462e      	mov	r6, r5
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	e705      	b.n	8000b9c <__udivmoddi4+0xa4>
 8000d90:	4606      	mov	r6, r0
 8000d92:	e6e3      	b.n	8000b5c <__udivmoddi4+0x64>
 8000d94:	4618      	mov	r0, r3
 8000d96:	e6f8      	b.n	8000b8a <__udivmoddi4+0x92>
 8000d98:	454b      	cmp	r3, r9
 8000d9a:	d2a9      	bcs.n	8000cf0 <__udivmoddi4+0x1f8>
 8000d9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000da0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da4:	3801      	subs	r0, #1
 8000da6:	e7a3      	b.n	8000cf0 <__udivmoddi4+0x1f8>
 8000da8:	4646      	mov	r6, r8
 8000daa:	e7ea      	b.n	8000d82 <__udivmoddi4+0x28a>
 8000dac:	4620      	mov	r0, r4
 8000dae:	e794      	b.n	8000cda <__udivmoddi4+0x1e2>
 8000db0:	4640      	mov	r0, r8
 8000db2:	e7d1      	b.n	8000d58 <__udivmoddi4+0x260>
 8000db4:	46d0      	mov	r8, sl
 8000db6:	e77b      	b.n	8000cb0 <__udivmoddi4+0x1b8>
 8000db8:	3b02      	subs	r3, #2
 8000dba:	4461      	add	r1, ip
 8000dbc:	e732      	b.n	8000c24 <__udivmoddi4+0x12c>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e709      	b.n	8000bd6 <__udivmoddi4+0xde>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e742      	b.n	8000c4e <__udivmoddi4+0x156>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <new>:
#include <../Inc/base.h>

static struct Base new(uint16_t x, uint16_t y) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	80bb      	strh	r3, [r7, #4]
			return (struct Base){.xCoord=x, .yCoord=y};
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	81bb      	strh	r3, [r7, #12]
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	81fb      	strh	r3, [r7, #14]
 8000de4:	2300      	movs	r3, #0
 8000de6:	89ba      	ldrh	r2, [r7, #12]
 8000de8:	f362 030f 	bfi	r3, r2, #0, #16
 8000dec:	89fa      	ldrh	r2, [r7, #14]
 8000dee:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <vApplicationGetIdleTaskMemory+0x30>)
 8000e46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000f8 	.word	0x200000f8
 8000e60:	200001b0 	.word	0x200001b0

08000e64 <initializeLCD>:

#define COLOR_MASK (uint32_t)(0xFFFFFFFF)  ///< color mask - all bits up
#define ALPHA_MASK (uint32_t)(0xFF000000)  ///< alpha mask - all bits up, full opaque

LCD_StatusTypeDef initializeLCD()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	LCD_StatusTypeDef res = BSP_LCD_Init();
 8000e6a:	f001 fcdd 	bl	8002828 <BSP_LCD_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    if (res == LCD_OK)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10b      	bne.n	8000e90 <initializeLCD+0x2c>
    {
        fillWithColorLCD(FRAME_BUF_1, LCD_COLOR_BLACK);
 8000e78:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 f80d 	bl	8000e9c <fillWithColorLCD>
        BSP_LCD_LayerDefaultInit(0, FRAME_BUF_1_ADDRESS);
 8000e82:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000e86:	2000      	movs	r0, #0
 8000e88:	f001 fd50 	bl	800292c <BSP_LCD_LayerDefaultInit>
        return res;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	e000      	b.n	8000e92 <initializeLCD+0x2e>
    }
    return 1;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <fillWithColorLCD>:
void fillWithColorLCD(uint8_t frameBufIndex, uint32_t color)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
    int size = LCD_WIDTH * LCD_HEIGHT;
 8000ea8:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000eac:	60fb      	str	r3, [r7, #12]
    uint32_t *ptr;

    if (frameBufIndex == FRAME_BUF_1)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d103      	bne.n	8000ebc <fillWithColorLCD+0x20>
    {
        ptr = (uint32_t *)(FRAME_BUF_1_ADDRESS);
 8000eb4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	e00b      	b.n	8000ed4 <fillWithColorLCD+0x38>
    }
    else if (frameBufIndex == FRAME_BUF_2)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d10e      	bne.n	8000ee0 <fillWithColorLCD+0x44>
    {
        ptr = (uint32_t *)FRAME_BUF_2_ADDRESS;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <fillWithColorLCD+0x50>)
 8000ec4:	60bb      	str	r3, [r7, #8]
    else
    {
        return;
    }

    while (size--)
 8000ec6:	e005      	b.n	8000ed4 <fillWithColorLCD+0x38>
    {
        *ptr = color;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	601a      	str	r2, [r3, #0]
        ptr++;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	60bb      	str	r3, [r7, #8]
    while (size--)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	60fa      	str	r2, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f4      	bne.n	8000ec8 <fillWithColorLCD+0x2c>
 8000ede:	e000      	b.n	8000ee2 <fillWithColorLCD+0x46>
        return;
 8000ee0:	bf00      	nop
    }
}
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	d0100000 	.word	0xd0100000

08000ef0 <setActiveFrameBufLCD>:

void setActiveFrameBufLCD(uint8_t frameBufIndex) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    if (frameBufIndex == FRAME_BUF_1) {
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <setActiveFrameBufLCD+0x1c>
        BSP_LCD_SetLayerAddress(0, FRAME_BUF_1_ADDRESS);
 8000f00:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f04:	2000      	movs	r0, #0
 8000f06:	f001 fd75 	bl	80029f4 <BSP_LCD_SetLayerAddress>
    } else if (frameBufIndex == FRAME_BUF_2) {
        BSP_LCD_SetLayerAddress(0, FRAME_BUF_2_ADDRESS);
    }
}
 8000f0a:	e006      	b.n	8000f1a <setActiveFrameBufLCD+0x2a>
    } else if (frameBufIndex == FRAME_BUF_2) {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d103      	bne.n	8000f1a <setActiveFrameBufLCD+0x2a>
        BSP_LCD_SetLayerAddress(0, FRAME_BUF_2_ADDRESS);
 8000f12:	4904      	ldr	r1, [pc, #16]	; (8000f24 <setActiveFrameBufLCD+0x34>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f001 fd6d 	bl	80029f4 <BSP_LCD_SetLayerAddress>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	d0100000 	.word	0xd0100000

08000f28 <lcdSimpleTest>:


void lcdSimpleTest() {
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b0a1      	sub	sp, #132	; 0x84
 8000f2c:	af04      	add	r7, sp, #16
	if (initializeLCD() != LCD_OK) {
 8000f2e:	f7ff ff99 	bl	8000e64 <initializeLCD>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f040 80b4 	bne.w	80010a2 <lcdSimpleTest+0x17a>
	        return;
	    }
	    fillWithColorLCD(FRAME_BUF_2, LCD_COLOR_GREEN);
 8000f3a:	f04f 21ff 	mov.w	r1, #4278255360	; 0xff00ff00
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff ffac 	bl	8000e9c <fillWithColorLCD>
	    setActiveFrameBufLCD(FRAME_BUF_2);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f7ff ffd3 	bl	8000ef0 <setActiveFrameBufLCD>
	    struct Target targetArray[5];
	    struct Target * ptrTargetArray = NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
	    uint8_t control1;
	    uint8_t control2;

	    for(int i = 0; i<5; i++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	e07f      	b.n	8001054 <lcdSimpleTest+0x12c>
	    	if(i==0){
 8000f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11f      	bne.n	8000f9a <lcdSimpleTest+0x72>
	    		targetArray[i]=Target.new(generate_random_position(10,220),generate_random_position(10,150),20,true);
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <lcdSimpleTest+0x184>)
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	21dc      	movs	r1, #220	; 0xdc
 8000f60:	200a      	movs	r0, #10
 8000f62:	f000 f8a7 	bl	80010b4 <generate_random_position>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29d      	uxth	r5, r3
 8000f6a:	2196      	movs	r1, #150	; 0x96
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 f8a1 	bl	80010b4 <generate_random_position>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	3370      	adds	r3, #112	; 0x70
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f1a3 0660 	sub.w	r6, r3, #96	; 0x60
 8000f82:	4638      	mov	r0, r7
 8000f84:	2301      	movs	r3, #1
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2314      	movs	r3, #20
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	47a0      	blx	r4
 8000f8e:	4634      	mov	r4, r6
 8000f90:	463b      	mov	r3, r7
 8000f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f98:	e059      	b.n	800104e <lcdSimpleTest+0x126>
	    	}else{
	    		control1 = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	    		while(control1 == 0){
 8000fa0:	e051      	b.n	8001046 <lcdSimpleTest+0x11e>
	    			targetArray[i]=Target.new(generate_random_position(10,220),generate_random_position(10,170),20,true);
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <lcdSimpleTest+0x184>)
 8000fa4:	681c      	ldr	r4, [r3, #0]
 8000fa6:	21dc      	movs	r1, #220	; 0xdc
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f000 f883 	bl	80010b4 <generate_random_position>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29d      	uxth	r5, r3
 8000fb2:	21aa      	movs	r1, #170	; 0xaa
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 f87d 	bl	80010b4 <generate_random_position>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	3370      	adds	r3, #112	; 0x70
 8000fc4:	443b      	add	r3, r7
 8000fc6:	f1a3 0660 	sub.w	r6, r3, #96	; 0x60
 8000fca:	4638      	mov	r0, r7
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	47a0      	blx	r4
 8000fd6:	4634      	mov	r4, r6
 8000fd8:	463b      	mov	r3, r7
 8000fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    			ptrTargetArray = targetArray;
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
	    			control2 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	    			while(control2 == 0){
 8000fec:	e027      	b.n	800103e <lcdSimpleTest+0x116>
	    				if(targetArray[i].isWithingRange(&targetArray[i],ptrTargetArray)==true){
 8000fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	3370      	adds	r3, #112	; 0x70
 8000ff4:	443b      	add	r3, r7
 8000ff6:	3b54      	subs	r3, #84	; 0x54
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f107 0110 	add.w	r1, r7, #16
 8000ffe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	440a      	add	r2, r1
 8001004:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001006:	4610      	mov	r0, r2
 8001008:	4798      	blx	r3
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <lcdSimpleTest+0xf0>
	    					control2 = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001016:	e012      	b.n	800103e <lcdSimpleTest+0x116>
	    				}else if(ptrTargetArray != &targetArray[i-1]){
 8001018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800101a:	3b01      	subs	r3, #1
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001026:	429a      	cmp	r2, r3
 8001028:	d003      	beq.n	8001032 <lcdSimpleTest+0x10a>
	    					ptrTargetArray++;
 800102a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102c:	3310      	adds	r3, #16
 800102e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001030:	e005      	b.n	800103e <lcdSimpleTest+0x116>
	    				}else{
	    					control2 = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	    					control1 = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	    			while(control2 == 0){
 800103e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0d3      	beq.n	8000fee <lcdSimpleTest+0xc6>
	    		while(control1 == 0){
 8001046:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0a9      	beq.n	8000fa2 <lcdSimpleTest+0x7a>
	    for(int i = 0; i<5; i++){
 800104e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001050:	3301      	adds	r3, #1
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
 8001054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001056:	2b04      	cmp	r3, #4
 8001058:	f77f af7c 	ble.w	8000f54 <lcdSimpleTest+0x2c>
	    		 }
	    	}
	    }


	    for(int i = 0; i<5; i++)
 800105c:	2300      	movs	r3, #0
 800105e:	663b      	str	r3, [r7, #96]	; 0x60
 8001060:	e01b      	b.n	800109a <lcdSimpleTest+0x172>
	    	targetArray[i].drawFilledSquareLCD(LCD_WIDTH,LCD_HEIGHT,FRAME_BUF_1, FRAME_BUF_2,
 8001062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	3370      	adds	r3, #112	; 0x70
 8001068:	443b      	add	r3, r7
 800106a:	3b58      	subs	r3, #88	; 0x58
 800106c:	681c      	ldr	r4, [r3, #0]
 800106e:	f107 0210 	add.w	r2, r7, #16
 8001072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	2302      	movs	r3, #2
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <lcdSimpleTest+0x188>)
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2302      	movs	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001090:	20f0      	movs	r0, #240	; 0xf0
 8001092:	47a0      	blx	r4
	    for(int i = 0; i<5; i++)
 8001094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001096:	3301      	adds	r3, #1
 8001098:	663b      	str	r3, [r7, #96]	; 0x60
 800109a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800109c:	2b04      	cmp	r3, #4
 800109e:	dde0      	ble.n	8001062 <lcdSimpleTest+0x13a>
 80010a0:	e000      	b.n	80010a4 <lcdSimpleTest+0x17c>
	        return;
 80010a2:	bf00      	nop
	    			FRAME_BUF_1_ADDRESS, FRAME_BUF_2_ADDRESS, FRAME_BUF_2, &targetArray[i]);
}
 80010a4:	3774      	adds	r7, #116	; 0x74
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0800f810 	.word	0x0800f810
 80010b0:	d0100000 	.word	0xd0100000

080010b4 <generate_random_position>:


uint32_t generate_random_position(uint32_t minRange, uint32_t maxRange){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  HAL_RNG_Init(&hrng);
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <generate_random_position+0x4c>)
 80010c0:	f006 f900 	bl	80072c4 <HAL_RNG_Init>
  uint32_t random_number = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  while(!random_number) {
 80010c8:	e005      	b.n	80010d6 <generate_random_position+0x22>
     HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <generate_random_position+0x4c>)
 80010d2:	f006 f921 	bl	8007318 <HAL_RNG_GenerateRandomNumber>
  while(!random_number) {
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f6      	beq.n	80010ca <generate_random_position+0x16>
  }
  random_number = (random_number%(maxRange - minRange + 1)) + minRange;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	1a8a      	subs	r2, r1, r2
 80010e4:	3201      	adds	r2, #1
 80010e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80010ea:	fb01 f202 	mul.w	r2, r1, r2
 80010ee:	1a9a      	subs	r2, r3, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  return random_number;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200004f4 	.word	0x200004f4

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f002 f8df 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f833 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f000 fab5 	bl	8001680 <MX_GPIO_Init>
  MX_CRC_Init();
 8001116:	f000 f899 	bl	800124c <MX_CRC_Init>
  MX_DMA2D_Init();
 800111a:	f000 f8ab 	bl	8001274 <MX_DMA2D_Init>
  MX_FMC_Init();
 800111e:	f000 fa5f 	bl	80015e0 <MX_FMC_Init>
  MX_I2C3_Init();
 8001122:	f000 f8d9 	bl	80012d8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001126:	f000 f917 	bl	8001358 <MX_LTDC_Init>
  MX_SPI5_Init();
 800112a:	f000 f9a9 	bl	8001480 <MX_SPI5_Init>
  MX_TIM1_Init();
 800112e:	f000 f9dd 	bl	80014ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001132:	f000 fa2b 	bl	800158c <MX_USART1_UART_Init>
  MX_RNG_Init();
 8001136:	f000 f98f 	bl	8001458 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  //Initialization of the LCD
  initializeLCD();
 800113a:	f7ff fe93 	bl	8000e64 <initializeLCD>
  //Test of the LCD
  lcdSimpleTest();
 800113e:	f7ff fef3 	bl	8000f28 <lcdSimpleTest>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <main+0x6c>)
 8001144:	1d3c      	adds	r4, r7, #4
 8001146:	461d      	mov	r5, r3
 8001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00b facc 	bl	800c6f6 <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <main+0x70>)
 8001162:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001164:	f00b fac0 	bl	800c6e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8001168:	f00c fbe4 	bl	800d934 <vTaskStartScheduler>
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x68>
 800116e:	bf00      	nop
 8001170:	0800f794 	.word	0x0800f794
 8001174:	2000061c 	.word	0x2000061c

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00e f8a6 	bl	800f2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <SystemClock_Config+0xcc>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c4:	4a20      	ldr	r2, [pc, #128]	; (8001248 <SystemClock_Config+0xd0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011f0:	2348      	movs	r3, #72	; 0x48
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f005 f9d5 	bl	80065b0 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800120c:	f000 fb64 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2102      	movs	r1, #2
 800122c:	4618      	mov	r0, r3
 800122e:	f005 fc37 	bl	8006aa0 <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001238:	f000 fb4e 	bl	80018d8 <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	3750      	adds	r7, #80	; 0x50
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CRC_Init+0x20>)
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <MX_CRC_Init+0x24>)
 8001254:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_CRC_Init+0x20>)
 8001258:	f002 f980 	bl	800355c <HAL_CRC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001262:	f000 fb39 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200003b0 	.word	0x200003b0
 8001270:	40023000 	.word	0x40023000

08001274 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <MX_DMA2D_Init+0x60>)
 800127c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 80012aa:	f002 fb31 	bl	8003910 <HAL_DMA2D_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80012b4:	f000 fb10 	bl	80018d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012b8:	2101      	movs	r1, #1
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_DMA2D_Init+0x5c>)
 80012bc:	f002 fc82 	bl	8003bc4 <HAL_DMA2D_ConfigLayer>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012c6:	f000 fb07 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200003b8 	.word	0x200003b8
 80012d4:	4002b000 	.word	0x4002b000

080012d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_I2C3_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <MX_I2C3_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_I2C3_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <MX_I2C3_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_I2C3_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_I2C3_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_I2C3_Init+0x74>)
 80012f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_I2C3_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C3_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_I2C3_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_I2C3_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_I2C3_Init+0x74>)
 8001316:	f004 fbc3 	bl	8005aa0 <HAL_I2C_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001320:	f000 fada 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <MX_I2C3_Init+0x74>)
 8001328:	f004 fcfe 	bl	8005d28 <HAL_I2CEx_ConfigAnalogFilter>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001332:	f000 fad1 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_I2C3_Init+0x74>)
 800133a:	f004 fd31 	bl	8005da0 <HAL_I2CEx_ConfigDigitalFilter>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 fac8 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003f8 	.word	0x200003f8
 8001350:	40005c00 	.word	0x40005c00
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
//
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2234      	movs	r2, #52	; 0x34
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f00d ffb7 	bl	800f2d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
//
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <MX_LTDC_Init+0xf8>)
 800136c:	4a39      	ldr	r2, [pc, #228]	; (8001454 <MX_LTDC_Init+0xfc>)
 800136e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_LTDC_Init+0xf8>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <MX_LTDC_Init+0xf8>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <MX_LTDC_Init+0xf8>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_LTDC_Init+0xf8>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_LTDC_Init+0xf8>)
 800138a:	2209      	movs	r2, #9
 800138c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_LTDC_Init+0xf8>)
 8001390:	2201      	movs	r2, #1
 8001392:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_LTDC_Init+0xf8>)
 8001396:	221d      	movs	r2, #29
 8001398:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_LTDC_Init+0xf8>)
 800139c:	2203      	movs	r2, #3
 800139e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013a2:	f240 120d 	movw	r2, #269	; 0x10d
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013aa:	f240 1243 	movw	r2, #323	; 0x143
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013b2:	f240 1217 	movw	r2, #279	; 0x117
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013ba:	f240 1247 	movw	r2, #327	; 0x147
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_LTDC_Init+0xf8>)
 80013da:	f004 fd21 	bl	8005e20 <HAL_LTDC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 fa78 	bl	80018d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80013ec:	23f0      	movs	r3, #240	; 0xf0
 80013ee:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80013f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013f8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013fa:	2302      	movs	r3, #2
 80013fc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013fe:	23ff      	movs	r3, #255	; 0xff
 8001400:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800140a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800140c:	2307      	movs	r3, #7
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001410:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001416:	23f0      	movs	r3, #240	; 0xf0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800141a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_LTDC_Init+0xf8>)
 800143a:	f004 fe83 	bl	8006144 <HAL_LTDC_ConfigLayer>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001444:	f000 fa48 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
//
  /* USER CODE END LTDC_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000044c 	.word	0x2000044c
 8001454:	40016800 	.word	0x40016800

08001458 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_RNG_Init+0x20>)
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <MX_RNG_Init+0x24>)
 8001460:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_RNG_Init+0x20>)
 8001464:	f005 ff2e 	bl	80072c4 <HAL_RNG_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800146e:	f000 fa33 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200004f4 	.word	0x200004f4
 800147c:	50060800 	.word	0x50060800

08001480 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_SPI5_Init+0x64>)
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <MX_SPI5_Init+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_SPI5_Init+0x64>)
 800148c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001490:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SPI5_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_SPI5_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014b4:	2218      	movs	r2, #24
 80014b6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014cc:	220a      	movs	r2, #10
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014d2:	f006 f873 	bl	80075bc <HAL_SPI_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80014dc:	f000 f9fc 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000504 	.word	0x20000504
 80014e8:	40015000 	.word	0x40015000

080014ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_TIM1_Init+0x98>)
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <MX_TIM1_Init+0x9c>)
 800150c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_TIM1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_TIM1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_TIM1_Init+0x98>)
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_TIM1_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_TIM1_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_TIM1_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_TIM1_Init+0x98>)
 8001536:	f006 fe1f 	bl	8008178 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f9ca 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_TIM1_Init+0x98>)
 8001552:	f006 ffd9 	bl	8008508 <HAL_TIM_ConfigClockSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800155c:	f000 f9bc 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_TIM1_Init+0x98>)
 800156e:	f007 f9f5 	bl	800895c <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001578:	f000 f9ae 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000055c 	.word	0x2000055c
 8001588:	40010000 	.word	0x40010000

0800158c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART1_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART1_UART_Init+0x4c>)
 80015c4:	f007 fa5a 	bl	8008a7c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f983 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200005a4 	.word	0x200005a4
 80015dc:	40011000 	.word	0x40011000

080015e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_FMC_Init+0x98>)
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <MX_FMC_Init+0x9c>)
 80015fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_FMC_Init+0x98>)
 8001600:	2201      	movs	r2, #1
 8001602:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_FMC_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_FMC_Init+0x98>)
 800160c:	2204      	movs	r2, #4
 800160e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_FMC_Init+0x98>)
 8001612:	2210      	movs	r2, #16
 8001614:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_FMC_Init+0x98>)
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_FMC_Init+0x98>)
 800161e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001622:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_FMC_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_FMC_Init+0x98>)
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_FMC_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_FMC_Init+0x98>)
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001644:	2307      	movs	r3, #7
 8001646:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001648:	2304      	movs	r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800164c:	2307      	movs	r3, #7
 800164e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001650:	2303      	movs	r3, #3
 8001652:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_FMC_Init+0x98>)
 8001662:	f005 ff1a 	bl	800749a <HAL_SDRAM_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800166c:	f000 f934 	bl	80018d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200005e8 	.word	0x200005e8
 800167c:	a0000140 	.word	0xa0000140

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <MX_GPIO_Init+0x208>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a7a      	ldr	r2, [pc, #488]	; (8001888 <MX_GPIO_Init+0x208>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <MX_GPIO_Init+0x208>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	4b74      	ldr	r3, [pc, #464]	; (8001888 <MX_GPIO_Init+0x208>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a73      	ldr	r2, [pc, #460]	; (8001888 <MX_GPIO_Init+0x208>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b71      	ldr	r3, [pc, #452]	; (8001888 <MX_GPIO_Init+0x208>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <MX_GPIO_Init+0x208>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a6c      	ldr	r2, [pc, #432]	; (8001888 <MX_GPIO_Init+0x208>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <MX_GPIO_Init+0x208>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b66      	ldr	r3, [pc, #408]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a65      	ldr	r2, [pc, #404]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <MX_GPIO_Init+0x208>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <MX_GPIO_Init+0x208>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <MX_GPIO_Init+0x208>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <MX_GPIO_Init+0x208>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b58      	ldr	r3, [pc, #352]	; (8001888 <MX_GPIO_Init+0x208>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a57      	ldr	r2, [pc, #348]	; (8001888 <MX_GPIO_Init+0x208>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b55      	ldr	r3, [pc, #340]	; (8001888 <MX_GPIO_Init+0x208>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <MX_GPIO_Init+0x208>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a50      	ldr	r2, [pc, #320]	; (8001888 <MX_GPIO_Init+0x208>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <MX_GPIO_Init+0x208>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <MX_GPIO_Init+0x208>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a49      	ldr	r2, [pc, #292]	; (8001888 <MX_GPIO_Init+0x208>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <MX_GPIO_Init+0x208>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2116      	movs	r1, #22
 800177a:	4844      	ldr	r0, [pc, #272]	; (800188c <MX_GPIO_Init+0x20c>)
 800177c:	f002 fd6c 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	4842      	ldr	r0, [pc, #264]	; (8001890 <MX_GPIO_Init+0x210>)
 8001786:	f002 fd67 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001790:	4840      	ldr	r0, [pc, #256]	; (8001894 <MX_GPIO_Init+0x214>)
 8001792:	f002 fd61 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800179c:	483e      	ldr	r0, [pc, #248]	; (8001898 <MX_GPIO_Init+0x218>)
 800179e:	f002 fd5b 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80017a2:	2316      	movs	r3, #22
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4834      	ldr	r0, [pc, #208]	; (800188c <MX_GPIO_Init+0x20c>)
 80017ba:	f002 fa95 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80017be:	f248 0307 	movw	r3, #32775	; 0x8007
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	482e      	ldr	r0, [pc, #184]	; (8001890 <MX_GPIO_Init+0x210>)
 80017d6:	f002 fa87 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4827      	ldr	r0, [pc, #156]	; (8001890 <MX_GPIO_Init+0x210>)
 80017f2:	f002 fa79 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017f6:	2320      	movs	r3, #32
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4820      	ldr	r0, [pc, #128]	; (800188c <MX_GPIO_Init+0x20c>)
 800180c:	f002 fa6c 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001810:	2304      	movs	r3, #4
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	481e      	ldr	r0, [pc, #120]	; (800189c <MX_GPIO_Init+0x21c>)
 8001824:	f002 fa60 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <MX_GPIO_Init+0x214>)
 800183e:	f002 fa53 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001842:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <MX_GPIO_Init+0x214>)
 800185c:	f002 fa44 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001860:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_GPIO_Init+0x218>)
 800187a:	f002 fa35 	bl	8003ce8 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021800 	.word	0x40021800
 800189c:	40020400 	.word	0x40020400

080018a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80018a8:	f00d f9c4 	bl	800ec34 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f00a ff6e 	bl	800c78e <osDelay>
 80018b2:	e7fb      	b.n	80018ac <StartDefaultTask+0xc>

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f001 fd23 	bl	8003310 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40001000 	.word	0x40001000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x54>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_MspInit+0x54>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_MspInit+0x54>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_MspInit+0x54>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	f06f 0001 	mvn.w	r0, #1
 800192a:	f001 fded 	bl	8003508 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_CRC_MspInit+0x3c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10d      	bne.n	800196a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_CRC_MspInit+0x40>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_CRC_MspInit+0x40>)
 8001958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_CRC_MspInit+0x40>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023000 	.word	0x40023000
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_DMA2D_MspInit+0x48>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d115      	bne.n	80019be <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_DMA2D_MspInit+0x4c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_DMA2D_MspInit+0x4c>)
 800199c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_DMA2D_MspInit+0x4c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	205a      	movs	r0, #90	; 0x5a
 80019b4:	f001 fda8 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80019b8:	205a      	movs	r0, #90	; 0x5a
 80019ba:	f001 fdc1 	bl	8003540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	4002b000 	.word	0x4002b000
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_I2C_MspInit+0xc4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d14b      	bne.n	8001a8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <HAL_I2C_MspInit+0xcc>)
 8001a48:	f002 f94e 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <HAL_I2C_MspInit+0xd0>)
 8001a6a:	f002 f93d 	bl	8003ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40005c00 	.word	0x40005c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b09a      	sub	sp, #104	; 0x68
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	2230      	movs	r2, #48	; 0x30
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00d fc07 	bl	800f2d8 <memset>
  if(hltdc->Instance==LTDC)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a85      	ldr	r2, [pc, #532]	; (8001ce4 <HAL_LTDC_MspInit+0x240>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	f040 8102 	bne.w	8001cda <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001ada:	2332      	movs	r3, #50	; 0x32
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fa2a 	bl	8006f44 <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001af6:	f7ff feef 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	4b7a      	ldr	r3, [pc, #488]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a79      	ldr	r2, [pc, #484]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b77      	ldr	r3, [pc, #476]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a72      	ldr	r2, [pc, #456]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a64      	ldr	r2, [pc, #400]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a5d      	ldr	r2, [pc, #372]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <HAL_LTDC_MspInit+0x244>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4844      	ldr	r0, [pc, #272]	; (8001cec <HAL_LTDC_MspInit+0x248>)
 8001bdc:	f002 f884 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001be0:	f641 0358 	movw	r3, #6232	; 0x1858
 8001be4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf2:	230e      	movs	r3, #14
 8001bf4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	483c      	ldr	r0, [pc, #240]	; (8001cf0 <HAL_LTDC_MspInit+0x24c>)
 8001bfe:	f002 f873 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c02:	2303      	movs	r3, #3
 8001c04:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c12:	2309      	movs	r3, #9
 8001c14:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <HAL_LTDC_MspInit+0x250>)
 8001c1e:	f002 f863 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c22:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c26:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c34:	230e      	movs	r3, #14
 8001c36:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <HAL_LTDC_MspInit+0x250>)
 8001c40:	f002 f852 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c44:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c56:	230e      	movs	r3, #14
 8001c58:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4825      	ldr	r0, [pc, #148]	; (8001cf8 <HAL_LTDC_MspInit+0x254>)
 8001c62:	f002 f841 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001c6a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c78:	230e      	movs	r3, #14
 8001c7a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c80:	4619      	mov	r1, r3
 8001c82:	481e      	ldr	r0, [pc, #120]	; (8001cfc <HAL_LTDC_MspInit+0x258>)
 8001c84:	f002 f830 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001c88:	2348      	movs	r3, #72	; 0x48
 8001c8a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c98:	230e      	movs	r3, #14
 8001c9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4817      	ldr	r0, [pc, #92]	; (8001d00 <HAL_LTDC_MspInit+0x25c>)
 8001ca4:	f002 f820 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ca8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cba:	2309      	movs	r3, #9
 8001cbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_LTDC_MspInit+0x254>)
 8001cc6:	f002 f80f 	bl	8003ce8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	2058      	movs	r0, #88	; 0x58
 8001cd0:	f001 fc1a 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cd4:	2058      	movs	r0, #88	; 0x58
 8001cd6:	f001 fc33 	bl	8003540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3768      	adds	r7, #104	; 0x68
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40016800 	.word	0x40016800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_RNG_MspInit+0x48>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d115      	bne.n	8001d42 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RNG_MspInit+0x4c>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_RNG_MspInit+0x4c>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d24:	6353      	str	r3, [r2, #52]	; 0x34
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RNG_MspInit+0x4c>)
 8001d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	2050      	movs	r0, #80	; 0x50
 8001d38:	f001 fbe6 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001d3c:	2050      	movs	r0, #80	; 0x50
 8001d3e:	f001 fbff 	bl	8003540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	50060800 	.word	0x50060800
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_SPI_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001dae:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001dcc:	f001 ff8c 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40015000 	.word	0x40015000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021400 	.word	0x40021400

08001de4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_SPI_MspDeInit+0x30>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10a      	bne.n	8001e0c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_SPI_MspDeInit+0x34>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_SPI_MspDeInit+0x34>)
 8001dfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001e02:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_SPI_MspDeInit+0x38>)
 8001e08:	f002 f91a 	bl	8004040 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40015000 	.word	0x40015000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021400 	.word	0x40021400

08001e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_TIM_Base_MspInit+0x3c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10d      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ebe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001edc:	f001 ff04 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f08:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_FMC_MspInit+0x104>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d16f      	bne.n	8001ff0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_FMC_MspInit+0x104>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_FMC_MspInit+0x108>)
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_FMC_MspInit+0x108>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6393      	str	r3, [r2, #56]	; 0x38
 8001f26:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_FMC_MspInit+0x108>)
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f36:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f44:	230c      	movs	r3, #12
 8001f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	482c      	ldr	r0, [pc, #176]	; (8002000 <HAL_FMC_MspInit+0x10c>)
 8001f4e:	f001 fecb 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001f52:	2301      	movs	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4826      	ldr	r0, [pc, #152]	; (8002004 <HAL_FMC_MspInit+0x110>)
 8001f6c:	f001 febc 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f70:	f248 1333 	movw	r3, #33075	; 0x8133
 8001f74:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f82:	230c      	movs	r3, #12
 8001f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481f      	ldr	r0, [pc, #124]	; (8002008 <HAL_FMC_MspInit+0x114>)
 8001f8c:	f001 feac 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f94:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4818      	ldr	r0, [pc, #96]	; (800200c <HAL_FMC_MspInit+0x118>)
 8001fac:	f001 fe9c 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001fb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001fb4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <HAL_FMC_MspInit+0x11c>)
 8001fcc:	f001 fe8c 	bl	8003ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001fd0:	2360      	movs	r3, #96	; 0x60
 8001fd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480a      	ldr	r0, [pc, #40]	; (8002014 <HAL_FMC_MspInit+0x120>)
 8001fea:	f001 fe7d 	bl	8003ce8 <HAL_GPIO_Init>
 8001fee:	e000      	b.n	8001ff2 <HAL_FMC_MspInit+0xfe>
    return;
 8001ff0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000620 	.word	0x20000620
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021400 	.word	0x40021400
 8002004:	40020800 	.word	0x40020800
 8002008:	40021800 	.word	0x40021800
 800200c:	40021000 	.word	0x40021000
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002020:	f7ff ff68 	bl	8001ef4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	; 0x38
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_InitTick+0xe4>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	4a32      	ldr	r2, [pc, #200]	; (8002110 <HAL_InitTick+0xe4>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6413      	str	r3, [r2, #64]	; 0x40
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_InitTick+0xe4>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002058:	f107 0210 	add.w	r2, r7, #16
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f004 ff3c 	bl	8006ee0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002072:	f004 ff0d 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 8002076:	6378      	str	r0, [r7, #52]	; 0x34
 8002078:	e004      	b.n	8002084 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800207a:	f004 ff09 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 800207e:	4603      	mov	r3, r0
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_InitTick+0xe8>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9b      	lsrs	r3, r3, #18
 800208e:	3b01      	subs	r3, #1
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_InitTick+0xec>)
 8002094:	4a21      	ldr	r2, [pc, #132]	; (800211c <HAL_InitTick+0xf0>)
 8002096:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_InitTick+0xec>)
 800209a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800209e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_InitTick+0xec>)
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_InitTick+0xec>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_InitTick+0xec>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_InitTick+0xec>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020b8:	4817      	ldr	r0, [pc, #92]	; (8002118 <HAL_InitTick+0xec>)
 80020ba:	f006 f85d 	bl	8008178 <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11b      	bne.n	8002104 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020cc:	4812      	ldr	r0, [pc, #72]	; (8002118 <HAL_InitTick+0xec>)
 80020ce:	f006 f8a3 	bl	8008218 <HAL_TIM_Base_Start_IT>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020e0:	2036      	movs	r0, #54	; 0x36
 80020e2:	f001 fa2d 	bl	8003540 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d808      	bhi.n	80020fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	2036      	movs	r0, #54	; 0x36
 80020f2:	f001 fa09 	bl	8003508 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_InitTick+0xf4>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e002      	b.n	8002104 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002108:	4618      	mov	r0, r3
 800210a:	3738      	adds	r7, #56	; 0x38
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	431bde83 	.word	0x431bde83
 8002118:	20000624 	.word	0x20000624
 800211c:	40001000 	.word	0x40001000
 8002120:	2000004c 	.word	0x2000004c

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <TIM6_DAC_IRQHandler+0x10>)
 8002156:	f006 f8cf 	bl	80082f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000624 	.word	0x20000624

08002164 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <OTG_HS_IRQHandler+0x10>)
 800216a:	f002 faf9 	bl	8004760 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20008dc4 	.word	0x20008dc4

08002178 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <HASH_RNG_IRQHandler+0x10>)
 800217e:	f005 f921 	bl	80073c4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200004f4 	.word	0x200004f4

0800218c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <LTDC_IRQHandler+0x10>)
 8002192:	f003 ff15 	bl	8005fc0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000044c 	.word	0x2000044c

080021a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <DMA2D_IRQHandler+0x10>)
 80021a6:	f001 fbfc 	bl	80039a2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200003b8 	.word	0x200003b8

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f00d f82e 	bl	800f244 <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20030000 	.word	0x20030000
 8002214:	00000400 	.word	0x00000400
 8002218:	2000066c 	.word	0x2000066c
 800221c:	200090d8 	.word	0x200090d8

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <drawFilledSquareLCD>:
#include <stdbool.h>


static void drawFilledSquareLCD(uint16_t LCD_WIDTH,uint16_t LCD_HEIGHT,uint8_t FRAME_BUF_1, uint8_t FRAME_BUF_2,
		uint32_t FRAME_BUF_1_ADDRESS, uint32_t FRAME_BUF_2_ADDRESS, uint8_t frameBufIndex, struct Target *this)
{
 8002244:	b490      	push	{r4, r7}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4604      	mov	r4, r0
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	80fb      	strh	r3, [r7, #6]
 8002256:	4603      	mov	r3, r0
 8002258:	80bb      	strh	r3, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
 800225e:	4613      	mov	r3, r2
 8002260:	70bb      	strb	r3, [r7, #2]
//    color = (COLOR_MASK - color) | ALPHA_MASK;

    uint32_t *ptr;
    if (frameBufIndex == FRAME_BUF_1)
 8002262:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	429a      	cmp	r2, r3
 800226a:	d102      	bne.n	8002272 <drawFilledSquareLCD+0x2e>
    {
        ptr = (uint32_t *)(FRAME_BUF_1_ADDRESS);
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e006      	b.n	8002280 <drawFilledSquareLCD+0x3c>
    }
    else if (frameBufIndex == FRAME_BUF_2)
 8002272:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	429a      	cmp	r2, r3
 800227a:	d167      	bne.n	800234c <drawFilledSquareLCD+0x108>
    {
        ptr = (uint32_t *)FRAME_BUF_2_ADDRESS;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	617b      	str	r3, [r7, #20]
    else
    {
        return;
    }

    if (this->size & 1)
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d161      	bne.n	8002350 <drawFilledSquareLCD+0x10c>
    {
        return;
    }
    this->size >>= 1;
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	791b      	ldrb	r3, [r3, #4]
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	711a      	strb	r2, [r3, #4]
    uint16_t startX = this->base.xCoord - this->size, startY = this->base.yCoord - this->size,
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	81fb      	strh	r3, [r7, #14]
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	885a      	ldrh	r2, [r3, #2]
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	81bb      	strh	r3, [r7, #12]
             endX = this->base.xCoord + this->size, endY = this->base.yCoord + this->size;
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4413      	add	r3, r2
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	885a      	ldrh	r2, [r3, #2]
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	791b      	ldrb	r3, [r3, #4]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	813b      	strh	r3, [r7, #8]
    if (startX > LCD_WIDTH || startY > LCD_HEIGHT || endX > LCD_WIDTH || endY > LCD_HEIGHT)
 80022d0:	89fa      	ldrh	r2, [r7, #14]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d83d      	bhi.n	8002354 <drawFilledSquareLCD+0x110>
 80022d8:	89ba      	ldrh	r2, [r7, #12]
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d839      	bhi.n	8002354 <drawFilledSquareLCD+0x110>
 80022e0:	897a      	ldrh	r2, [r7, #10]
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d835      	bhi.n	8002354 <drawFilledSquareLCD+0x110>
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d831      	bhi.n	8002354 <drawFilledSquareLCD+0x110>
    {
        return;
    }

    uint16_t i, j;
    for (i = startY; i <= endY; ++i)
 80022f0:	89bb      	ldrh	r3, [r7, #12]
 80022f2:	827b      	strh	r3, [r7, #18]
 80022f4:	e025      	b.n	8002342 <drawFilledSquareLCD+0xfe>
    {
        for (j = startX; j <= endX; ++j)
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	823b      	strh	r3, [r7, #16]
 80022fa:	e01b      	b.n	8002334 <drawFilledSquareLCD+0xf0>
        {
            if (i == 0)
 80022fc:	8a7b      	ldrh	r3, [r7, #18]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d107      	bne.n	8002312 <drawFilledSquareLCD+0xce>
            {
                *(ptr + j) = LCD_COLOR_GREEN;
 8002302:	8a3b      	ldrh	r3, [r7, #16]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4413      	add	r3, r2
 800230a:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e00d      	b.n	800232e <drawFilledSquareLCD+0xea>
            }
            else
            {
                *(ptr + (i - 1) * LCD_WIDTH + j) = LCD_COLOR_BLACK;
 8002312:	8a7b      	ldrh	r3, [r7, #18]
 8002314:	3b01      	subs	r3, #1
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	461a      	mov	r2, r3
 800231e:	8a3b      	ldrh	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4413      	add	r3, r2
 8002328:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800232c:	601a      	str	r2, [r3, #0]
        for (j = startX; j <= endX; ++j)
 800232e:	8a3b      	ldrh	r3, [r7, #16]
 8002330:	3301      	adds	r3, #1
 8002332:	823b      	strh	r3, [r7, #16]
 8002334:	8a3a      	ldrh	r2, [r7, #16]
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	429a      	cmp	r2, r3
 800233a:	d9df      	bls.n	80022fc <drawFilledSquareLCD+0xb8>
    for (i = startY; i <= endY; ++i)
 800233c:	8a7b      	ldrh	r3, [r7, #18]
 800233e:	3301      	adds	r3, #1
 8002340:	827b      	strh	r3, [r7, #18]
 8002342:	8a7a      	ldrh	r2, [r7, #18]
 8002344:	893b      	ldrh	r3, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d9d5      	bls.n	80022f6 <drawFilledSquareLCD+0xb2>
 800234a:	e004      	b.n	8002356 <drawFilledSquareLCD+0x112>
        return;
 800234c:	bf00      	nop
 800234e:	e002      	b.n	8002356 <drawFilledSquareLCD+0x112>
        return;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <drawFilledSquareLCD+0x112>
        return;
 8002354:	bf00      	nop
            }
        }
    }
}
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bc90      	pop	{r4, r7}
 800235c:	4770      	bx	lr
	...

08002360 <isWithingRange>:

static bool isWithingRange(struct Target *targetA, struct Target *targetB){
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	if( sqrt(((targetA->base.xCoord-targetB->base.xCoord)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	1ad3      	subs	r3, r2, r3
		    *(targetA->base.xCoord-targetB->base.xCoord))
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	4611      	mov	r1, r2
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	1a8a      	subs	r2, r1, r2
 8002382:	fb03 f202 	mul.w	r2, r3, r2
		    +((targetA->base.yCoord-targetB->base.yCoord)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	885b      	ldrh	r3, [r3, #2]
 800238a:	4619      	mov	r1, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	885b      	ldrh	r3, [r3, #2]
 8002390:	1acb      	subs	r3, r1, r3
		    *(targetA->base.yCoord-targetB->base.yCoord)))
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	8849      	ldrh	r1, [r1, #2]
 8002396:	4608      	mov	r0, r1
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	8849      	ldrh	r1, [r1, #2]
 800239c:	1a41      	subs	r1, r0, r1
 800239e:	fb01 f303 	mul.w	r3, r1, r3
		    +((targetA->base.yCoord-targetB->base.yCoord)
 80023a2:	4413      	add	r3, r2
	if( sqrt(((targetA->base.xCoord-targetB->base.xCoord)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f875 	bl	8000494 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	ec43 2b10 	vmov	d0, r2, r3
 80023b2:	f00d f8ff 	bl	800f5b4 <sqrt>
 80023b6:	ec55 4b10 	vmov	r4, r5, d0
		    < (sqrt(2) * targetA->size)){
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f868 	bl	8000494 <__aeabi_i2d>
 80023c4:	a30a      	add	r3, pc, #40	; (adr r3, 80023f0 <isWithingRange+0x90>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f8cd 	bl	8000568 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
	if( sqrt(((targetA->base.xCoord-targetB->base.xCoord)
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fe fb39 	bl	8000a4c <__aeabi_dcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <isWithingRange+0x84>
		    	return true;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <isWithingRange+0x86>
	}else return false;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	667f3bcd 	.word	0x667f3bcd
 80023f4:	3ff6a09e 	.word	0x3ff6a09e

080023f8 <new>:

static struct Target new(uint16_t x, uint16_t y, uint8_t size, bool isActive) {
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	460b      	mov	r3, r1
 800240c:	813b      	strh	r3, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	71fb      	strb	r3, [r7, #7]
			struct Target ret = {.size=size, .isActive=isActive, .drawFilledSquareLCD=&drawFilledSquareLCD, .isWithingRange=&isWithingRange};
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	753b      	strb	r3, [r7, #20]
 8002424:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002428:	757b      	strb	r3, [r7, #21]
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <new+0x60>)
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <new+0x64>)
 8002430:	61fb      	str	r3, [r7, #28]
			ret.base = Base.new(x,y);
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <new+0x68>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	8939      	ldrh	r1, [r7, #8]
 8002438:	897a      	ldrh	r2, [r7, #10]
 800243a:	4610      	mov	r0, r2
 800243c:	4798      	blx	r3
 800243e:	4603      	mov	r3, r0
 8002440:	613b      	str	r3, [r7, #16]
			return ret;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	461c      	mov	r4, r3
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	08002245 	.word	0x08002245
 800245c:	08002361 	.word	0x08002361
 8002460:	0800f7f4 	.word	0x0800f7f4

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800249c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800246a:	490e      	ldr	r1, [pc, #56]	; (80024a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002480:	4c0b      	ldr	r4, [pc, #44]	; (80024b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800248e:	f7ff fec7 	bl	8002220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002492:	f00c fedd 	bl	800f250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7fe fe35 	bl	8001104 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800249c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80024a8:	08011344 	.word	0x08011344
  ldr r2, =_sbss
 80024ac:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80024b0:	200090d8 	.word	0x200090d8

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80024bc:	4819      	ldr	r0, [pc, #100]	; (8002524 <SPIx_Init+0x6c>)
 80024be:	f005 fd1d 	bl	8007efc <HAL_SPI_GetState>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d12b      	bne.n	8002520 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <SPIx_Init+0x6c>)
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <SPIx_Init+0x70>)
 80024cc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <SPIx_Init+0x6c>)
 80024d0:	2218      	movs	r2, #24
 80024d2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <SPIx_Init+0x6c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <SPIx_Init+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <SPIx_Init+0x6c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <SPIx_Init+0x6c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <SPIx_Init+0x6c>)
 80024ee:	2207      	movs	r2, #7
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <SPIx_Init+0x6c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <SPIx_Init+0x6c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <SPIx_Init+0x6c>)
 8002500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002504:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <SPIx_Init+0x6c>)
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SPIx_Init+0x6c>)
 800250e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002512:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <SPIx_Init+0x6c>)
 8002516:	f000 f853 	bl	80025c0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800251a:	4802      	ldr	r0, [pc, #8]	; (8002524 <SPIx_Init+0x6c>)
 800251c:	f005 f84e 	bl	80075bc <HAL_SPI_Init>
  } 
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000670 	.word	0x20000670
 8002528:	40015000 	.word	0x40015000

0800252c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <SPIx_Read+0x38>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f107 0108 	add.w	r1, r7, #8
 8002546:	4808      	ldr	r0, [pc, #32]	; (8002568 <SPIx_Read+0x3c>)
 8002548:	f005 fa25 	bl	8007996 <HAL_SPI_Receive>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002556:	f000 f827 	bl	80025a8 <SPIx_Error>
  }
  
  return readvalue;
 800255a:	68bb      	ldr	r3, [r7, #8]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000004 	.word	0x20000004
 8002568:	20000670 	.word	0x20000670

0800256c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <SPIx_Write+0x34>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1db9      	adds	r1, r7, #6
 8002580:	2201      	movs	r2, #1
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <SPIx_Write+0x38>)
 8002584:	f005 f8cb 	bl	800771e <HAL_SPI_Transmit>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002592:	f000 f809 	bl	80025a8 <SPIx_Error>
  }
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000670 	.word	0x20000670

080025a8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <SPIx_Error+0x14>)
 80025ae:	f005 f88e 	bl	80076ce <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80025b2:	f7ff ff81 	bl	80024b8 <SPIx_Init>
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000670 	.word	0x20000670

080025c0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <SPIx_MspInit+0x6c>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	4a16      	ldr	r2, [pc, #88]	; (800262c <SPIx_MspInit+0x6c>)
 80025d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d6:	6453      	str	r3, [r2, #68]	; 0x44
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <SPIx_MspInit+0x6c>)
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <SPIx_MspInit+0x6c>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <SPIx_MspInit+0x6c>)
 80025ee:	f043 0320 	orr.w	r3, r3, #32
 80025f2:	6313      	str	r3, [r2, #48]	; 0x30
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <SPIx_MspInit+0x6c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002600:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002604:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800260a:	2302      	movs	r3, #2
 800260c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800260e:	2301      	movs	r3, #1
 8002610:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002612:	2305      	movs	r3, #5
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <SPIx_MspInit+0x70>)
 800261e:	f001 fb63 	bl	8003ce8 <HAL_GPIO_Init>
}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40021400 	.word	0x40021400

08002634 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <LCD_IO_Init+0xe0>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d164      	bne.n	800270c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <LCD_IO_Init+0xe0>)
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <LCD_IO_Init+0xe4>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <LCD_IO_Init+0xe4>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <LCD_IO_Init+0xe4>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002668:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	4827      	ldr	r0, [pc, #156]	; (800271c <LCD_IO_Init+0xe8>)
 800267e:	f001 fb33 	bl	8003ce8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <LCD_IO_Init+0xe4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <LCD_IO_Init+0xe4>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <LCD_IO_Init+0xe4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4619      	mov	r1, r3
 80026b6:	4819      	ldr	r0, [pc, #100]	; (800271c <LCD_IO_Init+0xe8>)
 80026b8:	f001 fb16 	bl	8003ce8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <LCD_IO_Init+0xe4>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <LCD_IO_Init+0xe4>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <LCD_IO_Init+0xe4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80026d8:	2304      	movs	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026dc:	2301      	movs	r3, #1
 80026de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4619      	mov	r1, r3
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <LCD_IO_Init+0xec>)
 80026f0:	f001 fafa 	bl	8003ce8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80026f4:	2200      	movs	r2, #0
 80026f6:	2104      	movs	r1, #4
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <LCD_IO_Init+0xec>)
 80026fa:	f001 fdad 	bl	8004258 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80026fe:	2201      	movs	r2, #1
 8002700:	2104      	movs	r1, #4
 8002702:	4807      	ldr	r0, [pc, #28]	; (8002720 <LCD_IO_Init+0xec>)
 8002704:	f001 fda8 	bl	8004258 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002708:	f7ff fed6 	bl	80024b8 <SPIx_Init>
  }
}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200006c8 	.word	0x200006c8
 8002718:	40023800 	.word	0x40023800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40020800 	.word	0x40020800

08002724 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002734:	480a      	ldr	r0, [pc, #40]	; (8002760 <LCD_IO_WriteData+0x3c>)
 8002736:	f001 fd8f 	bl	8004258 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800273a:	2200      	movs	r2, #0
 800273c:	2104      	movs	r1, #4
 800273e:	4809      	ldr	r0, [pc, #36]	; (8002764 <LCD_IO_WriteData+0x40>)
 8002740:	f001 fd8a 	bl	8004258 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff10 	bl	800256c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800274c:	2201      	movs	r2, #1
 800274e:	2104      	movs	r1, #4
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <LCD_IO_WriteData+0x40>)
 8002752:	f001 fd81 	bl	8004258 <HAL_GPIO_WritePin>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40020800 	.word	0x40020800

08002768 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002778:	480a      	ldr	r0, [pc, #40]	; (80027a4 <LCD_IO_WriteReg+0x3c>)
 800277a:	f001 fd6d 	bl	8004258 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800277e:	2200      	movs	r2, #0
 8002780:	2104      	movs	r1, #4
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <LCD_IO_WriteReg+0x40>)
 8002784:	f001 fd68 	bl	8004258 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff feed 	bl	800256c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002792:	2201      	movs	r2, #1
 8002794:	2104      	movs	r1, #4
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <LCD_IO_WriteReg+0x40>)
 8002798:	f001 fd5e 	bl	8004258 <HAL_GPIO_WritePin>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40020800 	.word	0x40020800

080027ac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	460a      	mov	r2, r1
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	4613      	mov	r3, r2
 80027ba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80027c0:	2200      	movs	r2, #0
 80027c2:	2104      	movs	r1, #4
 80027c4:	4810      	ldr	r0, [pc, #64]	; (8002808 <LCD_IO_ReadData+0x5c>)
 80027c6:	f001 fd47 	bl	8004258 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027ca:	2200      	movs	r2, #0
 80027cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027d0:	480e      	ldr	r0, [pc, #56]	; (800280c <LCD_IO_ReadData+0x60>)
 80027d2:	f001 fd41 	bl	8004258 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fec7 	bl	800256c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fea3 	bl	800252c <SPIx_Read>
 80027e6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80027e8:	2201      	movs	r2, #1
 80027ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ee:	4807      	ldr	r0, [pc, #28]	; (800280c <LCD_IO_ReadData+0x60>)
 80027f0:	f001 fd32 	bl	8004258 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027f4:	2201      	movs	r2, #1
 80027f6:	2104      	movs	r1, #4
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <LCD_IO_ReadData+0x5c>)
 80027fa:	f001 fd2d 	bl	8004258 <HAL_GPIO_WritePin>
  
  return readvalue;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00

08002810 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fd99 	bl	8003350 <HAL_Delay>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
LCD_StatusTypeDef BSP_LCD_Init(void)
{ 
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800282e:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <BSP_LCD_Init+0xc0>)
 8002830:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002834:	2209      	movs	r2, #9
 8002836:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002838:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800283a:	2201      	movs	r2, #1
 800283c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002840:	221d      	movs	r2, #29
 8002842:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002846:	2203      	movs	r2, #3
 8002848:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800284c:	f240 120d 	movw	r2, #269	; 0x10d
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002854:	f240 1243 	movw	r2, #323	; 0x143
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800285c:	f240 1217 	movw	r2, #279	; 0x117
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002864:	f240 1247 	movw	r2, #327	; 0x147
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <BSP_LCD_Init+0xbc>)
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <BSP_LCD_Init+0xbc>)
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <BSP_LCD_Init+0xc4>)
 8002884:	2208      	movs	r2, #8
 8002886:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <BSP_LCD_Init+0xc4>)
 800288a:	22c0      	movs	r2, #192	; 0xc0
 800288c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <BSP_LCD_Init+0xc4>)
 8002890:	2204      	movs	r2, #4
 8002892:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <BSP_LCD_Init+0xc4>)
 8002896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800289c:	4813      	ldr	r0, [pc, #76]	; (80028ec <BSP_LCD_Init+0xc4>)
 800289e:	f004 fb51 	bl	8006f44 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <BSP_LCD_Init+0xbc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <BSP_LCD_Init+0xbc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <BSP_LCD_Init+0xbc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <BSP_LCD_Init+0xbc>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80028ba:	f000 f8c5 	bl	8002a48 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <BSP_LCD_Init+0xbc>)
 80028c0:	f003 faae 	bl	8005e20 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <BSP_LCD_Init+0xc8>)
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <BSP_LCD_Init+0xcc>)
 80028c8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <BSP_LCD_Init+0xc8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80028d2:	f000 f98f 	bl	8002bf4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028d6:	4808      	ldr	r0, [pc, #32]	; (80028f8 <BSP_LCD_Init+0xd0>)
 80028d8:	f000 f89c 	bl	8002a14 <BSP_LCD_SetFont>

  return LCD_OK;
 80028dc:	2300      	movs	r3, #0
}  
 80028de:	4618      	mov	r0, r3
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200006cc 	.word	0x200006cc
 80028e8:	40016800 	.word	0x40016800
 80028ec:	20000774 	.word	0x20000774
 80028f0:	200007c0 	.word	0x200007c0
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	20000044 	.word	0x20000044

080028fc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <BSP_LCD_GetXSize+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	4798      	blx	r3
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200007c0 	.word	0x200007c0

08002914 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <BSP_LCD_GetYSize+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	4798      	blx	r3
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200007c0 	.word	0x200007c0

0800292c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800292c:	b580      	push	{r7, lr}
 800292e:	b090      	sub	sp, #64	; 0x40
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800293c:	f7ff ffde 	bl	80028fc <BSP_LCD_GetXSize>
 8002940:	4603      	mov	r3, r0
 8002942:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002948:	f7ff ffe4 	bl	8002914 <BSP_LCD_GetYSize>
 800294c:	4603      	mov	r3, r0
 800294e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002958:	23ff      	movs	r3, #255	; 0xff
 800295a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002978:	2307      	movs	r3, #7
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800297c:	f7ff ffbe 	bl	80028fc <BSP_LCD_GetXSize>
 8002980:	4603      	mov	r3, r0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002984:	f7ff ffc6 	bl	8002914 <BSP_LCD_GetYSize>
 8002988:	4603      	mov	r3, r0
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800298c:	88fa      	ldrh	r2, [r7, #6]
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4619      	mov	r1, r3
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002996:	f003 fbd5 	bl	8006144 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	4913      	ldr	r1, [pc, #76]	; (80029ec <BSP_LCD_LayerDefaultInit+0xc0>)
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3304      	adds	r3, #4
 80029aa:	f04f 32ff 	mov.w	r2, #4294967295
 80029ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	490e      	ldr	r1, [pc, #56]	; (80029ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3308      	adds	r3, #8
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80029c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	4909      	ldr	r1, [pc, #36]	; (80029ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80029d6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029da:	f003 fbf1 	bl	80061c0 <HAL_LTDC_EnableDither>
}
 80029de:	bf00      	nop
 80029e0:	3740      	adds	r7, #64	; 0x40
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200006cc 	.word	0x200006cc
 80029ec:	200007a8 	.word	0x200007a8
 80029f0:	20000044 	.word	0x20000044

080029f4 <BSP_LCD_SetLayerAddress>:
  * @brief  Sets a LCD layer frame buffer address.
  * @param  LayerIndex: specifies the Layer foreground or background
  * @param  Address: new LCD frame buffer value      
  */
void BSP_LCD_SetLayerAddress(uint32_t LayerIndex, uint32_t Address)
{     
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_LTDC_SetAddress(&LtdcHandler, Address, LayerIndex);
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	4803      	ldr	r0, [pc, #12]	; (8002a10 <BSP_LCD_SetLayerAddress+0x1c>)
 8002a04:	f003 fc06 	bl	8006214 <HAL_LTDC_SetAddress>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200006cc 	.word	0x200006cc

08002a14 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <BSP_LCD_SetFont+0x2c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4908      	ldr	r1, [pc, #32]	; (8002a44 <BSP_LCD_SetFont+0x30>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200007a4 	.word	0x200007a4
 8002a44:	200007a8 	.word	0x200007a8

08002a48 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a59      	ldr	r2, [pc, #356]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b45      	ldr	r3, [pc, #276]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a44      	ldr	r2, [pc, #272]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a3d      	ldr	r2, [pc, #244]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a36      	ldr	r2, [pc, #216]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002b00:	f043 0320 	orr.w	r3, r3, #32
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <BSP_LCD_MspInit+0x190>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002b2e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002b40:	230e      	movs	r3, #14
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4824      	ldr	r0, [pc, #144]	; (8002bdc <BSP_LCD_MspInit+0x194>)
 8002b4c:	f001 f8cc 	bl	8003ce8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002b50:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4820      	ldr	r0, [pc, #128]	; (8002be0 <BSP_LCD_MspInit+0x198>)
 8002b5e:	f001 f8c3 	bl	8003ce8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002b62:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481d      	ldr	r0, [pc, #116]	; (8002be4 <BSP_LCD_MspInit+0x19c>)
 8002b70:	f001 f8ba 	bl	8003ce8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002b74:	2348      	movs	r3, #72	; 0x48
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481a      	ldr	r0, [pc, #104]	; (8002be8 <BSP_LCD_MspInit+0x1a0>)
 8002b80:	f001 f8b2 	bl	8003ce8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4816      	ldr	r0, [pc, #88]	; (8002bec <BSP_LCD_MspInit+0x1a4>)
 8002b92:	f001 f8a9 	bl	8003ce8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002b96:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <BSP_LCD_MspInit+0x1a8>)
 8002ba4:	f001 f8a0 	bl	8003ce8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002bac:	2309      	movs	r3, #9
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480a      	ldr	r0, [pc, #40]	; (8002be0 <BSP_LCD_MspInit+0x198>)
 8002bb8:	f001 f896 	bl	8003ce8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <BSP_LCD_MspInit+0x1a8>)
 8002bca:	f001 f88d 	bl	8003ce8 <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3738      	adds	r7, #56	; 0x38
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021400 	.word	0x40021400
 8002bf0:	40021800 	.word	0x40021800

08002bf4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002bfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <BSP_SDRAM_Init+0xb0>)
 8002bfc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c06:	2207      	movs	r2, #7
 8002c08:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c12:	2207      	movs	r2, #7
 8002c14:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c18:	2202      	movs	r2, #2
 8002c1a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c1e:	2202      	movs	r2, #2
 8002c20:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002c22:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c24:	2202      	movs	r2, #2
 8002c26:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c36:	2204      	movs	r2, #4
 8002c38:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c48:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c4c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c6e:	f000 f87f 	bl	8002d70 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c72:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <BSP_SDRAM_Init+0xb4>)
 8002c74:	480a      	ldr	r0, [pc, #40]	; (8002ca0 <BSP_SDRAM_Init+0xac>)
 8002c76:	f004 fc10 	bl	800749a <HAL_SDRAM_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <BSP_SDRAM_Init+0xb8>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <BSP_SDRAM_Init+0xb8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c8e:	f240 506a 	movw	r0, #1386	; 0x56a
 8002c92:	f000 f80d 	bl	8002cb0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <BSP_SDRAM_Init+0xb8>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200007c4 	.word	0x200007c4
 8002ca4:	a0000140 	.word	0xa0000140
 8002ca8:	200007f8 	.word	0x200007f8
 8002cac:	20000008 	.word	0x20000008

08002cb0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd8:	4923      	ldr	r1, [pc, #140]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cda:	4824      	ldr	r0, [pc, #144]	; (8002d6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cdc:	f004 fc11 	bl	8007502 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f000 fb35 	bl	8003350 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cee:	2208      	movs	r2, #8
 8002cf0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d02:	4919      	ldr	r1, [pc, #100]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d04:	4819      	ldr	r0, [pc, #100]	; (8002d6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d06:	f004 fbfc 	bl	8007502 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d12:	2208      	movs	r2, #8
 8002d14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d18:	2204      	movs	r2, #4
 8002d1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d26:	4910      	ldr	r1, [pc, #64]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d28:	4810      	ldr	r0, [pc, #64]	; (8002d6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d2a:	f004 fbea 	bl	8007502 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002d2e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d32:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d36:	2204      	movs	r2, #4
 8002d38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d4a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d50:	4905      	ldr	r1, [pc, #20]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d54:	f004 fbd5 	bl	8007502 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4804      	ldr	r0, [pc, #16]	; (8002d6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d5c:	f004 fc06 	bl	800756c <HAL_SDRAM_ProgramRefreshRate>
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000814 	.word	0x20000814
 8002d6c:	200007c4 	.word	0x200007c4

08002d70 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b090      	sub	sp, #64	; 0x40
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ec 	beq.w	8002f5a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d86:	4b77      	ldr	r3, [pc, #476]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4a76      	ldr	r2, [pc, #472]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6393      	str	r3, [r2, #56]	; 0x38
 8002d92:	4b74      	ldr	r3, [pc, #464]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a6f      	ldr	r2, [pc, #444]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a5a      	ldr	r2, [pc, #360]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a53      	ldr	r2, [pc, #332]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e18:	f043 0310 	orr.w	r3, r3, #16
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a45      	ldr	r2, [pc, #276]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <BSP_SDRAM_MspInit+0x1f4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e66:	2302      	movs	r3, #2
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e6e:	230c      	movs	r3, #12
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e72:	2360      	movs	r3, #96	; 0x60
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	483a      	ldr	r0, [pc, #232]	; (8002f68 <BSP_SDRAM_MspInit+0x1f8>)
 8002e7e:	f000 ff33 	bl	8003ce8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002e82:	2301      	movs	r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4837      	ldr	r0, [pc, #220]	; (8002f6c <BSP_SDRAM_MspInit+0x1fc>)
 8002e8e:	f000 ff2b 	bl	8003ce8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e92:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4834      	ldr	r0, [pc, #208]	; (8002f70 <BSP_SDRAM_MspInit+0x200>)
 8002ea0:	f000 ff22 	bl	8003ce8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ea4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4830      	ldr	r0, [pc, #192]	; (8002f74 <BSP_SDRAM_MspInit+0x204>)
 8002eb2:	f000 ff19 	bl	8003ce8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002eb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	482d      	ldr	r0, [pc, #180]	; (8002f78 <BSP_SDRAM_MspInit+0x208>)
 8002ec4:	f000 ff10 	bl	8003ce8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ec8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4829      	ldr	r0, [pc, #164]	; (8002f7c <BSP_SDRAM_MspInit+0x20c>)
 8002ed6:	f000 ff07 	bl	8003ce8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002efc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f04:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f12:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <BSP_SDRAM_MspInit+0x214>)
 8002f30:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002f3e:	4810      	ldr	r0, [pc, #64]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f40:	f000 fbd6 	bl	80036f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002f44:	480e      	ldr	r0, [pc, #56]	; (8002f80 <BSP_SDRAM_MspInit+0x210>)
 8002f46:	f000 fb25 	bl	8003594 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	210f      	movs	r1, #15
 8002f4e:	2038      	movs	r0, #56	; 0x38
 8002f50:	f000 fada 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f54:	2038      	movs	r0, #56	; 0x38
 8002f56:	f000 faf3 	bl	8003540 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f5a:	bf00      	nop
 8002f5c:	3740      	adds	r7, #64	; 0x40
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	20000824 	.word	0x20000824
 8002f84:	40026410 	.word	0x40026410

08002f88 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002f8c:	f7ff fb52 	bl	8002634 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002f90:	20ca      	movs	r0, #202	; 0xca
 8002f92:	f000 f95d 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002f96:	20c3      	movs	r0, #195	; 0xc3
 8002f98:	f000 f967 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002f9c:	2008      	movs	r0, #8
 8002f9e:	f000 f964 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002fa2:	2050      	movs	r0, #80	; 0x50
 8002fa4:	f000 f961 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002fa8:	20cf      	movs	r0, #207	; 0xcf
 8002faa:	f000 f951 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f000 f95b 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002fb4:	20c1      	movs	r0, #193	; 0xc1
 8002fb6:	f000 f958 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002fba:	2030      	movs	r0, #48	; 0x30
 8002fbc:	f000 f955 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002fc0:	20ed      	movs	r0, #237	; 0xed
 8002fc2:	f000 f945 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002fc6:	2064      	movs	r0, #100	; 0x64
 8002fc8:	f000 f94f 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f000 f94c 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002fd2:	2012      	movs	r0, #18
 8002fd4:	f000 f949 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002fd8:	2081      	movs	r0, #129	; 0x81
 8002fda:	f000 f946 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002fde:	20e8      	movs	r0, #232	; 0xe8
 8002fe0:	f000 f936 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002fe4:	2085      	movs	r0, #133	; 0x85
 8002fe6:	f000 f940 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 f93d 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002ff0:	2078      	movs	r0, #120	; 0x78
 8002ff2:	f000 f93a 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002ff6:	20cb      	movs	r0, #203	; 0xcb
 8002ff8:	f000 f92a 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002ffc:	2039      	movs	r0, #57	; 0x39
 8002ffe:	f000 f934 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003002:	202c      	movs	r0, #44	; 0x2c
 8003004:	f000 f931 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f000 f92e 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800300e:	2034      	movs	r0, #52	; 0x34
 8003010:	f000 f92b 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003014:	2002      	movs	r0, #2
 8003016:	f000 f928 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800301a:	20f7      	movs	r0, #247	; 0xf7
 800301c:	f000 f918 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003020:	2020      	movs	r0, #32
 8003022:	f000 f922 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003026:	20ea      	movs	r0, #234	; 0xea
 8003028:	f000 f912 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f91c 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f000 f919 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003038:	20b1      	movs	r0, #177	; 0xb1
 800303a:	f000 f909 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800303e:	2000      	movs	r0, #0
 8003040:	f000 f913 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003044:	201b      	movs	r0, #27
 8003046:	f000 f910 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800304a:	20b6      	movs	r0, #182	; 0xb6
 800304c:	f000 f900 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003050:	200a      	movs	r0, #10
 8003052:	f000 f90a 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003056:	20a2      	movs	r0, #162	; 0xa2
 8003058:	f000 f907 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800305c:	20c0      	movs	r0, #192	; 0xc0
 800305e:	f000 f8f7 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003062:	2010      	movs	r0, #16
 8003064:	f000 f901 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003068:	20c1      	movs	r0, #193	; 0xc1
 800306a:	f000 f8f1 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800306e:	2010      	movs	r0, #16
 8003070:	f000 f8fb 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003074:	20c5      	movs	r0, #197	; 0xc5
 8003076:	f000 f8eb 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800307a:	2045      	movs	r0, #69	; 0x45
 800307c:	f000 f8f5 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003080:	2015      	movs	r0, #21
 8003082:	f000 f8f2 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003086:	20c7      	movs	r0, #199	; 0xc7
 8003088:	f000 f8e2 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800308c:	2090      	movs	r0, #144	; 0x90
 800308e:	f000 f8ec 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003092:	2036      	movs	r0, #54	; 0x36
 8003094:	f000 f8dc 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003098:	20c8      	movs	r0, #200	; 0xc8
 800309a:	f000 f8e6 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800309e:	20f2      	movs	r0, #242	; 0xf2
 80030a0:	f000 f8d6 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f000 f8e0 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80030aa:	20b0      	movs	r0, #176	; 0xb0
 80030ac:	f000 f8d0 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80030b0:	20c2      	movs	r0, #194	; 0xc2
 80030b2:	f000 f8da 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80030b6:	20b6      	movs	r0, #182	; 0xb6
 80030b8:	f000 f8ca 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80030bc:	200a      	movs	r0, #10
 80030be:	f000 f8d4 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80030c2:	20a7      	movs	r0, #167	; 0xa7
 80030c4:	f000 f8d1 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80030c8:	2027      	movs	r0, #39	; 0x27
 80030ca:	f000 f8ce 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80030ce:	2004      	movs	r0, #4
 80030d0:	f000 f8cb 	bl	800326a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80030d4:	202a      	movs	r0, #42	; 0x2a
 80030d6:	f000 f8bb 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f8c5 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f000 f8c2 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f8bf 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80030ec:	20ef      	movs	r0, #239	; 0xef
 80030ee:	f000 f8bc 	bl	800326a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80030f2:	202b      	movs	r0, #43	; 0x2b
 80030f4:	f000 f8ac 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f000 f8b6 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 f8b3 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003104:	2001      	movs	r0, #1
 8003106:	f000 f8b0 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800310a:	203f      	movs	r0, #63	; 0x3f
 800310c:	f000 f8ad 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003110:	20f6      	movs	r0, #246	; 0xf6
 8003112:	f000 f89d 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003116:	2001      	movs	r0, #1
 8003118:	f000 f8a7 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800311c:	2000      	movs	r0, #0
 800311e:	f000 f8a4 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003122:	2006      	movs	r0, #6
 8003124:	f000 f8a1 	bl	800326a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003128:	202c      	movs	r0, #44	; 0x2c
 800312a:	f000 f891 	bl	8003250 <ili9341_WriteReg>
  LCD_Delay(200);
 800312e:	20c8      	movs	r0, #200	; 0xc8
 8003130:	f7ff fb6e 	bl	8002810 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003134:	2026      	movs	r0, #38	; 0x26
 8003136:	f000 f88b 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800313a:	2001      	movs	r0, #1
 800313c:	f000 f895 	bl	800326a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003140:	20e0      	movs	r0, #224	; 0xe0
 8003142:	f000 f885 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003146:	200f      	movs	r0, #15
 8003148:	f000 f88f 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800314c:	2029      	movs	r0, #41	; 0x29
 800314e:	f000 f88c 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003152:	2024      	movs	r0, #36	; 0x24
 8003154:	f000 f889 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003158:	200c      	movs	r0, #12
 800315a:	f000 f886 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800315e:	200e      	movs	r0, #14
 8003160:	f000 f883 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003164:	2009      	movs	r0, #9
 8003166:	f000 f880 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800316a:	204e      	movs	r0, #78	; 0x4e
 800316c:	f000 f87d 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003170:	2078      	movs	r0, #120	; 0x78
 8003172:	f000 f87a 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003176:	203c      	movs	r0, #60	; 0x3c
 8003178:	f000 f877 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800317c:	2009      	movs	r0, #9
 800317e:	f000 f874 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003182:	2013      	movs	r0, #19
 8003184:	f000 f871 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003188:	2005      	movs	r0, #5
 800318a:	f000 f86e 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800318e:	2017      	movs	r0, #23
 8003190:	f000 f86b 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003194:	2011      	movs	r0, #17
 8003196:	f000 f868 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f000 f865 	bl	800326a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80031a0:	20e1      	movs	r0, #225	; 0xe1
 80031a2:	f000 f855 	bl	8003250 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f000 f85f 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80031ac:	2016      	movs	r0, #22
 80031ae:	f000 f85c 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80031b2:	201b      	movs	r0, #27
 80031b4:	f000 f859 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80031b8:	2004      	movs	r0, #4
 80031ba:	f000 f856 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80031be:	2011      	movs	r0, #17
 80031c0:	f000 f853 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80031c4:	2007      	movs	r0, #7
 80031c6:	f000 f850 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80031ca:	2031      	movs	r0, #49	; 0x31
 80031cc:	f000 f84d 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80031d0:	2033      	movs	r0, #51	; 0x33
 80031d2:	f000 f84a 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80031d6:	2042      	movs	r0, #66	; 0x42
 80031d8:	f000 f847 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80031dc:	2005      	movs	r0, #5
 80031de:	f000 f844 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80031e2:	200c      	movs	r0, #12
 80031e4:	f000 f841 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80031e8:	200a      	movs	r0, #10
 80031ea:	f000 f83e 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80031ee:	2028      	movs	r0, #40	; 0x28
 80031f0:	f000 f83b 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80031f4:	202f      	movs	r0, #47	; 0x2f
 80031f6:	f000 f838 	bl	800326a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80031fa:	200f      	movs	r0, #15
 80031fc:	f000 f835 	bl	800326a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003200:	2011      	movs	r0, #17
 8003202:	f000 f825 	bl	8003250 <ili9341_WriteReg>
  LCD_Delay(200);
 8003206:	20c8      	movs	r0, #200	; 0xc8
 8003208:	f7ff fb02 	bl	8002810 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800320c:	2029      	movs	r0, #41	; 0x29
 800320e:	f000 f81f 	bl	8003250 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003212:	202c      	movs	r0, #44	; 0x2c
 8003214:	f000 f81c 	bl	8003250 <ili9341_WriteReg>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003220:	f7ff fa08 	bl	8002634 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003224:	2103      	movs	r1, #3
 8003226:	20d3      	movs	r0, #211	; 0xd3
 8003228:	f000 f82c 	bl	8003284 <ili9341_ReadData>
 800322c:	4603      	mov	r3, r0
 800322e:	b29b      	uxth	r3, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}

08003234 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003238:	2029      	movs	r0, #41	; 0x29
 800323a:	f000 f809 	bl	8003250 <ili9341_WriteReg>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003246:	2028      	movs	r0, #40	; 0x28
 8003248:	f000 f802 	bl	8003250 <ili9341_WriteReg>
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fa83 	bl	8002768 <LCD_IO_WriteReg>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fa54 	bl	8002724 <LCD_IO_WriteData>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	460a      	mov	r2, r1
 800328e:	80fb      	strh	r3, [r7, #6]
 8003290:	4613      	mov	r3, r2
 8003292:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003294:	797a      	ldrb	r2, [r7, #5]
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fa86 	bl	80027ac <LCD_IO_ReadData>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80032ae:	23f0      	movs	r3, #240	; 0xf0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80032be:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_Init+0x40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_Init+0x40>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_Init+0x40>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_Init+0x40>)
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_Init+0x40>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f000 f8fc 	bl	80034f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fe fe96 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003300:	f7fe faf0 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023c00 	.word	0x40023c00

08003310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x20>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x24>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4413      	add	r3, r2
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_IncTick+0x24>)
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000050 	.word	0x20000050
 8003334:	20000884 	.word	0x20000884

08003338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_GetTick+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000884 	.word	0x20000884

08003350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7ff ffee 	bl	8003338 <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d005      	beq.n	8003376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_Delay+0x44>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003376:	bf00      	nop
 8003378:	f7ff ffde 	bl	8003338 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d8f7      	bhi.n	8003378 <HAL_Delay+0x28>
  {
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000050 	.word	0x20000050

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	; (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
         );
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff4c 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800351a:	f7ff ff61 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 800351e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	6978      	ldr	r0, [r7, #20]
 8003526:	f7ff ffb1 	bl	800348c <NVIC_EncodePriority>
 800352a:	4602      	mov	r2, r0
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff80 	bl	8003438 <__NVIC_SetPriority>
}
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff54 	bl	80033fc <__NVIC_EnableIRQ>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e00e      	b.n	800358c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	795b      	ldrb	r3, [r3, #5]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f9dc 	bl	800193c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7ff feca 	bl	8003338 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e099      	b.n	80036e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d0:	e00f      	b.n	80035f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7ff feb1 	bl	8003338 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d908      	bls.n	80035f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e078      	b.n	80036e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e8      	bne.n	80035d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_DMA_Init+0x158>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b04      	cmp	r3, #4
 800364a:	d107      	bne.n	800365c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4313      	orrs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b04      	cmp	r3, #4
 8003684:	d117      	bne.n	80036b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8bd 	bl	8003818 <DMA_CheckFifoParam>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036b2:	2301      	movs	r3, #1
 80036b4:	e016      	b.n	80036e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f874 	bl	80037ac <DMA_CalcBaseAndBitshift>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	f010803f 	.word	0xf010803f

080036f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e050      	b.n	80037a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d101      	bne.n	8003712 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	e048      	b.n	80037a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2221      	movs	r2, #33	; 0x21
 8003750:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f82a 	bl	80037ac <DMA_CalcBaseAndBitshift>
 8003758:	4603      	mov	r3, r0
 800375a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	223f      	movs	r2, #63	; 0x3f
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	3b10      	subs	r3, #16
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <DMA_CalcBaseAndBitshift+0x64>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <DMA_CalcBaseAndBitshift+0x68>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d909      	bls.n	80037ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	659a      	str	r2, [r3, #88]	; 0x58
 80037ec:	e007      	b.n	80037fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	aaaaaaab 	.word	0xaaaaaaab
 8003814:	080112cc 	.word	0x080112cc

08003818 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d11f      	bne.n	8003872 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d856      	bhi.n	80038e6 <DMA_CheckFifoParam+0xce>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <DMA_CheckFifoParam+0x28>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003851 	.word	0x08003851
 8003844:	08003863 	.word	0x08003863
 8003848:	08003851 	.word	0x08003851
 800384c:	080038e7 	.word	0x080038e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d046      	beq.n	80038ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e043      	b.n	80038ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800386a:	d140      	bne.n	80038ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003870:	e03d      	b.n	80038ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387a:	d121      	bne.n	80038c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d837      	bhi.n	80038f2 <DMA_CheckFifoParam+0xda>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <DMA_CheckFifoParam+0x70>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	08003899 	.word	0x08003899
 800388c:	0800389f 	.word	0x0800389f
 8003890:	08003899 	.word	0x08003899
 8003894:	080038b1 	.word	0x080038b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e030      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d025      	beq.n	80038f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ae:	e022      	b.n	80038f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b8:	d11f      	bne.n	80038fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038be:	e01c      	b.n	80038fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d903      	bls.n	80038ce <DMA_CheckFifoParam+0xb6>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d003      	beq.n	80038d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038cc:	e018      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      break;
 80038d2:	e015      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e00b      	b.n	80038fe <DMA_CheckFifoParam+0xe6>
      break;
 80038e6:	bf00      	nop
 80038e8:	e00a      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e008      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e006      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;
 80038f2:	bf00      	nop
 80038f4:	e004      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
 80038f8:	e002      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;   
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03b      	b.n	800399a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe f822 	bl	8001980 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f023 0107 	bic.w	r1, r3, #7
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800397a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d1      	ldr	r1, [r2, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	430b      	orrs	r3, r1
 8003988:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d026      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039dc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d026      	beq.n	8003a6a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d021      	beq.n	8003a6a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a34:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d026      	beq.n	8003ac2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d021      	beq.n	8003ac2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2208      	movs	r2, #8
 8003a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2204      	movs	r2, #4
 8003aec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f853 	bl	8003b9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d024      	beq.n	8003b48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01f      	beq.n	8003b48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01f      	beq.n	8003b92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01a      	beq.n	8003b92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f80e 	bl	8003bae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA2D_ConfigLayer+0x20>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e079      	b.n	8003cd8 <HAL_DMA2D_ConfigLayer+0x114>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3318      	adds	r3, #24
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c0e:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c10:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b0a      	cmp	r3, #10
 8003c18:	d003      	beq.n	8003c22 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b09      	cmp	r3, #9
 8003c20:	d107      	bne.n	8003c32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e005      	b.n	8003c3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d120      	bne.n	8003c86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	ea02 0103 	and.w	r1, r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA2D_ConfigLayer+0xb2>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d127      	bne.n	8003cc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
 8003c84:	e01f      	b.n	8003cc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	ea02 0103 	and.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b0a      	cmp	r3, #10
 8003cae:	d003      	beq.n	8003cb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d106      	bne.n	8003cc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cc4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	ff03000f 	.word	0xff03000f

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e177      	b.n	8003ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	f040 8166 	bne.w	8003fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d005      	beq.n	8003d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d130      	bne.n	8003d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2203      	movs	r2, #3
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d70:	2201      	movs	r2, #1
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 0201 	and.w	r2, r3, #1
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d017      	beq.n	8003dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d123      	bne.n	8003e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	08da      	lsrs	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3208      	adds	r2, #8
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80c0 	beq.w	8003fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e8a:	4a61      	ldr	r2, [pc, #388]	; (8004010 <HAL_GPIO_Init+0x328>)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <HAL_GPIO_Init+0x32c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d037      	beq.n	8003f26 <HAL_GPIO_Init+0x23e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_GPIO_Init+0x330>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_GPIO_Init+0x23a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_GPIO_Init+0x334>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x236>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_GPIO_Init+0x338>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x232>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_GPIO_Init+0x33c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x22e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a53      	ldr	r2, [pc, #332]	; (8004028 <HAL_GPIO_Init+0x340>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x22a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_GPIO_Init+0x344>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	; (8004030 <HAL_GPIO_Init+0x348>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x222>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_GPIO_Init+0x34c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x21e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x21a>
 8003efe:	2309      	movs	r3, #9
 8003f00:	e012      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f02:	230a      	movs	r3, #10
 8003f04:	e010      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f06:	2308      	movs	r3, #8
 8003f08:	e00e      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00c      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0e:	2306      	movs	r3, #6
 8003f10:	e00a      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f12:	2305      	movs	r3, #5
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f16:	2304      	movs	r3, #4
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_GPIO_Init+0x328>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6a:	4a34      	ldr	r2, [pc, #208]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f70:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f ae84 	bls.w	8003d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40021400 	.word	0x40021400
 800402c:	40021800 	.word	0x40021800
 8004030:	40021c00 	.word	0x40021c00
 8004034:	40022000 	.word	0x40022000
 8004038:	40022400 	.word	0x40022400
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e0d9      	b.n	8004210 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800405c:	2201      	movs	r2, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	f040 80c9 	bne.w	800420a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004078:	4a6b      	ldr	r2, [pc, #428]	; (8004228 <HAL_GPIO_DeInit+0x1e8>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a63      	ldr	r2, [pc, #396]	; (800422c <HAL_GPIO_DeInit+0x1ec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d037      	beq.n	8004112 <HAL_GPIO_DeInit+0xd2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a62      	ldr	r2, [pc, #392]	; (8004230 <HAL_GPIO_DeInit+0x1f0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_GPIO_DeInit+0xce>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a61      	ldr	r2, [pc, #388]	; (8004234 <HAL_GPIO_DeInit+0x1f4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d02b      	beq.n	800410a <HAL_GPIO_DeInit+0xca>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a60      	ldr	r2, [pc, #384]	; (8004238 <HAL_GPIO_DeInit+0x1f8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d025      	beq.n	8004106 <HAL_GPIO_DeInit+0xc6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a5f      	ldr	r2, [pc, #380]	; (800423c <HAL_GPIO_DeInit+0x1fc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <HAL_GPIO_DeInit+0xc2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a5e      	ldr	r2, [pc, #376]	; (8004240 <HAL_GPIO_DeInit+0x200>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_DeInit+0xbe>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a5d      	ldr	r2, [pc, #372]	; (8004244 <HAL_GPIO_DeInit+0x204>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_DeInit+0xba>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5c      	ldr	r2, [pc, #368]	; (8004248 <HAL_GPIO_DeInit+0x208>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_DeInit+0xb6>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_GPIO_DeInit+0x20c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_DeInit+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5a      	ldr	r2, [pc, #360]	; (8004250 <HAL_GPIO_DeInit+0x210>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_DeInit+0xae>
 80040ea:	2309      	movs	r3, #9
 80040ec:	e012      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 80040ee:	230a      	movs	r3, #10
 80040f0:	e010      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 80040f2:	2308      	movs	r3, #8
 80040f4:	e00e      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 80040f6:	2307      	movs	r3, #7
 80040f8:	e00c      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 80040fa:	2306      	movs	r3, #6
 80040fc:	e00a      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 80040fe:	2305      	movs	r3, #5
 8004100:	e008      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 8004102:	2304      	movs	r3, #4
 8004104:	e006      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 8004106:	2303      	movs	r3, #3
 8004108:	e004      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 800410a:	2302      	movs	r3, #2
 800410c:	e002      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_GPIO_DeInit+0xd4>
 8004112:	2300      	movs	r3, #0
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	f002 0203 	and.w	r2, r2, #3
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	4093      	lsls	r3, r2
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d132      	bne.n	800418a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004124:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	4949      	ldr	r1, [pc, #292]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 800412e:	4013      	ands	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004132:	4b48      	ldr	r3, [pc, #288]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	4946      	ldr	r1, [pc, #280]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 800413c:	4013      	ands	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004140:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	4942      	ldr	r1, [pc, #264]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 800414a:	4013      	ands	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	493f      	ldr	r1, [pc, #252]	; (8004254 <HAL_GPIO_DeInit+0x214>)
 8004158:	4013      	ands	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800416c:	4a2e      	ldr	r2, [pc, #184]	; (8004228 <HAL_GPIO_DeInit+0x1e8>)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	43da      	mvns	r2, r3
 800417c:	482a      	ldr	r0, [pc, #168]	; (8004228 <HAL_GPIO_DeInit+0x1e8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	400a      	ands	r2, r1
 8004184:	3302      	adds	r3, #2
 8004186:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2103      	movs	r1, #3
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	401a      	ands	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	08da      	lsrs	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3208      	adds	r2, #8
 80041a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	08d2      	lsrs	r2, r2, #3
 80041c0:	4019      	ands	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2103      	movs	r1, #3
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	401a      	ands	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	2101      	movs	r1, #1
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	401a      	ands	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2103      	movs	r1, #3
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	401a      	ands	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	3301      	adds	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	f67f af22 	bls.w	800405c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40013800 	.word	0x40013800
 800422c:	40020000 	.word	0x40020000
 8004230:	40020400 	.word	0x40020400
 8004234:	40020800 	.word	0x40020800
 8004238:	40020c00 	.word	0x40020c00
 800423c:	40021000 	.word	0x40021000
 8004240:	40021400 	.word	0x40021400
 8004244:	40021800 	.word	0x40021800
 8004248:	40021c00 	.word	0x40021c00
 800424c:	40022000 	.word	0x40022000
 8004250:	40022400 	.word	0x40022400
 8004254:	40013c00 	.word	0x40013c00

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004274:	e003      	b.n	800427e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800428a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428c:	b08f      	sub	sp, #60	; 0x3c
 800428e:	af0a      	add	r7, sp, #40	; 0x28
 8004290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e054      	b.n	8004346 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f00a fd10 	bl	800ecdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2203      	movs	r2, #3
 80042c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 f81c 	bl	8009318 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	687e      	ldr	r6, [r7, #4]
 80042e8:	466d      	mov	r5, sp
 80042ea:	f106 0410 	add.w	r4, r6, #16
 80042ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80042fe:	1d33      	adds	r3, r6, #4
 8004300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004302:	6838      	ldr	r0, [r7, #0]
 8004304:	f004 ff96 	bl	8009234 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f005 f813 	bl	800933a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	687e      	ldr	r6, [r7, #4]
 800431c:	466d      	mov	r5, sp
 800431e:	f106 0410 	add.w	r4, r6, #16
 8004322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800432a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800432e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004332:	1d33      	adds	r3, r6, #4
 8004334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004336:	6838      	ldr	r0, [r7, #0]
 8004338:	f005 f99c 	bl	8009674 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800434e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800434e:	b590      	push	{r4, r7, lr}
 8004350:	b089      	sub	sp, #36	; 0x24
 8004352:	af04      	add	r7, sp, #16
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	4608      	mov	r0, r1
 8004358:	4611      	mov	r1, r2
 800435a:	461a      	mov	r2, r3
 800435c:	4603      	mov	r3, r0
 800435e:	70fb      	strb	r3, [r7, #3]
 8004360:	460b      	mov	r3, r1
 8004362:	70bb      	strb	r3, [r7, #2]
 8004364:	4613      	mov	r3, r2
 8004366:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_HCD_HC_Init+0x28>
 8004372:	2302      	movs	r3, #2
 8004374:	e076      	b.n	8004464 <HAL_HCD_HC_Init+0x116>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	333d      	adds	r3, #61	; 0x3d
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3338      	adds	r3, #56	; 0x38
 800439e:	787a      	ldrb	r2, [r7, #1]
 80043a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	3340      	adds	r3, #64	; 0x40
 80043b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80043b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3339      	adds	r3, #57	; 0x39
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	333f      	adds	r3, #63	; 0x3f
 80043d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	78ba      	ldrb	r2, [r7, #2]
 80043de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e2:	b2d0      	uxtb	r0, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	333a      	adds	r3, #58	; 0x3a
 80043f0:	4602      	mov	r2, r0
 80043f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80043f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da09      	bge.n	8004410 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	333b      	adds	r3, #59	; 0x3b
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e008      	b.n	8004422 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	333b      	adds	r3, #59	; 0x3b
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	333c      	adds	r3, #60	; 0x3c
 8004430:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004434:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	787c      	ldrb	r4, [r7, #1]
 800443c:	78ba      	ldrb	r2, [r7, #2]
 800443e:	78f9      	ldrb	r1, [r7, #3]
 8004440:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4623      	mov	r3, r4
 8004452:	f005 fa95 	bl	8009980 <USB_HC_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bd90      	pop	{r4, r7, pc}

0800446c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_HCD_HC_Halt+0x1e>
 8004486:	2302      	movs	r3, #2
 8004488:	e00f      	b.n	80044aa <HAL_HCD_HC_Halt+0x3e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f005 fce5 	bl	8009e6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	4608      	mov	r0, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	461a      	mov	r2, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	70fb      	strb	r3, [r7, #3]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70bb      	strb	r3, [r7, #2]
 80044ca:	4613      	mov	r3, r2
 80044cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	333b      	adds	r3, #59	; 0x3b
 80044dc:	78ba      	ldrb	r2, [r7, #2]
 80044de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	333f      	adds	r3, #63	; 0x3f
 80044ee:	787a      	ldrb	r2, [r7, #1]
 80044f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80044f2:	7c3b      	ldrb	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d112      	bne.n	800451e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3342      	adds	r3, #66	; 0x42
 8004506:	2203      	movs	r2, #3
 8004508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	333d      	adds	r3, #61	; 0x3d
 8004518:	7f3a      	ldrb	r2, [r7, #28]
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e008      	b.n	8004530 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3342      	adds	r3, #66	; 0x42
 800452c:	2202      	movs	r2, #2
 800452e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004530:	787b      	ldrb	r3, [r7, #1]
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 80c6 	bhi.w	80046c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	080046b1 	.word	0x080046b1
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004633 	.word	0x08004633
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004550:	7c3b      	ldrb	r3, [r7, #16]
 8004552:	2b01      	cmp	r3, #1
 8004554:	f040 80b8 	bne.w	80046c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004558:	78bb      	ldrb	r3, [r7, #2]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 80b4 	bne.w	80046c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004560:	8b3b      	ldrh	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d108      	bne.n	8004578 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3355      	adds	r3, #85	; 0x55
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3355      	adds	r3, #85	; 0x55
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3342      	adds	r3, #66	; 0x42
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800459e:	e093      	b.n	80046c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3342      	adds	r3, #66	; 0x42
 80045ae:	2202      	movs	r2, #2
 80045b0:	701a      	strb	r2, [r3, #0]
      break;
 80045b2:	e089      	b.n	80046c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80045b4:	78bb      	ldrb	r3, [r7, #2]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11d      	bne.n	80045f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3355      	adds	r3, #85	; 0x55
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3342      	adds	r3, #66	; 0x42
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80045e0:	e073      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3342      	adds	r3, #66	; 0x42
 80045f0:	2202      	movs	r2, #2
 80045f2:	701a      	strb	r2, [r3, #0]
      break;
 80045f4:	e069      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3354      	adds	r3, #84	; 0x54
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3342      	adds	r3, #66	; 0x42
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
      break;
 800461c:	e055      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3342      	adds	r3, #66	; 0x42
 800462c:	2202      	movs	r2, #2
 800462e:	701a      	strb	r2, [r3, #0]
      break;
 8004630:	e04b      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004632:	78bb      	ldrb	r3, [r7, #2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11d      	bne.n	8004674 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3355      	adds	r3, #85	; 0x55
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3342      	adds	r3, #66	; 0x42
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800465e:	e034      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	212c      	movs	r1, #44	; 0x2c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	3342      	adds	r3, #66	; 0x42
 800466e:	2202      	movs	r2, #2
 8004670:	701a      	strb	r2, [r3, #0]
      break;
 8004672:	e02a      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3354      	adds	r3, #84	; 0x54
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3342      	adds	r3, #66	; 0x42
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
      break;
 800469a:	e016      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3342      	adds	r3, #66	; 0x42
 80046aa:	2202      	movs	r2, #2
 80046ac:	701a      	strb	r2, [r3, #0]
      break;
 80046ae:	e00c      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	212c      	movs	r1, #44	; 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3342      	adds	r3, #66	; 0x42
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80046c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3344      	adds	r3, #68	; 0x44
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	8b3a      	ldrh	r2, [r7, #24]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	202c      	movs	r0, #44	; 0x2c
 80046e4:	fb00 f303 	mul.w	r3, r0, r3
 80046e8:	440b      	add	r3, r1
 80046ea:	334c      	adds	r3, #76	; 0x4c
 80046ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3360      	adds	r3, #96	; 0x60
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3350      	adds	r3, #80	; 0x50
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3339      	adds	r3, #57	; 0x39
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3361      	adds	r3, #97	; 0x61
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	222c      	movs	r2, #44	; 0x2c
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	3338      	adds	r3, #56	; 0x38
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	18d1      	adds	r1, r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	f005 fa38 	bl	8009bc4 <USB_HC_StartXfer>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f004 ff39 	bl	80095ee <USB_GetMode>
 800477c:	4603      	mov	r3, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 80f6 	bne.w	8004970 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f004 ff1d 	bl	80095c8 <USB_ReadInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80ec 	beq.w	800496e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f004 ff14 	bl	80095c8 <USB_ReadInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047aa:	d104      	bne.n	80047b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 ff04 	bl	80095c8 <USB_ReadInterrupts>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ca:	d104      	bne.n	80047d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f004 fef4 	bl	80095c8 <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ea:	d104      	bne.n	80047f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f004 fee4 	bl	80095c8 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d103      	bne.n	8004812 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2202      	movs	r2, #2
 8004810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f004 fed6 	bl	80095c8 <USB_ReadInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004826:	d11c      	bne.n	8004862 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004830:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004842:	2110      	movs	r1, #16
 8004844:	6938      	ldr	r0, [r7, #16]
 8004846:	f004 fdc5 	bl	80093d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800484a:	6938      	ldr	r0, [r7, #16]
 800484c:	f004 fdf6 	bl	800943c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f004 ffcc 	bl	80097f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f00a fab7 	bl	800edd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f004 feae 	bl	80095c8 <USB_ReadInterrupts>
 800486c:	4603      	mov	r3, r0
 800486e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004876:	d102      	bne.n	800487e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 f89e 	bl	80059ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f004 fea0 	bl	80095c8 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d106      	bne.n	80048a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f00a fa80 	bl	800ed98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2208      	movs	r2, #8
 800489e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fe8f 	bl	80095c8 <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d101      	bne.n	80048b8 <HAL_HCD_IRQHandler+0x158>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_HCD_IRQHandler+0x15a>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d012      	beq.n	80048e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0210 	bic.w	r2, r2, #16
 80048cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ffa1 	bl	8005816 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0210 	orr.w	r2, r2, #16
 80048e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 fe6d 	bl	80095c8 <USB_ReadInterrupts>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f8:	d13a      	bne.n	8004970 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 faa2 	bl	8009e48 <USB_HC_ReadInterrupt>
 8004904:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e025      	b.n	8004958 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004936:	d106      	bne.n	8004946 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8ab 	bl	8004a9a <HCD_HC_IN_IRQHandler>
 8004944:	e005      	b.n	8004952 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fbf9 	bl	8005144 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	429a      	cmp	r2, r3
 8004960:	d3d4      	bcc.n	800490c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800496a:	615a      	str	r2, [r3, #20]
 800496c:	e000      	b.n	8004970 <HAL_HCD_IRQHandler+0x210>
      return;
 800496e:	bf00      	nop
    }
  }
}
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_HCD_Start+0x16>
 8004988:	2302      	movs	r3, #2
 800498a:	e013      	b.n	80049b4 <HAL_HCD_Start+0x3e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f004 ff8e 	bl	80098bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f004 fca6 	bl	80092f6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_HCD_Stop+0x16>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e00d      	b.n	80049ee <HAL_HCD_Stop+0x32>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f005 fb7c 	bl	800a0dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f004 ff30 	bl	8009868 <USB_ResetPort>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3360      	adds	r3, #96	; 0x60
 8004a2c:	781b      	ldrb	r3, [r3, #0]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3350      	adds	r3, #80	; 0x50
 8004a54:	681b      	ldr	r3, [r3, #0]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 ff74 	bl	800995c <USB_GetCurrentFrame>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f004 ff4f 	bl	800992e <USB_GetHostSpeed>
 8004a90:	4603      	mov	r3, r0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d11a      	bne.n	8004b00 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2304      	movs	r3, #4
 8004ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3361      	adds	r3, #97	; 0x61
 8004aea:	2206      	movs	r2, #6
 8004aec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f005 f9b6 	bl	8009e6a <USB_HC_Halt>
 8004afe:	e0af      	b.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d11b      	bne.n	8004b50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	461a      	mov	r2, r3
 8004b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	212c      	movs	r1, #44	; 0x2c
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	3361      	adds	r3, #97	; 0x61
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f005 f98e 	bl	8009e6a <USB_HC_Halt>
 8004b4e:	e087      	b.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d109      	bne.n	8004b7a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b72:	461a      	mov	r2, r3
 8004b74:	2320      	movs	r3, #32
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	e072      	b.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d11a      	bne.n	8004bc6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3361      	adds	r3, #97	; 0x61
 8004bb0:	2205      	movs	r2, #5
 8004bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 f953 	bl	8009e6a <USB_HC_Halt>
 8004bc4:	e04c      	b.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bdc:	d11b      	bne.n	8004c16 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	461a      	mov	r2, r3
 8004bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3361      	adds	r3, #97	; 0x61
 8004c00:	2208      	movs	r2, #8
 8004c02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f005 f92b 	bl	8009e6a <USB_HC_Halt>
 8004c14:	e024      	b.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	d119      	bne.n	8004c60 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3361      	adds	r3, #97	; 0x61
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 f905 	bl	8009e6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d112      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f005 f8f1 	bl	8009e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	461a      	mov	r2, r3
 8004c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c9c:	e24e      	b.n	800513c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f040 80df 	bne.w	8004e74 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d019      	beq.n	8004cf2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	3348      	adds	r3, #72	; 0x48
 8004ccc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	0159      	lsls	r1, r3, #5
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	440b      	add	r3, r1
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	202c      	movs	r0, #44	; 0x2c
 8004ce8:	fb00 f303 	mul.w	r3, r0, r3
 8004cec:	440b      	add	r3, r1
 8004cee:	3350      	adds	r3, #80	; 0x50
 8004cf0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3361      	adds	r3, #97	; 0x61
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	335c      	adds	r3, #92	; 0x5c
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	461a      	mov	r2, r3
 8004d24:	2301      	movs	r3, #1
 8004d26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	212c      	movs	r1, #44	; 0x2c
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	333f      	adds	r3, #63	; 0x3f
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	333f      	adds	r3, #63	; 0x3f
 8004d4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d111      	bne.n	8004d74 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f005 f885 	bl	8009e6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2310      	movs	r3, #16
 8004d70:	6093      	str	r3, [r2, #8]
 8004d72:	e03a      	b.n	8004dea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	212c      	movs	r1, #44	; 0x2c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	333f      	adds	r3, #63	; 0x3f
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d009      	beq.n	8004d9c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	333f      	adds	r3, #63	; 0x3f
 8004d96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d126      	bne.n	8004dea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3360      	adds	r3, #96	; 0x60
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	b2d9      	uxtb	r1, r3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	202c      	movs	r0, #44	; 0x2c
 8004dd8:	fb00 f303 	mul.w	r3, r0, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	3360      	adds	r3, #96	; 0x60
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f00a f801 	bl	800edec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d12b      	bne.n	8004e4a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3348      	adds	r3, #72	; 0x48
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	202c      	movs	r0, #44	; 0x2c
 8004e08:	fb00 f202 	mul.w	r2, r0, r2
 8004e0c:	440a      	add	r2, r1
 8004e0e:	3240      	adds	r2, #64	; 0x40
 8004e10:	8812      	ldrh	r2, [r2, #0]
 8004e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 818e 	beq.w	800513c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3354      	adds	r3, #84	; 0x54
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f083 0301 	eor.w	r3, r3, #1
 8004e34:	b2d8      	uxtb	r0, r3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	3354      	adds	r3, #84	; 0x54
 8004e44:	4602      	mov	r2, r0
 8004e46:	701a      	strb	r2, [r3, #0]
}
 8004e48:	e178      	b.n	800513c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3354      	adds	r3, #84	; 0x54
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f083 0301 	eor.w	r3, r3, #1
 8004e5e:	b2d8      	uxtb	r0, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3354      	adds	r3, #84	; 0x54
 8004e6e:	4602      	mov	r2, r0
 8004e70:	701a      	strb	r2, [r3, #0]
}
 8004e72:	e163      	b.n	800513c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	f040 80f6 	bne.w	8005078 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	212c      	movs	r1, #44	; 0x2c
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	3361      	adds	r3, #97	; 0x61
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d109      	bne.n	8004eb4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3360      	adds	r3, #96	; 0x60
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e0c9      	b.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3361      	adds	r3, #97	; 0x61
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	d109      	bne.n	8004edc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3360      	adds	r3, #96	; 0x60
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e0b5      	b.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	212c      	movs	r1, #44	; 0x2c
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3361      	adds	r3, #97	; 0x61
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b06      	cmp	r3, #6
 8004eee:	d009      	beq.n	8004f04 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3361      	adds	r3, #97	; 0x61
 8004efe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d150      	bne.n	8004fa6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	335c      	adds	r3, #92	; 0x5c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	202c      	movs	r0, #44	; 0x2c
 8004f1c:	fb00 f303 	mul.w	r3, r0, r3
 8004f20:	440b      	add	r3, r1
 8004f22:	335c      	adds	r3, #92	; 0x5c
 8004f24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	212c      	movs	r1, #44	; 0x2c
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	335c      	adds	r3, #92	; 0x5c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d912      	bls.n	8004f60 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	212c      	movs	r1, #44	; 0x2c
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	335c      	adds	r3, #92	; 0x5c
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3360      	adds	r3, #96	; 0x60
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f5e:	e073      	b.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3360      	adds	r3, #96	; 0x60
 8004f6e:	2202      	movs	r2, #2
 8004f70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fa4:	e050      	b.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3361      	adds	r3, #97	; 0x61
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d122      	bne.n	8005000 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	212c      	movs	r1, #44	; 0x2c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3360      	adds	r3, #96	; 0x60
 8004fc8:	2202      	movs	r2, #2
 8004fca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fe2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e023      	b.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3361      	adds	r3, #97	; 0x61
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b07      	cmp	r3, #7
 8005012:	d119      	bne.n	8005048 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	335c      	adds	r3, #92	; 0x5c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	202c      	movs	r0, #44	; 0x2c
 800502c:	fb00 f303 	mul.w	r3, r0, r3
 8005030:	440b      	add	r3, r1
 8005032:	335c      	adds	r3, #92	; 0x5c
 8005034:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3360      	adds	r3, #96	; 0x60
 8005044:	2204      	movs	r2, #4
 8005046:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	461a      	mov	r2, r3
 8005056:	2302      	movs	r3, #2
 8005058:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	b2d9      	uxtb	r1, r3
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	202c      	movs	r0, #44	; 0x2c
 8005064:	fb00 f303 	mul.w	r3, r0, r3
 8005068:	4413      	add	r3, r2
 800506a:	3360      	adds	r3, #96	; 0x60
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f009 febb 	bl	800edec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005076:	e061      	b.n	800513c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b10      	cmp	r3, #16
 800508c:	d156      	bne.n	800513c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	212c      	movs	r1, #44	; 0x2c
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	4413      	add	r3, r2
 800509a:	333f      	adds	r3, #63	; 0x3f
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d111      	bne.n	80050c6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	212c      	movs	r1, #44	; 0x2c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	335c      	adds	r3, #92	; 0x5c
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f004 fed3 	bl	8009e6a <USB_HC_Halt>
 80050c4:	e031      	b.n	800512a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	333f      	adds	r3, #63	; 0x3f
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	212c      	movs	r1, #44	; 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	333f      	adds	r3, #63	; 0x3f
 80050e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d11d      	bne.n	800512a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	212c      	movs	r1, #44	; 0x2c
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	4413      	add	r3, r2
 80050fa:	335c      	adds	r3, #92	; 0x5c
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d110      	bne.n	800512a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	212c      	movs	r1, #44	; 0x2c
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	4413      	add	r3, r2
 8005114:	3361      	adds	r3, #97	; 0x61
 8005116:	2203      	movs	r2, #3
 8005118:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f004 fea0 	bl	8009e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	461a      	mov	r2, r3
 8005138:	2310      	movs	r3, #16
 800513a:	6093      	str	r3, [r2, #8]
}
 800513c:	bf00      	nop
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11a      	bne.n	80051aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	2304      	movs	r3, #4
 8005184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	212c      	movs	r1, #44	; 0x2c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	3361      	adds	r3, #97	; 0x61
 8005194:	2206      	movs	r2, #6
 8005196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f004 fe61 	bl	8009e6a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80051a8:	e331      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d12e      	bne.n	800521e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	2320      	movs	r3, #32
 80051d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	212c      	movs	r1, #44	; 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	333d      	adds	r3, #61	; 0x3d
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	f040 8313 	bne.w	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	333d      	adds	r3, #61	; 0x3d
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	212c      	movs	r1, #44	; 0x2c
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	3360      	adds	r3, #96	; 0x60
 8005208:	2202      	movs	r2, #2
 800520a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f004 fe27 	bl	8009e6a <USB_HC_Halt>
}
 800521c:	e2f7      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d112      	bne.n	800525c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	461a      	mov	r2, r3
 8005244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005248:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f004 fe08 	bl	8009e6a <USB_HC_Halt>
}
 800525a:	e2d8      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d140      	bne.n	80052f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	212c      	movs	r1, #44	; 0x2c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	335c      	adds	r3, #92	; 0x5c
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d111      	bne.n	80052be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	333d      	adds	r3, #61	; 0x3d
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b8:	461a      	mov	r2, r3
 80052ba:	2340      	movs	r3, #64	; 0x40
 80052bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	2301      	movs	r3, #1
 80052ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	212c      	movs	r1, #44	; 0x2c
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	4413      	add	r3, r2
 80052dc:	3361      	adds	r3, #97	; 0x61
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 fdbc 	bl	8009e6a <USB_HC_Halt>
}
 80052f2:	e28c      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d12c      	bne.n	8005364 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	212c      	movs	r1, #44	; 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3361      	adds	r3, #97	; 0x61
 8005318:	2204      	movs	r2, #4
 800531a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	212c      	movs	r1, #44	; 0x2c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	333d      	adds	r3, #61	; 0x3d
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	335c      	adds	r3, #92	; 0x5c
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f004 fd8d 	bl	8009e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	461a      	mov	r2, r3
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	6093      	str	r3, [r2, #8]
}
 8005362:	e254      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b08      	cmp	r3, #8
 8005378:	d11a      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	461a      	mov	r2, r3
 8005388:	2308      	movs	r3, #8
 800538a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3361      	adds	r3, #97	; 0x61
 800539a:	2205      	movs	r2, #5
 800539c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f004 fd5e 	bl	8009e6a <USB_HC_Halt>
}
 80053ae:	e22e      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d140      	bne.n	8005448 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	335c      	adds	r3, #92	; 0x5c
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3361      	adds	r3, #97	; 0x61
 80053e6:	2203      	movs	r2, #3
 80053e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	212c      	movs	r1, #44	; 0x2c
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	333d      	adds	r3, #61	; 0x3d
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d112      	bne.n	8005424 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	212c      	movs	r1, #44	; 0x2c
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	333c      	adds	r3, #60	; 0x3c
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	212c      	movs	r1, #44	; 0x2c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	333d      	adds	r3, #61	; 0x3d
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f004 fd1b 	bl	8009e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	2310      	movs	r3, #16
 8005444:	6093      	str	r3, [r2, #8]
}
 8005446:	e1e2      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d164      	bne.n	8005528 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d111      	bne.n	800548a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	212c      	movs	r1, #44	; 0x2c
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	4413      	add	r3, r2
 8005472:	3361      	adds	r3, #97	; 0x61
 8005474:	2206      	movs	r2, #6
 8005476:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f004 fcf1 	bl	8009e6a <USB_HC_Halt>
 8005488:	e044      	b.n	8005514 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	335c      	adds	r3, #92	; 0x5c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	202c      	movs	r0, #44	; 0x2c
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	440b      	add	r3, r1
 80054a8:	335c      	adds	r3, #92	; 0x5c
 80054aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	335c      	adds	r3, #92	; 0x5c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d920      	bls.n	8005502 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	212c      	movs	r1, #44	; 0x2c
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	335c      	adds	r3, #92	; 0x5c
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3360      	adds	r3, #96	; 0x60
 80054e0:	2204      	movs	r2, #4
 80054e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	b2d9      	uxtb	r1, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	202c      	movs	r0, #44	; 0x2c
 80054ee:	fb00 f303 	mul.w	r3, r0, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	3360      	adds	r3, #96	; 0x60
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f009 fc76 	bl	800edec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005500:	e008      	b.n	8005514 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	212c      	movs	r1, #44	; 0x2c
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	4413      	add	r3, r2
 800550e:	3360      	adds	r3, #96	; 0x60
 8005510:	2202      	movs	r2, #2
 8005512:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	6093      	str	r3, [r2, #8]
}
 8005526:	e172      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553e:	d11b      	bne.n	8005578 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	212c      	movs	r1, #44	; 0x2c
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	3361      	adds	r3, #97	; 0x61
 800554e:	2208      	movs	r2, #8
 8005550:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f004 fc84 	bl	8009e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	461a      	mov	r2, r3
 8005570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005574:	6093      	str	r3, [r2, #8]
}
 8005576:	e14a      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	f040 813f 	bne.w	800580e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	212c      	movs	r1, #44	; 0x2c
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	4413      	add	r3, r2
 800559c:	3361      	adds	r3, #97	; 0x61
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d17d      	bne.n	80056a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3360      	adds	r3, #96	; 0x60
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	333f      	adds	r3, #63	; 0x3f
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d00a      	beq.n	80055e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	212c      	movs	r1, #44	; 0x2c
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	333f      	adds	r3, #63	; 0x3f
 80055d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055da:	2b03      	cmp	r3, #3
 80055dc:	f040 8100 	bne.w	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	212c      	movs	r1, #44	; 0x2c
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	3355      	adds	r3, #85	; 0x55
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2d8      	uxtb	r0, r3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3355      	adds	r3, #85	; 0x55
 800560c:	4602      	mov	r2, r0
 800560e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 80e3 	bne.w	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	212c      	movs	r1, #44	; 0x2c
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	334c      	adds	r3, #76	; 0x4c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80d8 	beq.w	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	334c      	adds	r3, #76	; 0x4c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	202c      	movs	r0, #44	; 0x2c
 8005646:	fb00 f202 	mul.w	r2, r0, r2
 800564a:	440a      	add	r2, r1
 800564c:	3240      	adds	r2, #64	; 0x40
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	4413      	add	r3, r2
 8005652:	3b01      	subs	r3, #1
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	202c      	movs	r0, #44	; 0x2c
 800565a:	fb00 f202 	mul.w	r2, r0, r2
 800565e:	440a      	add	r2, r1
 8005660:	3240      	adds	r2, #64	; 0x40
 8005662:	8812      	ldrh	r2, [r2, #0]
 8005664:	fbb3 f3f2 	udiv	r3, r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80b5 	beq.w	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3355      	adds	r3, #85	; 0x55
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2d8      	uxtb	r0, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3355      	adds	r3, #85	; 0x55
 800569a:	4602      	mov	r2, r0
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e09f      	b.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	3361      	adds	r3, #97	; 0x61
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d109      	bne.n	80056c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	3360      	adds	r3, #96	; 0x60
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e08b      	b.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	212c      	movs	r1, #44	; 0x2c
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	3361      	adds	r3, #97	; 0x61
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d109      	bne.n	80056f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	3360      	adds	r3, #96	; 0x60
 80056ea:	2202      	movs	r2, #2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e077      	b.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3361      	adds	r3, #97	; 0x61
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b05      	cmp	r3, #5
 8005702:	d109      	bne.n	8005718 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	212c      	movs	r1, #44	; 0x2c
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	3360      	adds	r3, #96	; 0x60
 8005712:	2205      	movs	r2, #5
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	e063      	b.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	3361      	adds	r3, #97	; 0x61
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d009      	beq.n	8005740 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	3361      	adds	r3, #97	; 0x61
 800573a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800573c:	2b08      	cmp	r3, #8
 800573e:	d14f      	bne.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	335c      	adds	r3, #92	; 0x5c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	202c      	movs	r0, #44	; 0x2c
 8005758:	fb00 f303 	mul.w	r3, r0, r3
 800575c:	440b      	add	r3, r1
 800575e:	335c      	adds	r3, #92	; 0x5c
 8005760:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	335c      	adds	r3, #92	; 0x5c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d912      	bls.n	800579c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	212c      	movs	r1, #44	; 0x2c
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	4413      	add	r3, r2
 8005782:	335c      	adds	r3, #92	; 0x5c
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	212c      	movs	r1, #44	; 0x2c
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	4413      	add	r3, r2
 8005794:	3360      	adds	r3, #96	; 0x60
 8005796:	2204      	movs	r2, #4
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e021      	b.n	80057e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	3360      	adds	r3, #96	; 0x60
 80057aa:	2202      	movs	r2, #2
 80057ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057da:	461a      	mov	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	2302      	movs	r3, #2
 80057f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	b2d9      	uxtb	r1, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	202c      	movs	r0, #44	; 0x2c
 80057fc:	fb00 f303 	mul.w	r3, r0, r3
 8005800:	4413      	add	r3, r2
 8005802:	3360      	adds	r3, #96	; 0x60
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f009 faef 	bl	800edec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800580e:	bf00      	nop
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08a      	sub	sp, #40	; 0x28
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	0c5b      	lsrs	r3, r3, #17
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d004      	beq.n	800585c <HCD_RXQLVL_IRQHandler+0x46>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b05      	cmp	r3, #5
 8005856:	f000 80a9 	beq.w	80059ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800585a:	e0aa      	b.n	80059b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80a6 	beq.w	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3344      	adds	r3, #68	; 0x44
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 809b 	beq.w	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	3350      	adds	r3, #80	; 0x50
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	441a      	add	r2, r3
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	202c      	movs	r0, #44	; 0x2c
 8005894:	fb00 f303 	mul.w	r3, r0, r3
 8005898:	440b      	add	r3, r1
 800589a:	334c      	adds	r3, #76	; 0x4c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d87a      	bhi.n	8005998 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	212c      	movs	r1, #44	; 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	3344      	adds	r3, #68	; 0x44
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	b292      	uxth	r2, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	f003 fe2c 	bl	8009518 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	212c      	movs	r1, #44	; 0x2c
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	3344      	adds	r3, #68	; 0x44
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	441a      	add	r2, r3
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	202c      	movs	r0, #44	; 0x2c
 80058da:	fb00 f303 	mul.w	r3, r0, r3
 80058de:	440b      	add	r3, r1
 80058e0:	3344      	adds	r3, #68	; 0x44
 80058e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	212c      	movs	r1, #44	; 0x2c
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	4413      	add	r3, r2
 80058f0:	3350      	adds	r3, #80	; 0x50
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	441a      	add	r2, r3
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	202c      	movs	r0, #44	; 0x2c
 80058fe:	fb00 f303 	mul.w	r3, r0, r3
 8005902:	440b      	add	r3, r1
 8005904:	3350      	adds	r3, #80	; 0x50
 8005906:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	0cdb      	lsrs	r3, r3, #19
 8005918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800591c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	212c      	movs	r1, #44	; 0x2c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	3340      	adds	r3, #64	; 0x40
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4293      	cmp	r3, r2
 8005934:	d13c      	bne.n	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d039      	beq.n	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005952:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800595a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	461a      	mov	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	212c      	movs	r1, #44	; 0x2c
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	4413      	add	r3, r2
 800597a:	3354      	adds	r3, #84	; 0x54
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2d8      	uxtb	r0, r3
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	212c      	movs	r1, #44	; 0x2c
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	3354      	adds	r3, #84	; 0x54
 8005992:	4602      	mov	r2, r0
 8005994:	701a      	strb	r2, [r3, #0]
      break;
 8005996:	e00b      	b.n	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	212c      	movs	r1, #44	; 0x2c
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	3360      	adds	r3, #96	; 0x60
 80059a6:	2204      	movs	r2, #4
 80059a8:	701a      	strb	r2, [r3, #0]
      break;
 80059aa:	e001      	b.n	80059b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059b0:	bf00      	nop
  }
}
 80059b2:	bf00      	nop
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d10b      	bne.n	8005a0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d102      	bne.n	8005a02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f009 f9d9 	bl	800edb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f043 0302 	orr.w	r3, r3, #2
 8005a08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d132      	bne.n	8005a7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f043 0308 	orr.w	r3, r3, #8
 8005a1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d126      	bne.n	8005a74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d113      	bne.n	8005a56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a38:	d106      	bne.n	8005a48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2102      	movs	r1, #2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f003 fed7 	bl	80097f4 <USB_InitFSLSPClkSel>
 8005a46:	e011      	b.n	8005a6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f003 fed0 	bl	80097f4 <USB_InitFSLSPClkSel>
 8005a54:	e00a      	b.n	8005a6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d106      	bne.n	8005a6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a64:	461a      	mov	r2, r3
 8005a66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f009 f9cf 	bl	800ee10 <HAL_HCD_PortEnabled_Callback>
 8005a72:	e002      	b.n	8005a7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f009 f9d9 	bl	800ee2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d103      	bne.n	8005a8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6013      	str	r3, [r2, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e12b      	b.n	8005d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb ff82 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b04:	f001 f9c4 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 8005b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4a81      	ldr	r2, [pc, #516]	; (8005d14 <HAL_I2C_Init+0x274>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d807      	bhi.n	8005b24 <HAL_I2C_Init+0x84>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a80      	ldr	r2, [pc, #512]	; (8005d18 <HAL_I2C_Init+0x278>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bf94      	ite	ls
 8005b1c:	2301      	movls	r3, #1
 8005b1e:	2300      	movhi	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e006      	b.n	8005b32 <HAL_I2C_Init+0x92>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a7d      	ldr	r2, [pc, #500]	; (8005d1c <HAL_I2C_Init+0x27c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bf94      	ite	ls
 8005b2c:	2301      	movls	r3, #1
 8005b2e:	2300      	movhi	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0e7      	b.n	8005d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a78      	ldr	r2, [pc, #480]	; (8005d20 <HAL_I2C_Init+0x280>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	0c9b      	lsrs	r3, r3, #18
 8005b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a6a      	ldr	r2, [pc, #424]	; (8005d14 <HAL_I2C_Init+0x274>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d802      	bhi.n	8005b74 <HAL_I2C_Init+0xd4>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3301      	adds	r3, #1
 8005b72:	e009      	b.n	8005b88 <HAL_I2C_Init+0xe8>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	4a69      	ldr	r2, [pc, #420]	; (8005d24 <HAL_I2C_Init+0x284>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	3301      	adds	r3, #1
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	495c      	ldr	r1, [pc, #368]	; (8005d14 <HAL_I2C_Init+0x274>)
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	d819      	bhi.n	8005bdc <HAL_I2C_Init+0x13c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1e59      	subs	r1, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_I2C_Init+0x138>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1e59      	subs	r1, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd6:	e051      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e04f      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d111      	bne.n	8005c08 <HAL_I2C_Init+0x168>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1e58      	subs	r0, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	440b      	add	r3, r1
 8005bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e012      	b.n	8005c2e <HAL_I2C_Init+0x18e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e58      	subs	r0, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	0099      	lsls	r1, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_I2C_Init+0x196>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e022      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10e      	bne.n	8005c5c <HAL_I2C_Init+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1e58      	subs	r0, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6859      	ldr	r1, [r3, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	440b      	add	r3, r1
 8005c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c50:	3301      	adds	r3, #1
 8005c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	e00f      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1e58      	subs	r0, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	0099      	lsls	r1, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	6809      	ldr	r1, [r1, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6911      	ldr	r1, [r2, #16]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	4311      	orrs	r1, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	000186a0 	.word	0x000186a0
 8005d18:	001e847f 	.word	0x001e847f
 8005d1c:	003d08ff 	.word	0x003d08ff
 8005d20:	431bde83 	.word	0x431bde83
 8005d24:	10624dd3 	.word	0x10624dd3

08005d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d129      	bne.n	8005d92 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2224      	movs	r2, #36	; 0x24
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0210 	bic.w	r2, r2, #16
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d12a      	bne.n	8005e10 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2224      	movs	r2, #36	; 0x24
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0201 	bic.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	f023 030f 	bic.w	r3, r3, #15
 8005de0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	89fb      	ldrh	r3, [r7, #14]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	89fa      	ldrh	r2, [r7, #14]
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e000      	b.n	8005e12 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
  }
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e0bf      	b.n	8005fb2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb fe2c 	bl	8001aa4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6999      	ldr	r1, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6899      	ldr	r1, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <HAL_LTDC_Init+0x19c>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6899      	ldr	r1, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68d9      	ldr	r1, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b3e      	ldr	r3, [pc, #248]	; (8005fbc <HAL_LTDC_Init+0x19c>)
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68d9      	ldr	r1, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6919      	ldr	r1, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <HAL_LTDC_Init+0x19c>)
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6919      	ldr	r1, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6959      	ldr	r1, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <HAL_LTDC_Init+0x19c>)
 8005f1e:	400b      	ands	r3, r1
 8005f20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6959      	ldr	r1, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0206 	orr.w	r2, r2, #6
 8005f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	f000f800 	.word	0xf000f800

08005fc0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d023      	beq.n	800602a <HAL_LTDC_IRQHandler+0x6a>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2204      	movs	r2, #4
 8006002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2204      	movs	r2, #4
 8006018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f86f 	bl	8006108 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d023      	beq.n	800607c <HAL_LTDC_IRQHandler+0xbc>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01e      	beq.n	800607c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0202 	bic.w	r2, r2, #2
 800604c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2202      	movs	r2, #2
 8006054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800605c:	f043 0202 	orr.w	r2, r3, #2
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f846 	bl	8006108 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01b      	beq.n	80060be <HAL_LTDC_IRQHandler+0xfe>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d016      	beq.n	80060be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2201      	movs	r2, #1
 80060a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f82f 	bl	800611c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <HAL_LTDC_IRQHandler+0x140>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0208 	bic.w	r2, r2, #8
 80060e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2208      	movs	r2, #8
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f818 	bl	8006130 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006144:	b5b0      	push	{r4, r5, r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_LTDC_ConfigLayer+0x1a>
 800615a:	2302      	movs	r3, #2
 800615c:	e02c      	b.n	80061b8 <HAL_LTDC_ConfigLayer+0x74>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2134      	movs	r1, #52	; 0x34
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4614      	mov	r4, r2
 8006182:	461d      	mov	r5, r3
 8006184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f871 	bl	8006280 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bdb0      	pop	{r4, r5, r7, pc}

080061c0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_LTDC_EnableDither+0x16>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e016      	b.n	8006204 <HAL_LTDC_EnableDither+0x44>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <HAL_LTDC_EnableDither+0x50>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <HAL_LTDC_EnableDither+0x50>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40016800 	.word	0x40016800

08006214 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_LTDC_SetAddress+0x1a>
 800622a:	2302      	movs	r3, #2
 800622c:	e024      	b.n	8006278 <HAL_LTDC_SetAddress+0x64>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2234      	movs	r2, #52	; 0x34
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	3338      	adds	r3, #56	; 0x38
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f811 	bl	8006280 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2201      	movs	r2, #1
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	4413      	add	r3, r2
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	01db      	lsls	r3, r3, #7
 80062ac:	4413      	add	r3, r2
 80062ae:	3384      	adds	r3, #132	; 0x84
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	4611      	mov	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	01d2      	lsls	r2, r2, #7
 80062bc:	440a      	add	r2, r1
 80062be:	3284      	adds	r2, #132	; 0x84
 80062c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	440b      	add	r3, r1
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062fe:	4413      	add	r3, r2
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	01db      	lsls	r3, r3, #7
 800630e:	4413      	add	r3, r2
 8006310:	3384      	adds	r3, #132	; 0x84
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	4611      	mov	r1, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	01d2      	lsls	r2, r2, #7
 800631e:	440a      	add	r2, r1
 8006320:	3284      	adds	r2, #132	; 0x84
 8006322:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006326:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006336:	4413      	add	r3, r2
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	01db      	lsls	r3, r3, #7
 8006344:	440b      	add	r3, r1
 8006346:	3384      	adds	r3, #132	; 0x84
 8006348:	4619      	mov	r1, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4313      	orrs	r3, r2
 800634e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	01db      	lsls	r3, r3, #7
 800635a:	4413      	add	r3, r2
 800635c:	3384      	adds	r3, #132	; 0x84
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4611      	mov	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	01d2      	lsls	r2, r2, #7
 800636a:	440a      	add	r2, r1
 800636c:	3284      	adds	r2, #132	; 0x84
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	01db      	lsls	r3, r3, #7
 800637e:	4413      	add	r3, r2
 8006380:	3384      	adds	r3, #132	; 0x84
 8006382:	461a      	mov	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	061b      	lsls	r3, r3, #24
 80063a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	4413      	add	r3, r2
 80063b2:	3384      	adds	r3, #132	; 0x84
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	4413      	add	r3, r2
 80063c2:	3384      	adds	r3, #132	; 0x84
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d0:	461a      	mov	r2, r3
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	440b      	add	r3, r1
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	4619      	mov	r1, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	01db      	lsls	r3, r3, #7
 80063fa:	4413      	add	r3, r2
 80063fc:	3384      	adds	r3, #132	; 0x84
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	4611      	mov	r1, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	01d2      	lsls	r2, r2, #7
 800640a:	440a      	add	r2, r1
 800640c:	3284      	adds	r2, #132	; 0x84
 800640e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006412:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	01db      	lsls	r3, r3, #7
 800641e:	4413      	add	r3, r2
 8006420:	3384      	adds	r3, #132	; 0x84
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	4413      	add	r3, r2
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	4611      	mov	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	01d2      	lsls	r2, r2, #7
 8006444:	440a      	add	r2, r1
 8006446:	3284      	adds	r2, #132	; 0x84
 8006448:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	6809      	ldr	r1, [r1, #0]
 800645e:	4608      	mov	r0, r1
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	01c9      	lsls	r1, r1, #7
 8006464:	4401      	add	r1, r0
 8006466:	3184      	adds	r1, #132	; 0x84
 8006468:	4313      	orrs	r3, r2
 800646a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	01db      	lsls	r3, r3, #7
 8006476:	4413      	add	r3, r2
 8006478:	3384      	adds	r3, #132	; 0x84
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	01db      	lsls	r3, r3, #7
 8006486:	4413      	add	r3, r2
 8006488:	3384      	adds	r3, #132	; 0x84
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	01db      	lsls	r3, r3, #7
 800649a:	4413      	add	r3, r2
 800649c:	3384      	adds	r3, #132	; 0x84
 800649e:	461a      	mov	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064ae:	2304      	movs	r3, #4
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e01b      	b.n	80064ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d102      	bne.n	80064c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064bc:	2303      	movs	r3, #3
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e014      	b.n	80064ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d00b      	beq.n	80064e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d007      	beq.n	80064e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d003      	beq.n	80064e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064de:	2b07      	cmp	r3, #7
 80064e0:	d102      	bne.n	80064e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064e2:	2302      	movs	r3, #2
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	e001      	b.n	80064ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064e8:	2301      	movs	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	4413      	add	r3, r2
 80064f8:	3384      	adds	r3, #132	; 0x84
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	4611      	mov	r1, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	01d2      	lsls	r2, r2, #7
 8006506:	440a      	add	r2, r1
 8006508:	3284      	adds	r2, #132	; 0x84
 800650a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6859      	ldr	r1, [r3, #4]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	1acb      	subs	r3, r1, r3
 8006526:	69f9      	ldr	r1, [r7, #28]
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	6809      	ldr	r1, [r1, #0]
 8006532:	4608      	mov	r0, r1
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	01c9      	lsls	r1, r1, #7
 8006538:	4401      	add	r1, r0
 800653a:	3184      	adds	r1, #132	; 0x84
 800653c:	4313      	orrs	r3, r2
 800653e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	01db      	lsls	r3, r3, #7
 800654a:	4413      	add	r3, r2
 800654c:	3384      	adds	r3, #132	; 0x84
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	4611      	mov	r1, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	01d2      	lsls	r2, r2, #7
 800655a:	440a      	add	r2, r1
 800655c:	3284      	adds	r2, #132	; 0x84
 800655e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006562:	f023 0307 	bic.w	r3, r3, #7
 8006566:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	01db      	lsls	r3, r3, #7
 8006572:	4413      	add	r3, r2
 8006574:	3384      	adds	r3, #132	; 0x84
 8006576:	461a      	mov	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	4413      	add	r3, r2
 800658a:	3384      	adds	r3, #132	; 0x84
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	4611      	mov	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	01d2      	lsls	r2, r2, #7
 8006598:	440a      	add	r2, r1
 800659a:	3284      	adds	r2, #132	; 0x84
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6013      	str	r3, [r2, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e267      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d075      	beq.n	80066ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065ce:	4b88      	ldr	r3, [pc, #544]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d00c      	beq.n	80065f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065da:	4b85      	ldr	r3, [pc, #532]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d112      	bne.n	800660c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e6:	4b82      	ldr	r3, [pc, #520]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f2:	d10b      	bne.n	800660c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05b      	beq.n	80066b8 <HAL_RCC_OscConfig+0x108>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d157      	bne.n	80066b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e242      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006614:	d106      	bne.n	8006624 <HAL_RCC_OscConfig+0x74>
 8006616:	4b76      	ldr	r3, [pc, #472]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a75      	ldr	r2, [pc, #468]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e01d      	b.n	8006660 <HAL_RCC_OscConfig+0xb0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x98>
 800662e:	4b70      	ldr	r3, [pc, #448]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6f      	ldr	r2, [pc, #444]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6c      	ldr	r2, [pc, #432]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0xb0>
 8006648:	4b69      	ldr	r3, [pc, #420]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b66      	ldr	r3, [pc, #408]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a65      	ldr	r2, [pc, #404]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006668:	f7fc fe66 	bl	8003338 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006670:	f7fc fe62 	bl	8003338 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	; 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e207      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b5b      	ldr	r3, [pc, #364]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0xc0>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fc fe52 	bl	8003338 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006698:	f7fc fe4e 	bl	8003338 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1f3      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066aa:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0xe8>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d063      	beq.n	800678e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066c6:	4b4a      	ldr	r3, [pc, #296]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d2:	4b47      	ldr	r3, [pc, #284]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d11c      	bne.n	8006718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066de:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d116      	bne.n	8006718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCC_OscConfig+0x152>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e1c7      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4937      	ldr	r1, [pc, #220]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006716:	e03a      	b.n	800678e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d020      	beq.n	8006762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006720:	4b34      	ldr	r3, [pc, #208]	; (80067f4 <HAL_RCC_OscConfig+0x244>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006726:	f7fc fe07 	bl	8003338 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800672e:	f7fc fe03 	bl	8003338 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e1a8      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006740:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674c:	4b28      	ldr	r3, [pc, #160]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4925      	ldr	r1, [pc, #148]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 800675c:	4313      	orrs	r3, r2
 800675e:	600b      	str	r3, [r1, #0]
 8006760:	e015      	b.n	800678e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006762:	4b24      	ldr	r3, [pc, #144]	; (80067f4 <HAL_RCC_OscConfig+0x244>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fc fde6 	bl	8003338 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006770:	f7fc fde2 	bl	8003338 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e187      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006782:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f0      	bne.n	8006770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d036      	beq.n	8006808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <HAL_RCC_OscConfig+0x248>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fc fdc6 	bl	8003338 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fc fdc2 	bl	8003338 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e167      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCC_OscConfig+0x240>)
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x200>
 80067ce:	e01b      	b.n	8006808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d0:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCC_OscConfig+0x248>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d6:	f7fc fdaf 	bl	8003338 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067dc:	e00e      	b.n	80067fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067de:	f7fc fdab 	bl	8003338 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d907      	bls.n	80067fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e150      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
 80067f0:	40023800 	.word	0x40023800
 80067f4:	42470000 	.word	0x42470000
 80067f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	4b88      	ldr	r3, [pc, #544]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ea      	bne.n	80067de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8097 	beq.w	8006944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681a:	4b81      	ldr	r3, [pc, #516]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	4b7d      	ldr	r3, [pc, #500]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4a7c      	ldr	r2, [pc, #496]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	; 0x40
 8006836:	4b7a      	ldr	r3, [pc, #488]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006846:	4b77      	ldr	r3, [pc, #476]	; (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d118      	bne.n	8006884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006852:	4b74      	ldr	r3, [pc, #464]	; (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a73      	ldr	r2, [pc, #460]	; (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800685e:	f7fc fd6b 	bl	8003338 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006866:	f7fc fd67 	bl	8003338 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e10c      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006878:	4b6a      	ldr	r3, [pc, #424]	; (8006a24 <HAL_RCC_OscConfig+0x474>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0f0      	beq.n	8006866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0x2ea>
 800688c:	4b64      	ldr	r3, [pc, #400]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	4a63      	ldr	r2, [pc, #396]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	6713      	str	r3, [r2, #112]	; 0x70
 8006898:	e01c      	b.n	80068d4 <HAL_RCC_OscConfig+0x324>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b05      	cmp	r3, #5
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0x30c>
 80068a2:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	4a5e      	ldr	r2, [pc, #376]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068a8:	f043 0304 	orr.w	r3, r3, #4
 80068ac:	6713      	str	r3, [r2, #112]	; 0x70
 80068ae:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a5b      	ldr	r2, [pc, #364]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0x324>
 80068bc:	4b58      	ldr	r3, [pc, #352]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a57      	ldr	r2, [pc, #348]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	4b55      	ldr	r3, [pc, #340]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a54      	ldr	r2, [pc, #336]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068ce:	f023 0304 	bic.w	r3, r3, #4
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc fd2c 	bl	8003338 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fc fd28 	bl	8003338 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0cb      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fa:	4b49      	ldr	r3, [pc, #292]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ee      	beq.n	80068e4 <HAL_RCC_OscConfig+0x334>
 8006906:	e014      	b.n	8006932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006908:	f7fc fd16 	bl	8003338 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690e:	e00a      	b.n	8006926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006910:	f7fc fd12 	bl	8003338 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	; 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e0b5      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ee      	bne.n	8006910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d105      	bne.n	8006944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006938:	4b39      	ldr	r3, [pc, #228]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	4a38      	ldr	r2, [pc, #224]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 800693e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80a1 	beq.w	8006a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 030c 	and.w	r3, r3, #12
 8006956:	2b08      	cmp	r3, #8
 8006958:	d05c      	beq.n	8006a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d141      	bne.n	80069e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	4b31      	ldr	r3, [pc, #196]	; (8006a28 <HAL_RCC_OscConfig+0x478>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fc fce6 	bl	8003338 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006970:	f7fc fce2 	bl	8003338 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e087      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006982:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	3b01      	subs	r3, #1
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	491b      	ldr	r1, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b8:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <HAL_RCC_OscConfig+0x478>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fc fcbb 	bl	8003338 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fc fcb7 	bl	8003338 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e05c      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x416>
 80069e4:	e054      	b.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <HAL_RCC_OscConfig+0x478>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fc fca4 	bl	8003338 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fc fca0 	bl	8003338 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e045      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x444>
 8006a12:	e03d      	b.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e038      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	40007000 	.word	0x40007000
 8006a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <HAL_RCC_OscConfig+0x4ec>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d028      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d121      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d11a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d111      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	3b01      	subs	r3, #1
 8006a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800

08006aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0cc      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab4:	4b68      	ldr	r3, [pc, #416]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d90c      	bls.n	8006adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac2:	4b65      	ldr	r3, [pc, #404]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aca:	4b63      	ldr	r3, [pc, #396]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0b8      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d020      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af4:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4a58      	ldr	r2, [pc, #352]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b0c:	4b53      	ldr	r3, [pc, #332]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a52      	ldr	r2, [pc, #328]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b18:	4b50      	ldr	r3, [pc, #320]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	494d      	ldr	r1, [pc, #308]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d044      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3e:	4b47      	ldr	r3, [pc, #284]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d119      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e07f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5e:	4b3f      	ldr	r3, [pc, #252]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e06f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6e:	4b3b      	ldr	r3, [pc, #236]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e067      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7e:	4b37      	ldr	r3, [pc, #220]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4934      	ldr	r1, [pc, #208]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fc fbd2 	bl	8003338 <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b98:	f7fc fbce 	bl	8003338 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e04f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 020c 	and.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d1eb      	bne.n	8006b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d20c      	bcs.n	8006be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd6:	4b20      	ldr	r3, [pc, #128]	; (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e032      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf4:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4916      	ldr	r1, [pc, #88]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	490e      	ldr	r1, [pc, #56]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c26:	f000 f821 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	490a      	ldr	r1, [pc, #40]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006c38:	5ccb      	ldrb	r3, [r1, r3]
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fb f9f0 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40023c00 	.word	0x40023c00
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	0800f7f8 	.word	0x0800f7f8
 8006c64:	20000000 	.word	0x20000000
 8006c68:	2000004c 	.word	0x2000004c

08006c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c70:	b094      	sub	sp, #80	; 0x50
 8006c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	647b      	str	r3, [r7, #68]	; 0x44
 8006c78:	2300      	movs	r3, #0
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 030c 	and.w	r3, r3, #12
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d00d      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x40>
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	f200 80e1 	bhi.w	8006e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9e:	e0db      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca0:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ca2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ca4:	e0db      	b.n	8006e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca6:	4b73      	ldr	r3, [pc, #460]	; (8006e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006caa:	e0d8      	b.n	8006e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cac:	4b6f      	ldr	r3, [pc, #444]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d063      	beq.n	8006d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc2:	4b6a      	ldr	r3, [pc, #424]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	2200      	movs	r2, #0
 8006cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cde:	4622      	mov	r2, r4
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	0159      	lsls	r1, r3, #5
 8006cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf0:	0150      	lsls	r0, r2, #5
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	1a51      	subs	r1, r2, r1
 8006cfa:	6139      	str	r1, [r7, #16]
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d10:	4659      	mov	r1, fp
 8006d12:	018b      	lsls	r3, r1, #6
 8006d14:	4651      	mov	r1, sl
 8006d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	018a      	lsls	r2, r1, #6
 8006d1e:	4651      	mov	r1, sl
 8006d20:	ebb2 0801 	subs.w	r8, r2, r1
 8006d24:	4659      	mov	r1, fp
 8006d26:	eb63 0901 	sbc.w	r9, r3, r1
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d3e:	4690      	mov	r8, r2
 8006d40:	4699      	mov	r9, r3
 8006d42:	4623      	mov	r3, r4
 8006d44:	eb18 0303 	adds.w	r3, r8, r3
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	eb49 0303 	adc.w	r3, r9, r3
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	024b      	lsls	r3, r1, #9
 8006d62:	4621      	mov	r1, r4
 8006d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d68:	4621      	mov	r1, r4
 8006d6a:	024a      	lsls	r2, r1, #9
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d72:	2200      	movs	r2, #0
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d7c:	f7f9 fea4 	bl	8000ac8 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d88:	e058      	b.n	8006e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8a:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	099b      	lsrs	r3, r3, #6
 8006d90:	2200      	movs	r2, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	4611      	mov	r1, r2
 8006d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d9a:	623b      	str	r3, [r7, #32]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da4:	4642      	mov	r2, r8
 8006da6:	464b      	mov	r3, r9
 8006da8:	f04f 0000 	mov.w	r0, #0
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	0159      	lsls	r1, r3, #5
 8006db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db6:	0150      	lsls	r0, r2, #5
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8006de0:	eb63 050b 	sbc.w	r5, r3, fp
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	00eb      	lsls	r3, r5, #3
 8006dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006df2:	00e2      	lsls	r2, r4, #3
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	4643      	mov	r3, r8
 8006dfa:	18e3      	adds	r3, r4, r3
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	464b      	mov	r3, r9
 8006e00:	eb45 0303 	adc.w	r3, r5, r3
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e12:	4629      	mov	r1, r5
 8006e14:	028b      	lsls	r3, r1, #10
 8006e16:	4621      	mov	r1, r4
 8006e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	028a      	lsls	r2, r1, #10
 8006e20:	4610      	mov	r0, r2
 8006e22:	4619      	mov	r1, r3
 8006e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e26:	2200      	movs	r2, #0
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	61fa      	str	r2, [r7, #28]
 8006e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e30:	f7f9 fe4a 	bl	8000ac8 <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4613      	mov	r3, r2
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	3301      	adds	r3, #1
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e56:	e002      	b.n	8006e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3750      	adds	r7, #80	; 0x50
 8006e64:	46bd      	mov	sp, r7
 8006e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	00f42400 	.word	0x00f42400
 8006e74:	007a1200 	.word	0x007a1200

08006e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e7c:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000000 	.word	0x20000000

08006e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e94:	f7ff fff0 	bl	8006e78 <HAL_RCC_GetHCLKFreq>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	0a9b      	lsrs	r3, r3, #10
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	4903      	ldr	r1, [pc, #12]	; (8006eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea6:	5ccb      	ldrb	r3, [r1, r3]
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	0800f808 	.word	0x0800f808

08006eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ebc:	f7ff ffdc 	bl	8006e78 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	0b5b      	lsrs	r3, r3, #13
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4903      	ldr	r1, [pc, #12]	; (8006edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	0800f808 	.word	0x0800f808

08006ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220f      	movs	r2, #15
 8006eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ef0:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <HAL_RCC_GetClockConfig+0x5c>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0203 	and.w	r2, r3, #3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <HAL_RCC_GetClockConfig+0x5c>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_RCC_GetClockConfig+0x5c>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCC_GetClockConfig+0x5c>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <HAL_RCC_GetClockConfig+0x60>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 020f 	and.w	r2, r3, #15
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40023c00 	.word	0x40023c00

08006f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d075      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f78:	4b91      	ldr	r3, [pc, #580]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f7e:	f7fc f9db 	bl	8003338 <HAL_GetTick>
 8006f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f84:	e008      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f86:	f7fc f9d7 	bl	8003338 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e189      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f98:	4b8a      	ldr	r3, [pc, #552]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f0      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	019a      	lsls	r2, r3, #6
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	071b      	lsls	r3, r3, #28
 8006fbc:	4981      	ldr	r1, [pc, #516]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01f      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fd0:	4b7c      	ldr	r3, [pc, #496]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd6:	0f1b      	lsrs	r3, r3, #28
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	019a      	lsls	r2, r3, #6
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	061b      	lsls	r3, r3, #24
 8006fea:	431a      	orrs	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	071b      	lsls	r3, r3, #28
 8006ff0:	4974      	ldr	r1, [pc, #464]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ff8:	4b72      	ldr	r3, [pc, #456]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffe:	f023 021f 	bic.w	r2, r3, #31
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	3b01      	subs	r3, #1
 8007008:	496e      	ldr	r1, [pc, #440]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	019a      	lsls	r2, r3, #6
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	071b      	lsls	r3, r3, #28
 8007030:	4964      	ldr	r1, [pc, #400]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007038:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800703e:	f7fc f97b 	bl	8003338 <HAL_GetTick>
 8007042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007044:	e008      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007046:	f7fc f977 	bl	8003338 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e129      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007058:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007078:	2b00      	cmp	r3, #0
 800707a:	d079      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800707c:	4b52      	ldr	r3, [pc, #328]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007082:	f7fc f959 	bl	8003338 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007088:	e008      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800708a:	f7fc f955 	bl	8003338 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e107      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800709c:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a8:	d0ef      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070b6:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070bc:	0f1b      	lsrs	r3, r3, #28
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	019a      	lsls	r2, r3, #6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	071b      	lsls	r3, r3, #28
 80070d6:	493b      	ldr	r1, [pc, #236]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070de:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	4934      	ldr	r1, [pc, #208]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01e      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007104:	4b2f      	ldr	r3, [pc, #188]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	019a      	lsls	r2, r3, #6
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	071b      	lsls	r3, r3, #28
 8007124:	4927      	ldr	r1, [pc, #156]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	4922      	ldr	r1, [pc, #136]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007142:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007144:	2201      	movs	r2, #1
 8007146:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007148:	f7fc f8f6 	bl	8003338 <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007150:	f7fc f8f2 	bl	8003338 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e0a4      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716e:	d1ef      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 808b 	beq.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718c:	6413      	str	r3, [r2, #64]	; 0x40
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071a6:	f7fc f8c7 	bl	8003338 <HAL_GetTick>
 80071aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071ac:	e010      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071ae:	f7fc f8c3 	bl	8003338 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d909      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e075      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071c0:	42470068 	.word	0x42470068
 80071c4:	40023800 	.word	0x40023800
 80071c8:	42470070 	.word	0x42470070
 80071cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071d0:	4b38      	ldr	r3, [pc, #224]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0e8      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071dc:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02f      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d028      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071fa:	4b2f      	ldr	r3, [pc, #188]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007204:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800720a:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007210:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007216:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d114      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007222:	f7fc f889 	bl	8003338 <HAL_GetTick>
 8007226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007228:	e00a      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fc f885 	bl	8003338 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f241 3288 	movw	r2, #5000	; 0x1388
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e035      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0ee      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007258:	d10d      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	4912      	ldr	r1, [pc, #72]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007270:	4313      	orrs	r3, r2
 8007272:	608b      	str	r3, [r1, #8]
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	4a0f      	ldr	r2, [pc, #60]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800727c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007280:	6093      	str	r3, [r2, #8]
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728e:	490a      	ldr	r1, [pc, #40]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007290:	4313      	orrs	r3, r2
 8007292:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40007000 	.word	0x40007000
 80072b8:	40023800 	.word	0x40023800
 80072bc:	42470e40 	.word	0x42470e40
 80072c0:	424711e0 	.word	0x424711e0

080072c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e01c      	b.n	8007310 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	795b      	ldrb	r3, [r3, #5]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fa fd0c 	bl	8001d04 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0204 	orr.w	r2, r2, #4
 8007300:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_RNG_GenerateRandomNumber+0x1a>
 800732e:	2302      	movs	r3, #2
 8007330:	e044      	b.n	80073bc <HAL_RNG_GenerateRandomNumber+0xa4>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	795b      	ldrb	r3, [r3, #5]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d133      	bne.n	80073aa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007348:	f7fb fff6 	bl	8003338 <HAL_GetTick>
 800734c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800734e:	e018      	b.n	8007382 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007350:	f7fb fff2 	bl	8003338 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d911      	bls.n	8007382 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d00a      	beq.n	8007382 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e01c      	b.n	80073bc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d1df      	bne.n	8007350 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	715a      	strb	r2, [r3, #5]
 80073a8:	e004      	b.n	80073b4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	711a      	strb	r2, [r3, #4]

  return status;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d105      	bne.n	80073ea <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2210      	movs	r2, #16
 80073e2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80073e4:	2301      	movs	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e00b      	b.n	8007402 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d104      	bne.n	8007402 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2208      	movs	r2, #8
 80073fc:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80073fe:	2301      	movs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d10b      	bne.n	8007420 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2204      	movs	r2, #4
 800740c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f839 	bl	8007486 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800741c:	605a      	str	r2, [r3, #4]

    return;
 800741e:	e024      	b.n	800746a <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d11d      	bne.n	800746a <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0208 	bic.w	r2, r2, #8
 800743c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	795b      	ldrb	r3, [r3, #5]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00b      	beq.n	800746a <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f803 	bl	8007470 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e025      	b.n	80074fa <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fa fda8 	bl	8002018 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f001 fd90 	bl	8009000 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	f001 fde5 	bl	80090ba <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007514:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d101      	bne.n	8007520 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
 800751e:	e021      	b.n	8007564 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d002      	beq.n	800752c <HAL_SDRAM_SendCommand+0x2a>
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b05      	cmp	r3, #5
 800752a:	d118      	bne.n	800755e <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fe25 	bl	800918c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d104      	bne.n	8007554 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2205      	movs	r2, #5
 800754e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007552:	e006      	b.n	8007562 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800755c:	e001      	b.n	8007562 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d101      	bne.n	8007586 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
 8007584:	e016      	b.n	80075b4 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10f      	bne.n	80075b2 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fe30 	bl	8009206 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e07b      	b.n	80076c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075de:	d009      	beq.n	80075f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	61da      	str	r2, [r3, #28]
 80075e6:	e005      	b.n	80075f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fa fba0 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007678:	ea42 0103 	orr.w	r1, r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	0c1b      	lsrs	r3, r3, #16
 8007692:	f003 0104 	and.w	r1, r3, #4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	f003 0210 	and.w	r2, r3, #16
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e01a      	b.n	8007716 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fa fb73 	bl	8001de4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b088      	sub	sp, #32
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_SPI_Transmit+0x22>
 800773c:	2302      	movs	r3, #2
 800773e:	e126      	b.n	800798e <HAL_SPI_Transmit+0x270>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007748:	f7fb fdf6 	bl	8003338 <HAL_GetTick>
 800774c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	d002      	beq.n	8007764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800775e:	2302      	movs	r3, #2
 8007760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007762:	e10b      	b.n	800797c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_SPI_Transmit+0x52>
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007774:	e102      	b.n	800797c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2203      	movs	r2, #3
 800777a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	88fa      	ldrh	r2, [r7, #6]
 8007794:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077bc:	d10f      	bne.n	80077de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d007      	beq.n	80077fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007804:	d14b      	bne.n	800789e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0xf6>
 800780e:	8afb      	ldrh	r3, [r7, #22]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d13e      	bne.n	8007892 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	881a      	ldrh	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007838:	e02b      	b.n	8007892 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d112      	bne.n	800786e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	881a      	ldrh	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	1c9a      	adds	r2, r3, #2
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	86da      	strh	r2, [r3, #54]	; 0x36
 800786c:	e011      	b.n	8007892 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800786e:	f7fb fd63 	bl	8003338 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d803      	bhi.n	8007886 <HAL_SPI_Transmit+0x168>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d102      	bne.n	800788c <HAL_SPI_Transmit+0x16e>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007890:	e074      	b.n	800797c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1ce      	bne.n	800783a <HAL_SPI_Transmit+0x11c>
 800789c:	e04c      	b.n	8007938 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_SPI_Transmit+0x18e>
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d140      	bne.n	800792e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	7812      	ldrb	r2, [r2, #0]
 80078b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078d2:	e02c      	b.n	800792e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d113      	bne.n	800790a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	86da      	strh	r2, [r3, #54]	; 0x36
 8007908:	e011      	b.n	800792e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790a:	f7fb fd15 	bl	8003338 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d803      	bhi.n	8007922 <HAL_SPI_Transmit+0x204>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d102      	bne.n	8007928 <HAL_SPI_Transmit+0x20a>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800792c:	e026      	b.n	800797c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1cd      	bne.n	80078d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fbd9 	bl	80080f4 <SPI_EndRxTxTransaction>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	77fb      	strb	r3, [r7, #31]
 8007978:	e000      	b.n	800797c <HAL_SPI_Transmit+0x25e>
  }

error:
 800797a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800798c:	7ffb      	ldrb	r3, [r7, #31]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af02      	add	r7, sp, #8
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b2:	d112      	bne.n	80079da <HAL_SPI_Receive+0x44>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10e      	bne.n	80079da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2204      	movs	r2, #4
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f8f1 	bl	8007bb8 <HAL_SPI_TransmitReceive>
 80079d6:	4603      	mov	r3, r0
 80079d8:	e0ea      	b.n	8007bb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_SPI_Receive+0x52>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e0e3      	b.n	8007bb0 <HAL_SPI_Receive+0x21a>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079f0:	f7fb fca2 	bl	8003338 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d002      	beq.n	8007a08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
 8007a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a06:	e0ca      	b.n	8007b9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <HAL_SPI_Receive+0x7e>
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a18:	e0c1      	b.n	8007b9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a60:	d10f      	bne.n	8007a82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d007      	beq.n	8007aa0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d162      	bne.n	8007b6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007aa8:	e02e      	b.n	8007b08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d115      	bne.n	8007ae4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f103 020c 	add.w	r2, r3, #12
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ae2:	e011      	b.n	8007b08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae4:	f7fb fc28 	bl	8003338 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d803      	bhi.n	8007afc <HAL_SPI_Receive+0x166>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afa:	d102      	bne.n	8007b02 <HAL_SPI_Receive+0x16c>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b06:	e04a      	b.n	8007b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1cb      	bne.n	8007aaa <HAL_SPI_Receive+0x114>
 8007b12:	e031      	b.n	8007b78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d113      	bne.n	8007b4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	b292      	uxth	r2, r2
 8007b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	1c9a      	adds	r2, r3, #2
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b48:	e011      	b.n	8007b6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b4a:	f7fb fbf5 	bl	8003338 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d803      	bhi.n	8007b62 <HAL_SPI_Receive+0x1cc>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d102      	bne.n	8007b68 <HAL_SPI_Receive+0x1d2>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b6c:	e017      	b.n	8007b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1cd      	bne.n	8007b14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fa53 	bl	8008028 <SPI_EndRxTransaction>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e000      	b.n	8007b9e <HAL_SPI_Receive+0x208>
  }

error :
 8007b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08c      	sub	sp, #48	; 0x30
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x26>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e18a      	b.n	8007ef4 <HAL_SPI_TransmitReceive+0x33c>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007be6:	f7fb fba7 	bl	8003338 <HAL_GetTick>
 8007bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d00f      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x70>
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c0e:	d107      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x68>
 8007c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d003      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c20:	2302      	movs	r3, #2
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c26:	e15b      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x82>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x82>
 8007c34:	887b      	ldrh	r3, [r7, #2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c40:	e14e      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d003      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2205      	movs	r2, #5
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	887a      	ldrh	r2, [r7, #2]
 8007c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	887a      	ldrh	r2, [r7, #2]
 8007c78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	887a      	ldrh	r2, [r7, #2]
 8007c7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d007      	beq.n	8007caa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb2:	d178      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x10a>
 8007cbc:	8b7b      	ldrh	r3, [r7, #26]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d166      	bne.n	8007d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	881a      	ldrh	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	1c9a      	adds	r2, r3, #2
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce6:	e053      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d11b      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x176>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d016      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x176>
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d113      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d119      	bne.n	8007d70 <HAL_SPI_TransmitReceive+0x1b8>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d014      	beq.n	8007d70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	b292      	uxth	r2, r2
 8007d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	1c9a      	adds	r2, r3, #2
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d70:	f7fb fae2 	bl	8003338 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d807      	bhi.n	8007d90 <HAL_SPI_TransmitReceive+0x1d8>
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d86:	d003      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d8e:	e0a7      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1a6      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x130>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1a1      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x130>
 8007da4:	e07c      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x1fc>
 8007dae:	8b7b      	ldrh	r3, [r7, #26]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d16b      	bne.n	8007e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dda:	e057      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d11c      	bne.n	8007e24 <HAL_SPI_TransmitReceive+0x26c>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d017      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0x26c>
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d114      	bne.n	8007e24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	7812      	ldrb	r2, [r2, #0]
 8007e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d119      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x2ae>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d014      	beq.n	8007e66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e62:	2301      	movs	r3, #1
 8007e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e66:	f7fb fa67 	bl	8003338 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d803      	bhi.n	8007e7e <HAL_SPI_TransmitReceive+0x2c6>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7c:	d102      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x2cc>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e8a:	e029      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1a2      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x224>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d19d      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f925 	bl	80080f4 <SPI_EndRxTxTransaction>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d006      	beq.n	8007ebe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ebc:	e010      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	e000      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3730      	adds	r7, #48	; 0x30
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f28:	f7fb fa06 	bl	8003338 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f38:	f7fb f9fe 	bl	8003338 <HAL_GetTick>
 8007f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	015b      	lsls	r3, r3, #5
 8007f44:	0d1b      	lsrs	r3, r3, #20
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f4e:	e054      	b.n	8007ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d050      	beq.n	8007ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f58:	f7fb f9ee 	bl	8003338 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d902      	bls.n	8007f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d13d      	bne.n	8007fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f86:	d111      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f90:	d004      	beq.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9a:	d107      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb4:	d10f      	bne.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e017      	b.n	800801a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4013      	ands	r3, r2
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	429a      	cmp	r2, r3
 8008008:	bf0c      	ite	eq
 800800a:	2301      	moveq	r3, #1
 800800c:	2300      	movne	r3, #0
 800800e:	b2db      	uxtb	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	429a      	cmp	r2, r3
 8008016:	d19b      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000000 	.word	0x20000000

08008028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803c:	d111      	bne.n	8008062 <SPI_EndRxTransaction+0x3a>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008046:	d004      	beq.n	8008052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008050:	d107      	bne.n	8008062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008060:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800806a:	d12a      	bne.n	80080c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008074:	d012      	beq.n	800809c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	2180      	movs	r1, #128	; 0x80
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff ff49 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02d      	beq.n	80080e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008090:	f043 0220 	orr.w	r2, r3, #32
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e026      	b.n	80080ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2101      	movs	r1, #1
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ff36 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01a      	beq.n	80080e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e013      	b.n	80080ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2200      	movs	r2, #0
 80080ca:	2101      	movs	r1, #1
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff ff23 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080dc:	f043 0220 	orr.w	r2, r3, #32
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e000      	b.n	80080ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008100:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <SPI_EndRxTxTransaction+0x7c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1b      	ldr	r2, [pc, #108]	; (8008174 <SPI_EndRxTxTransaction+0x80>)
 8008106:	fba2 2303 	umull	r2, r3, r2, r3
 800810a:	0d5b      	lsrs	r3, r3, #21
 800810c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800811e:	d112      	bne.n	8008146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	2180      	movs	r1, #128	; 0x80
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff fef4 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813a:	f043 0220 	orr.w	r2, r3, #32
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e00f      	b.n	8008166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	3b01      	subs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d0f2      	beq.n	8008146 <SPI_EndRxTxTransaction+0x52>
 8008160:	e000      	b.n	8008164 <SPI_EndRxTxTransaction+0x70>
        break;
 8008162:	bf00      	nop
  }

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000000 	.word	0x20000000
 8008174:	165e9f81 	.word	0x165e9f81

08008178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e041      	b.n	800820e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7f9 fe3e 	bl	8001e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f000 fa96 	bl	80086e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	d001      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e04e      	b.n	80082ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a23      	ldr	r2, [pc, #140]	; (80082dc <HAL_TIM_Base_Start_IT+0xc4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d022      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d01d      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d018      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d013      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a19      	ldr	r2, [pc, #100]	; (80082f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d004      	beq.n	8008298 <HAL_TIM_Base_Start_IT+0x80>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a18      	ldr	r2, [pc, #96]	; (80082f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d111      	bne.n	80082bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b06      	cmp	r3, #6
 80082a8:	d010      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ba:	e007      	b.n	80082cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0201 	orr.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40010000 	.word	0x40010000
 80082e0:	40000400 	.word	0x40000400
 80082e4:	40000800 	.word	0x40000800
 80082e8:	40000c00 	.word	0x40000c00
 80082ec:	40010400 	.word	0x40010400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40001800 	.word	0x40001800

080082f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b02      	cmp	r3, #2
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b02      	cmp	r3, #2
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0202 	mvn.w	r2, #2
 8008324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9b5 	bl	80086aa <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9a7 	bl	8008696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9b8 	bl	80086be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b04      	cmp	r3, #4
 8008360:	d122      	bne.n	80083a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b04      	cmp	r3, #4
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0204 	mvn.w	r2, #4
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f98b 	bl	80086aa <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f97d 	bl	8008696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f98e 	bl	80086be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0208 	mvn.w	r2, #8
 80083cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2204      	movs	r2, #4
 80083d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f961 	bl	80086aa <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f953 	bl	8008696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f964 	bl	80086be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0310 	and.w	r3, r3, #16
 8008406:	2b10      	cmp	r3, #16
 8008408:	d122      	bne.n	8008450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b10      	cmp	r3, #16
 8008416:	d11b      	bne.n	8008450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0210 	mvn.w	r2, #16
 8008420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2208      	movs	r2, #8
 8008426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f937 	bl	80086aa <HAL_TIM_IC_CaptureCallback>
 800843c:	e005      	b.n	800844a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f929 	bl	8008696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f93a 	bl	80086be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b01      	cmp	r3, #1
 800845c:	d10e      	bne.n	800847c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b01      	cmp	r3, #1
 800846a:	d107      	bne.n	800847c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0201 	mvn.w	r2, #1
 8008474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f9 fa1c 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d10e      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d107      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fae0 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d10e      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d107      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8ff 	bl	80086d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d10e      	bne.n	8008500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d107      	bne.n	8008500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0220 	mvn.w	r2, #32
 80084f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 faaa 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <HAL_TIM_ConfigClockSource+0x1c>
 8008520:	2302      	movs	r3, #2
 8008522:	e0b4      	b.n	800868e <HAL_TIM_ConfigClockSource+0x186>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800854a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855c:	d03e      	beq.n	80085dc <HAL_TIM_ConfigClockSource+0xd4>
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008562:	f200 8087 	bhi.w	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	f000 8086 	beq.w	800867a <HAL_TIM_ConfigClockSource+0x172>
 800856e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008572:	d87f      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 8008574:	2b70      	cmp	r3, #112	; 0x70
 8008576:	d01a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0xa6>
 8008578:	2b70      	cmp	r3, #112	; 0x70
 800857a:	d87b      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 800857c:	2b60      	cmp	r3, #96	; 0x60
 800857e:	d050      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x11a>
 8008580:	2b60      	cmp	r3, #96	; 0x60
 8008582:	d877      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 8008584:	2b50      	cmp	r3, #80	; 0x50
 8008586:	d03c      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0xfa>
 8008588:	2b50      	cmp	r3, #80	; 0x50
 800858a:	d873      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d058      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x13a>
 8008590:	2b40      	cmp	r3, #64	; 0x40
 8008592:	d86f      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 8008594:	2b30      	cmp	r3, #48	; 0x30
 8008596:	d064      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15a>
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d86b      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 800859c:	2b20      	cmp	r3, #32
 800859e:	d060      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15a>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d867      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05c      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15a>
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d05a      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15a>
 80085ac:	e062      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6899      	ldr	r1, [r3, #8]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f000 f9ad 	bl	800891c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	609a      	str	r2, [r3, #8]
      break;
 80085da:	e04f      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6899      	ldr	r1, [r3, #8]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f000 f996 	bl	800891c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085fe:	609a      	str	r2, [r3, #8]
      break;
 8008600:	e03c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	f000 f90a 	bl	8008828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2150      	movs	r1, #80	; 0x50
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f963 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008620:	e02c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	f000 f929 	bl	8008886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2160      	movs	r1, #96	; 0x60
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f953 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008640:	e01c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6859      	ldr	r1, [r3, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	461a      	mov	r2, r3
 8008650:	f000 f8ea 	bl	8008828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2140      	movs	r1, #64	; 0x40
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f943 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008660:	e00c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f000 f93a 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008672:	e003      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
      break;
 8008678:	e000      	b.n	800867c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800867a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a40      	ldr	r2, [pc, #256]	; (80087fc <TIM_Base_SetConfig+0x114>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008706:	d00f      	beq.n	8008728 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3d      	ldr	r2, [pc, #244]	; (8008800 <TIM_Base_SetConfig+0x118>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00b      	beq.n	8008728 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a3c      	ldr	r2, [pc, #240]	; (8008804 <TIM_Base_SetConfig+0x11c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d007      	beq.n	8008728 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a3b      	ldr	r2, [pc, #236]	; (8008808 <TIM_Base_SetConfig+0x120>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d003      	beq.n	8008728 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3a      	ldr	r2, [pc, #232]	; (800880c <TIM_Base_SetConfig+0x124>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d108      	bne.n	800873a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2f      	ldr	r2, [pc, #188]	; (80087fc <TIM_Base_SetConfig+0x114>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d02b      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008748:	d027      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2c      	ldr	r2, [pc, #176]	; (8008800 <TIM_Base_SetConfig+0x118>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d023      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2b      	ldr	r2, [pc, #172]	; (8008804 <TIM_Base_SetConfig+0x11c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d01f      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2a      	ldr	r2, [pc, #168]	; (8008808 <TIM_Base_SetConfig+0x120>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01b      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a29      	ldr	r2, [pc, #164]	; (800880c <TIM_Base_SetConfig+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d017      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a28      	ldr	r2, [pc, #160]	; (8008810 <TIM_Base_SetConfig+0x128>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a27      	ldr	r2, [pc, #156]	; (8008814 <TIM_Base_SetConfig+0x12c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00f      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a26      	ldr	r2, [pc, #152]	; (8008818 <TIM_Base_SetConfig+0x130>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00b      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <TIM_Base_SetConfig+0x134>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d007      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a24      	ldr	r2, [pc, #144]	; (8008820 <TIM_Base_SetConfig+0x138>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d003      	beq.n	800879a <TIM_Base_SetConfig+0xb2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a23      	ldr	r2, [pc, #140]	; (8008824 <TIM_Base_SetConfig+0x13c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d108      	bne.n	80087ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <TIM_Base_SetConfig+0x114>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_Base_SetConfig+0xf8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a0c      	ldr	r2, [pc, #48]	; (800880c <TIM_Base_SetConfig+0x124>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d103      	bne.n	80087e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	615a      	str	r2, [r3, #20]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40010400 	.word	0x40010400
 8008810:	40014000 	.word	0x40014000
 8008814:	40014400 	.word	0x40014400
 8008818:	40014800 	.word	0x40014800
 800881c:	40001800 	.word	0x40001800
 8008820:	40001c00 	.word	0x40001c00
 8008824:	40002000 	.word	0x40002000

08008828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0201 	bic.w	r2, r3, #1
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f023 030a 	bic.w	r3, r3, #10
 8008864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f023 0210 	bic.w	r2, r3, #16
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	031b      	lsls	r3, r3, #12
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	f043 0307 	orr.w	r3, r3, #7
 8008908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	021a      	lsls	r2, r3, #8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	431a      	orrs	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4313      	orrs	r3, r2
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008970:	2302      	movs	r3, #2
 8008972:	e05a      	b.n	8008a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a21      	ldr	r2, [pc, #132]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d022      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c0:	d01d      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d10c      	bne.n	8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00
 8008a48:	40010400 	.word	0x40010400
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40001800 	.word	0x40001800

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e03f      	b.n	8008b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7f9 f9de 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2224      	movs	r2, #36	; 0x24
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f829 	bl	8008b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695a      	ldr	r2, [r3, #20]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b1c:	b0c0      	sub	sp, #256	; 0x100
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b34:	68d9      	ldr	r1, [r3, #12]
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	ea40 0301 	orr.w	r3, r0, r1
 8008b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b70:	f021 010c 	bic.w	r1, r1, #12
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	6999      	ldr	r1, [r3, #24]
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	ea40 0301 	orr.w	r3, r0, r1
 8008b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b8f      	ldr	r3, [pc, #572]	; (8008de4 <UART_SetConfig+0x2cc>)
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d005      	beq.n	8008bb8 <UART_SetConfig+0xa0>
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b8d      	ldr	r3, [pc, #564]	; (8008de8 <UART_SetConfig+0x2d0>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d104      	bne.n	8008bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bb8:	f7fe f97e 	bl	8006eb8 <HAL_RCC_GetPCLK2Freq>
 8008bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bc0:	e003      	b.n	8008bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bc2:	f7fe f965 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 8008bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd4:	f040 810c 	bne.w	8008df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	1891      	adds	r1, r2, r2
 8008bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bf2:	415b      	adcs	r3, r3
 8008bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	eb12 0801 	adds.w	r8, r2, r1
 8008c00:	4629      	mov	r1, r5
 8008c02:	eb43 0901 	adc.w	r9, r3, r1
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c1a:	4690      	mov	r8, r2
 8008c1c:	4699      	mov	r9, r3
 8008c1e:	4623      	mov	r3, r4
 8008c20:	eb18 0303 	adds.w	r3, r8, r3
 8008c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c28:	462b      	mov	r3, r5
 8008c2a:	eb49 0303 	adc.w	r3, r9, r3
 8008c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c46:	460b      	mov	r3, r1
 8008c48:	18db      	adds	r3, r3, r3
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	eb42 0303 	adc.w	r3, r2, r3
 8008c52:	657b      	str	r3, [r7, #84]	; 0x54
 8008c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c5c:	f7f7 ff34 	bl	8000ac8 <__aeabi_uldivmod>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4b61      	ldr	r3, [pc, #388]	; (8008dec <UART_SetConfig+0x2d4>)
 8008c66:	fba3 2302 	umull	r2, r3, r3, r2
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	011c      	lsls	r4, r3, #4
 8008c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	1891      	adds	r1, r2, r2
 8008c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c88:	415b      	adcs	r3, r3
 8008c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c90:	4641      	mov	r1, r8
 8008c92:	eb12 0a01 	adds.w	sl, r2, r1
 8008c96:	4649      	mov	r1, r9
 8008c98:	eb43 0b01 	adc.w	fp, r3, r1
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cb0:	4692      	mov	sl, r2
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	4643      	mov	r3, r8
 8008cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8008cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	18db      	adds	r3, r3, r3
 8008ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	eb42 0303 	adc.w	r3, r2, r3
 8008ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cf2:	f7f7 fee9 	bl	8000ac8 <__aeabi_uldivmod>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4b3b      	ldr	r3, [pc, #236]	; (8008dec <UART_SetConfig+0x2d4>)
 8008cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	2264      	movs	r2, #100	; 0x64
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	1acb      	subs	r3, r1, r3
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d12:	4b36      	ldr	r3, [pc, #216]	; (8008dec <UART_SetConfig+0x2d4>)
 8008d14:	fba3 2302 	umull	r2, r3, r3, r2
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d20:	441c      	add	r4, r3
 8008d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d34:	4642      	mov	r2, r8
 8008d36:	464b      	mov	r3, r9
 8008d38:	1891      	adds	r1, r2, r2
 8008d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d3c:	415b      	adcs	r3, r3
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d44:	4641      	mov	r1, r8
 8008d46:	1851      	adds	r1, r2, r1
 8008d48:	6339      	str	r1, [r7, #48]	; 0x30
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	414b      	adcs	r3, r1
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	00cb      	lsls	r3, r1, #3
 8008d60:	4651      	mov	r1, sl
 8008d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d66:	4651      	mov	r1, sl
 8008d68:	00ca      	lsls	r2, r1, #3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4603      	mov	r3, r0
 8008d70:	4642      	mov	r2, r8
 8008d72:	189b      	adds	r3, r3, r2
 8008d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d78:	464b      	mov	r3, r9
 8008d7a:	460a      	mov	r2, r1
 8008d7c:	eb42 0303 	adc.w	r3, r2, r3
 8008d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d98:	460b      	mov	r3, r1
 8008d9a:	18db      	adds	r3, r3, r3
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9e:	4613      	mov	r3, r2
 8008da0:	eb42 0303 	adc.w	r3, r2, r3
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dae:	f7f7 fe8b 	bl	8000ac8 <__aeabi_uldivmod>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4b0d      	ldr	r3, [pc, #52]	; (8008dec <UART_SetConfig+0x2d4>)
 8008db8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	2164      	movs	r1, #100	; 0x64
 8008dc0:	fb01 f303 	mul.w	r3, r1, r3
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	3332      	adds	r3, #50	; 0x32
 8008dca:	4a08      	ldr	r2, [pc, #32]	; (8008dec <UART_SetConfig+0x2d4>)
 8008dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	f003 0207 	and.w	r2, r3, #7
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4422      	add	r2, r4
 8008dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008de0:	e105      	b.n	8008fee <UART_SetConfig+0x4d6>
 8008de2:	bf00      	nop
 8008de4:	40011000 	.word	0x40011000
 8008de8:	40011400 	.word	0x40011400
 8008dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e02:	4642      	mov	r2, r8
 8008e04:	464b      	mov	r3, r9
 8008e06:	1891      	adds	r1, r2, r2
 8008e08:	6239      	str	r1, [r7, #32]
 8008e0a:	415b      	adcs	r3, r3
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e12:	4641      	mov	r1, r8
 8008e14:	1854      	adds	r4, r2, r1
 8008e16:	4649      	mov	r1, r9
 8008e18:	eb43 0501 	adc.w	r5, r3, r1
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	00eb      	lsls	r3, r5, #3
 8008e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e2a:	00e2      	lsls	r2, r4, #3
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	461d      	mov	r5, r3
 8008e30:	4643      	mov	r3, r8
 8008e32:	18e3      	adds	r3, r4, r3
 8008e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e38:	464b      	mov	r3, r9
 8008e3a:	eb45 0303 	adc.w	r3, r5, r3
 8008e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e5e:	4629      	mov	r1, r5
 8008e60:	008b      	lsls	r3, r1, #2
 8008e62:	4621      	mov	r1, r4
 8008e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e68:	4621      	mov	r1, r4
 8008e6a:	008a      	lsls	r2, r1, #2
 8008e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e70:	f7f7 fe2a 	bl	8000ac8 <__aeabi_uldivmod>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4b60      	ldr	r3, [pc, #384]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	011c      	lsls	r4, r3, #4
 8008e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e94:	4642      	mov	r2, r8
 8008e96:	464b      	mov	r3, r9
 8008e98:	1891      	adds	r1, r2, r2
 8008e9a:	61b9      	str	r1, [r7, #24]
 8008e9c:	415b      	adcs	r3, r3
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	1851      	adds	r1, r2, r1
 8008ea8:	6139      	str	r1, [r7, #16]
 8008eaa:	4649      	mov	r1, r9
 8008eac:	414b      	adcs	r3, r1
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	00cb      	lsls	r3, r1, #3
 8008ec0:	4651      	mov	r1, sl
 8008ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ec6:	4651      	mov	r1, sl
 8008ec8:	00ca      	lsls	r2, r1, #3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ed8:	464b      	mov	r3, r9
 8008eda:	460a      	mov	r2, r1
 8008edc:	eb42 0303 	adc.w	r3, r2, r3
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008efc:	4649      	mov	r1, r9
 8008efe:	008b      	lsls	r3, r1, #2
 8008f00:	4641      	mov	r1, r8
 8008f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f06:	4641      	mov	r1, r8
 8008f08:	008a      	lsls	r2, r1, #2
 8008f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f0e:	f7f7 fddb 	bl	8000ac8 <__aeabi_uldivmod>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008f18:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	2164      	movs	r1, #100	; 0x64
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	3332      	adds	r3, #50	; 0x32
 8008f2a:	4a34      	ldr	r2, [pc, #208]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f36:	441c      	add	r4, r3
 8008f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f40:	677a      	str	r2, [r7, #116]	; 0x74
 8008f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f46:	4642      	mov	r2, r8
 8008f48:	464b      	mov	r3, r9
 8008f4a:	1891      	adds	r1, r2, r2
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	415b      	adcs	r3, r3
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f56:	4641      	mov	r1, r8
 8008f58:	1851      	adds	r1, r2, r1
 8008f5a:	6039      	str	r1, [r7, #0]
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	414b      	adcs	r3, r1
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f6e:	4659      	mov	r1, fp
 8008f70:	00cb      	lsls	r3, r1, #3
 8008f72:	4651      	mov	r1, sl
 8008f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f78:	4651      	mov	r1, sl
 8008f7a:	00ca      	lsls	r2, r1, #3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4603      	mov	r3, r0
 8008f82:	4642      	mov	r2, r8
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f88:	464b      	mov	r3, r9
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	eb42 0303 	adc.w	r3, r2, r3
 8008f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008faa:	4649      	mov	r1, r9
 8008fac:	008b      	lsls	r3, r1, #2
 8008fae:	4641      	mov	r1, r8
 8008fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fb4:	4641      	mov	r1, r8
 8008fb6:	008a      	lsls	r2, r1, #2
 8008fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fbc:	f7f7 fd84 	bl	8000ac8 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2164      	movs	r1, #100	; 0x64
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	3332      	adds	r3, #50	; 0x32
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	f003 020f 	and.w	r2, r3, #15
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4422      	add	r2, r4
 8008fec:	609a      	str	r2, [r3, #8]
}
 8008fee:	bf00      	nop
 8008ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ffa:	bf00      	nop
 8008ffc:	51eb851f 	.word	0x51eb851f

08009000 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d123      	bne.n	800905a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800901a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	6851      	ldr	r1, [r2, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	6892      	ldr	r2, [r2, #8]
 8009026:	4311      	orrs	r1, r2
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	68d2      	ldr	r2, [r2, #12]
 800902c:	4311      	orrs	r1, r2
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6912      	ldr	r2, [r2, #16]
 8009032:	4311      	orrs	r1, r2
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	6952      	ldr	r2, [r2, #20]
 8009038:	4311      	orrs	r1, r2
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6992      	ldr	r2, [r2, #24]
 800903e:	4311      	orrs	r1, r2
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	69d2      	ldr	r2, [r2, #28]
 8009044:	4311      	orrs	r1, r2
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	6a12      	ldr	r2, [r2, #32]
 800904a:	4311      	orrs	r1, r2
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009050:	430a      	orrs	r2, r1
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	e028      	b.n	80090ac <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	69d9      	ldr	r1, [r3, #28]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	4319      	orrs	r1, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	430b      	orrs	r3, r1
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6851      	ldr	r1, [r2, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	6892      	ldr	r2, [r2, #8]
 800908c:	4311      	orrs	r1, r2
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	68d2      	ldr	r2, [r2, #12]
 8009092:	4311      	orrs	r1, r2
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	6912      	ldr	r2, [r2, #16]
 8009098:	4311      	orrs	r1, r2
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	6952      	ldr	r2, [r2, #20]
 800909e:	4311      	orrs	r1, r2
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	6992      	ldr	r2, [r2, #24]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d128      	bne.n	800911e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	1e59      	subs	r1, r3, #1
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	3b01      	subs	r3, #1
 80090e0:	011b      	lsls	r3, r3, #4
 80090e2:	4319      	orrs	r1, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	021b      	lsls	r3, r3, #8
 80090ec:	4319      	orrs	r1, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	4319      	orrs	r1, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	4319      	orrs	r1, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	3b01      	subs	r3, #1
 8009108:	051b      	lsls	r3, r3, #20
 800910a:	4319      	orrs	r1, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	3b01      	subs	r3, #1
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	430b      	orrs	r3, r1
 8009116:	431a      	orrs	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	e02f      	b.n	800917e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	68d2      	ldr	r2, [r2, #12]
 800912e:	3a01      	subs	r2, #1
 8009130:	0311      	lsls	r1, r2, #12
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	6952      	ldr	r2, [r2, #20]
 8009136:	3a01      	subs	r2, #1
 8009138:	0512      	lsls	r2, r2, #20
 800913a:	430a      	orrs	r2, r1
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	1e59      	subs	r1, r3, #1
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	4319      	orrs	r1, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	3b01      	subs	r3, #1
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	4319      	orrs	r1, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	3b01      	subs	r3, #1
 800916a:	041b      	lsls	r3, r3, #16
 800916c:	4319      	orrs	r1, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	3b01      	subs	r3, #1
 8009174:	061b      	lsls	r3, r3, #24
 8009176:	430b      	orrs	r3, r1
 8009178:	431a      	orrs	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	0d9b      	lsrs	r3, r3, #22
 80091a2:	059b      	lsls	r3, r3, #22
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	6811      	ldr	r1, [r2, #0]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	6852      	ldr	r2, [r2, #4]
 80091ac:	4311      	orrs	r1, r2
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	6892      	ldr	r2, [r2, #8]
 80091b2:	3a01      	subs	r2, #1
 80091b4:	0152      	lsls	r2, r2, #5
 80091b6:	4311      	orrs	r1, r2
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	68d2      	ldr	r2, [r2, #12]
 80091bc:	0252      	lsls	r2, r2, #9
 80091be:	430a      	orrs	r2, r1
 80091c0:	431a      	orrs	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80091c6:	f7fa f8b7 	bl	8003338 <HAL_GetTick>
 80091ca:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80091cc:	e010      	b.n	80091f0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d00c      	beq.n	80091f0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <FMC_SDRAM_SendCommand+0x60>
 80091dc:	f7fa f8ac 	bl	8003338 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d201      	bcs.n	80091f0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e006      	b.n	80091fe <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d0e8      	beq.n	80091ce <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009218:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	0052      	lsls	r2, r2, #1
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009234:	b084      	sub	sp, #16
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	f107 001c 	add.w	r0, r7, #28
 8009242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	2b01      	cmp	r3, #1
 800924a:	d122      	bne.n	8009292 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009276:	2b01      	cmp	r3, #1
 8009278:	d105      	bne.n	8009286 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f9c0 	bl	800960c <USB_CoreReset>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e01a      	b.n	80092c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9b4 	bl	800960c <USB_CoreReset>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
 80092ba:	e005      	b.n	80092c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d10b      	bne.n	80092e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f043 0206 	orr.w	r2, r3, #6
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f043 0220 	orr.w	r2, r3, #32
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092f2:	b004      	add	sp, #16
 80092f4:	4770      	bx	lr

080092f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f043 0201 	orr.w	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f023 0201 	bic.w	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d115      	bne.n	8009388 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009368:	2001      	movs	r0, #1
 800936a:	f7f9 fff1 	bl	8003350 <HAL_Delay>
      ms++;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f93a 	bl	80095ee <USB_GetMode>
 800937a:	4603      	mov	r3, r0
 800937c:	2b01      	cmp	r3, #1
 800937e:	d01e      	beq.n	80093be <USB_SetCurrentMode+0x84>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b31      	cmp	r3, #49	; 0x31
 8009384:	d9f0      	bls.n	8009368 <USB_SetCurrentMode+0x2e>
 8009386:	e01a      	b.n	80093be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d115      	bne.n	80093ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800939a:	2001      	movs	r0, #1
 800939c:	f7f9 ffd8 	bl	8003350 <HAL_Delay>
      ms++;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f921 	bl	80095ee <USB_GetMode>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <USB_SetCurrentMode+0x84>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b31      	cmp	r3, #49	; 0x31
 80093b6:	d9f0      	bls.n	800939a <USB_SetCurrentMode+0x60>
 80093b8:	e001      	b.n	80093be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e005      	b.n	80093ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b32      	cmp	r3, #50	; 0x32
 80093c2:	d101      	bne.n	80093c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e000      	b.n	80093ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4a13      	ldr	r2, [pc, #76]	; (8009438 <USB_FlushTxFifo+0x64>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d901      	bls.n	80093f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e01b      	b.n	800942c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	daf2      	bge.n	80093e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	019b      	lsls	r3, r3, #6
 8009404:	f043 0220 	orr.w	r2, r3, #32
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4a08      	ldr	r2, [pc, #32]	; (8009438 <USB_FlushTxFifo+0x64>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d901      	bls.n	800941e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e006      	b.n	800942c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b20      	cmp	r3, #32
 8009428:	d0f0      	beq.n	800940c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	00030d40 	.word	0x00030d40

0800943c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a11      	ldr	r2, [pc, #68]	; (8009498 <USB_FlushRxFifo+0x5c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d901      	bls.n	800945a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e018      	b.n	800948c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	daf2      	bge.n	8009448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2210      	movs	r2, #16
 800946a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a08      	ldr	r2, [pc, #32]	; (8009498 <USB_FlushRxFifo+0x5c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d901      	bls.n	800947e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e006      	b.n	800948c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b10      	cmp	r3, #16
 8009488:	d0f0      	beq.n	800946c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	00030d40 	.word	0x00030d40

0800949c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800949c:	b480      	push	{r7}
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4611      	mov	r1, r2
 80094a8:	461a      	mov	r2, r3
 80094aa:	460b      	mov	r3, r1
 80094ac:	71fb      	strb	r3, [r7, #7]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d123      	bne.n	800950a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094c2:	88bb      	ldrh	r3, [r7, #4]
 80094c4:	3303      	adds	r3, #3
 80094c6:	089b      	lsrs	r3, r3, #2
 80094c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	e018      	b.n	8009502 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	031a      	lsls	r2, r3, #12
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094dc:	461a      	mov	r2, r3
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	3301      	adds	r3, #1
 80094e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	3301      	adds	r3, #1
 80094ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	3301      	adds	r3, #1
 80094f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	3301      	adds	r3, #1
 80094fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	3301      	adds	r3, #1
 8009500:	61bb      	str	r3, [r7, #24]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	d3e2      	bcc.n	80094d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3724      	adds	r7, #36	; 0x24
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009518:	b480      	push	{r7}
 800951a:	b08b      	sub	sp, #44	; 0x2c
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	089b      	lsrs	r3, r3, #2
 8009532:	b29b      	uxth	r3, r3
 8009534:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800953e:	2300      	movs	r3, #0
 8009540:	623b      	str	r3, [r7, #32]
 8009542:	e014      	b.n	800956e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	3301      	adds	r3, #1
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	3301      	adds	r3, #1
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	3301      	adds	r3, #1
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	3301      	adds	r3, #1
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	3301      	adds	r3, #1
 800956c:	623b      	str	r3, [r7, #32]
 800956e:	6a3a      	ldr	r2, [r7, #32]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	429a      	cmp	r2, r3
 8009574:	d3e6      	bcc.n	8009544 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009576:	8bfb      	ldrh	r3, [r7, #30]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01e      	beq.n	80095ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009586:	461a      	mov	r2, r3
 8009588:	f107 0310 	add.w	r3, r7, #16
 800958c:	6812      	ldr	r2, [r2, #0]
 800958e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
 800959c:	b2da      	uxtb	r2, r3
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	701a      	strb	r2, [r3, #0]
      i++;
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	3301      	adds	r3, #1
 80095a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	3301      	adds	r3, #1
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095ae:	8bfb      	ldrh	r3, [r7, #30]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095b4:	8bfb      	ldrh	r3, [r7, #30]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1ea      	bne.n	8009590 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095bc:	4618      	mov	r0, r3
 80095be:	372c      	adds	r7, #44	; 0x2c
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4013      	ands	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095e0:	68fb      	ldr	r3, [r7, #12]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	f003 0301 	and.w	r3, r3, #1
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3301      	adds	r3, #1
 800961c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a13      	ldr	r2, [pc, #76]	; (8009670 <USB_CoreReset+0x64>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d901      	bls.n	800962a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e01b      	b.n	8009662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	daf2      	bge.n	8009618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f043 0201 	orr.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4a09      	ldr	r2, [pc, #36]	; (8009670 <USB_CoreReset+0x64>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d901      	bls.n	8009654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e006      	b.n	8009662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b01      	cmp	r3, #1
 800965e:	d0f0      	beq.n	8009642 <USB_CoreReset+0x36>

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	00030d40 	.word	0x00030d40

08009674 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009674:	b084      	sub	sp, #16
 8009676:	b580      	push	{r7, lr}
 8009678:	b086      	sub	sp, #24
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009694:	461a      	mov	r2, r3
 8009696:	2300      	movs	r3, #0
 8009698:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d018      	beq.n	80096fc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d10a      	bne.n	80096e6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096de:	f043 0304 	orr.w	r3, r3, #4
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e014      	b.n	8009710 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096f4:	f023 0304 	bic.w	r3, r3, #4
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e009      	b.n	8009710 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800970a:	f023 0304 	bic.w	r3, r3, #4
 800970e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009710:	2110      	movs	r1, #16
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fe5e 	bl	80093d4 <USB_FlushTxFifo>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fe8a 	bl	800943c <USB_FlushRxFifo>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	e015      	b.n	8009764 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 33ff 	mov.w	r3, #4294967295
 800974a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009758:	461a      	mov	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	429a      	cmp	r2, r3
 800976a:	d3e5      	bcc.n	8009738 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800978c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a13      	ldr	r2, [pc, #76]	; (80097e0 <USB_HostInit+0x16c>)
 8009792:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <USB_HostInit+0x170>)
 8009798:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800979c:	e009      	b.n	80097b2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <USB_HostInit+0x174>)
 80097a8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a0f      	ldr	r2, [pc, #60]	; (80097ec <USB_HostInit+0x178>)
 80097ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d105      	bne.n	80097c4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f043 0210 	orr.w	r2, r3, #16
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699a      	ldr	r2, [r3, #24]
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <USB_HostInit+0x17c>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097dc:	b004      	add	sp, #16
 80097de:	4770      	bx	lr
 80097e0:	01000200 	.word	0x01000200
 80097e4:	00e00300 	.word	0x00e00300
 80097e8:	00600080 	.word	0x00600080
 80097ec:	004000e0 	.word	0x004000e0
 80097f0:	a3200008 	.word	0xa3200008

080097f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009812:	f023 0303 	bic.w	r3, r3, #3
 8009816:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800982c:	4313      	orrs	r3, r2
 800982e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d107      	bne.n	8009846 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800983c:	461a      	mov	r2, r3
 800983e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009842:	6053      	str	r3, [r2, #4]
 8009844:	e009      	b.n	800985a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d106      	bne.n	800985a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009852:	461a      	mov	r2, r3
 8009854:	f241 7370 	movw	r3, #6000	; 0x1770
 8009858:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009888:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009896:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009898:	2064      	movs	r0, #100	; 0x64
 800989a:	f7f9 fd59 	bl	8003350 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80098ac:	200a      	movs	r0, #10
 80098ae:	f7f9 fd4f 	bl	8003350 <HAL_Delay>

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80098e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d109      	bne.n	8009900 <USB_DriveVbus+0x44>
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d106      	bne.n	8009900 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990a:	d109      	bne.n	8009920 <USB_DriveVbus+0x64>
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800991a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800991e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	0c5b      	lsrs	r3, r3, #17
 800994c:	f003 0303 	and.w	r3, r3, #3
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	b29b      	uxth	r3, r3
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	4608      	mov	r0, r1
 800998a:	4611      	mov	r1, r2
 800998c:	461a      	mov	r2, r3
 800998e:	4603      	mov	r3, r0
 8009990:	70fb      	strb	r3, [r7, #3]
 8009992:	460b      	mov	r3, r1
 8009994:	70bb      	strb	r3, [r7, #2]
 8009996:	4613      	mov	r3, r2
 8009998:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ae:	461a      	mov	r2, r3
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80099b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d87e      	bhi.n	8009abc <USB_HC_Init+0x13c>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <USB_HC_Init+0x44>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099d5 	.word	0x080099d5
 80099c8:	08009a7f 	.word	0x08009a7f
 80099cc:	080099d5 	.word	0x080099d5
 80099d0:	08009a41 	.word	0x08009a41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e0:	461a      	mov	r2, r3
 80099e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80099e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80099e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da10      	bge.n	8009a12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a0e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009a10:	e057      	b.n	8009ac2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d051      	beq.n	8009ac2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a3c:	60d3      	str	r3, [r2, #12]
      break;
 8009a3e:	e040      	b.n	8009ac2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009a52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009a54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da34      	bge.n	8009ac6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009a7c:	e023      	b.n	8009ac6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a7e:	78fb      	ldrb	r3, [r7, #3]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f240 2325 	movw	r3, #549	; 0x225
 8009a90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009a92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da17      	bge.n	8009aca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	0151      	lsls	r1, r2, #5
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	440a      	add	r2, r1
 8009ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ab4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009ab8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009aba:	e006      	b.n	8009aca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	77fb      	strb	r3, [r7, #31]
      break;
 8009ac0:	e004      	b.n	8009acc <USB_HC_Init+0x14c>
      break;
 8009ac2:	bf00      	nop
 8009ac4:	e002      	b.n	8009acc <USB_HC_Init+0x14c>
      break;
 8009ac6:	bf00      	nop
 8009ac8:	e000      	b.n	8009acc <USB_HC_Init+0x14c>
      break;
 8009aca:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae6:	f043 0302 	orr.w	r3, r3, #2
 8009aea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009af2:	699a      	ldr	r2, [r3, #24]
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	f003 030f 	and.w	r3, r3, #15
 8009afa:	2101      	movs	r1, #1
 8009afc:	fa01 f303 	lsl.w	r3, r1, r3
 8009b00:	6939      	ldr	r1, [r7, #16]
 8009b02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b06:	4313      	orrs	r3, r2
 8009b08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da03      	bge.n	8009b26 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b22:	61bb      	str	r3, [r7, #24]
 8009b24:	e001      	b.n	8009b2a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff feff 	bl	800992e <USB_GetHostSpeed>
 8009b30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d106      	bne.n	8009b48 <USB_HC_Init+0x1c8>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d003      	beq.n	8009b48 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	e001      	b.n	8009b4c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b4c:	787b      	ldrb	r3, [r7, #1]
 8009b4e:	059b      	lsls	r3, r3, #22
 8009b50:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b54:	78bb      	ldrb	r3, [r7, #2]
 8009b56:	02db      	lsls	r3, r3, #11
 8009b58:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b62:	049b      	lsls	r3, r3, #18
 8009b64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	0159      	lsls	r1, r3, #5
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	440b      	add	r3, r1
 8009b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b82:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b88:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d003      	beq.n	8009b9a <USB_HC_Init+0x21a>
 8009b92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d10f      	bne.n	8009bba <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08c      	sub	sp, #48	; 0x30
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d02d      	beq.n	8009c4a <USB_HC_StartXfer+0x86>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	791b      	ldrb	r3, [r3, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d129      	bne.n	8009c4a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d117      	bne.n	8009c2c <USB_HC_StartXfer+0x68>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	79db      	ldrb	r3, [r3, #7]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <USB_HC_StartXfer+0x48>
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	79db      	ldrb	r3, [r3, #7]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d10f      	bne.n	8009c2c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	6a3a      	ldr	r2, [r7, #32]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <USB_HC_StartXfer+0x86>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	795b      	ldrb	r3, [r3, #5]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d107      	bne.n	8009c4a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fa0f 	bl	800a064 <USB_DoPing>
      return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e0f8      	b.n	8009e3c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d018      	beq.n	8009c84 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	8912      	ldrh	r2, [r2, #8]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	8912      	ldrh	r2, [r2, #8]
 8009c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c66:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009c68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c6a:	8b7b      	ldrh	r3, [r7, #26]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d90b      	bls.n	8009c88 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009c70:	8b7b      	ldrh	r3, [r7, #26]
 8009c72:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	8912      	ldrh	r2, [r2, #8]
 8009c7a:	fb03 f202 	mul.w	r2, r3, r2
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	611a      	str	r2, [r3, #16]
 8009c82:	e001      	b.n	8009c88 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009c84:	2301      	movs	r3, #1
 8009c86:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	78db      	ldrb	r3, [r3, #3]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d007      	beq.n	8009ca0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	8912      	ldrh	r2, [r2, #8]
 8009c96:	fb03 f202 	mul.w	r2, r3, r2
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	611a      	str	r2, [r3, #16]
 8009c9e:	e003      	b.n	8009ca8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cb2:	04d9      	lsls	r1, r3, #19
 8009cb4:	4b63      	ldr	r3, [pc, #396]	; (8009e44 <USB_HC_StartXfer+0x280>)
 8009cb6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cb8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	7a9b      	ldrb	r3, [r3, #10]
 8009cbe:	075b      	lsls	r3, r3, #29
 8009cc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cc4:	69f9      	ldr	r1, [r7, #28]
 8009cc6:	0148      	lsls	r0, r1, #5
 8009cc8:	6a39      	ldr	r1, [r7, #32]
 8009cca:	4401      	add	r1, r0
 8009ccc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d009      	beq.n	8009cee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	68d9      	ldr	r1, [r3, #12]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cea:	460a      	mov	r2, r1
 8009cec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	6a3a      	ldr	r2, [r7, #32]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	7e7b      	ldrb	r3, [r7, #25]
 8009d36:	075b      	lsls	r3, r3, #29
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	0148      	lsls	r0, r1, #5
 8009d3c:	6a39      	ldr	r1, [r7, #32]
 8009d3e:	4401      	add	r1, r0
 8009d40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009d44:	4313      	orrs	r3, r2
 8009d46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d5e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	78db      	ldrb	r3, [r3, #3]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	e003      	b.n	8009d7a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d78:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8e:	461a      	mov	r2, r3
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e04e      	b.n	8009e3c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	78db      	ldrb	r3, [r3, #3]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d149      	bne.n	8009e3a <USB_HC_StartXfer+0x276>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d045      	beq.n	8009e3a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	79db      	ldrb	r3, [r3, #7]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d830      	bhi.n	8009e18 <USB_HC_StartXfer+0x254>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <USB_HC_StartXfer+0x1f8>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009df1 	.word	0x08009df1
 8009dc4:	08009dcd 	.word	0x08009dcd
 8009dc8:	08009df1 	.word	0x08009df1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	3303      	adds	r3, #3
 8009dd2:	089b      	lsrs	r3, r3, #2
 8009dd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009dd6:	8afa      	ldrh	r2, [r7, #22]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d91c      	bls.n	8009e1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	f043 0220 	orr.w	r2, r3, #32
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	619a      	str	r2, [r3, #24]
        }
        break;
 8009dee:	e015      	b.n	8009e1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	3303      	adds	r3, #3
 8009df6:	089b      	lsrs	r3, r3, #2
 8009df8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009dfa:	8afa      	ldrh	r2, [r7, #22]
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d90a      	bls.n	8009e20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e16:	e003      	b.n	8009e20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009e18:	bf00      	nop
 8009e1a:	e002      	b.n	8009e22 <USB_HC_StartXfer+0x25e>
        break;
 8009e1c:	bf00      	nop
 8009e1e:	e000      	b.n	8009e22 <USB_HC_StartXfer+0x25e>
        break;
 8009e20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	68d9      	ldr	r1, [r3, #12]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	785a      	ldrb	r2, [r3, #1]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2000      	movs	r0, #0
 8009e32:	9000      	str	r0, [sp, #0]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fb31 	bl	800949c <USB_WritePacket>
  }

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3728      	adds	r7, #40	; 0x28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	1ff80000 	.word	0x1ff80000

08009e48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	b29b      	uxth	r3, r3
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b089      	sub	sp, #36	; 0x24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0c9b      	lsrs	r3, r3, #18
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	0fdb      	lsrs	r3, r3, #31
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d104      	bne.n	8009ec4 <USB_HC_Halt+0x5a>
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e0c8      	b.n	800a056 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <USB_HC_Halt+0x66>
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d163      	bne.n	8009f98 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	0151      	lsls	r1, r2, #5
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 80ab 	bne.w	800a054 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d133      	bne.n	8009f72 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	0151      	lsls	r1, r2, #5
 8009f1c:	69fa      	ldr	r2, [r7, #28]
 8009f1e:	440a      	add	r2, r1
 8009f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f28:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	69fa      	ldr	r2, [r7, #28]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f48:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f56:	d81d      	bhi.n	8009f94 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f6e:	d0ec      	beq.n	8009f4a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f70:	e070      	b.n	800a054 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f92:	e05f      	b.n	800a054 <USB_HC_Halt+0x1ea>
            break;
 8009f94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f96:	e05d      	b.n	800a054 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d133      	bne.n	800a030 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fe6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a006:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a014:	d81d      	bhi.n	800a052 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a02c:	d0ec      	beq.n	800a008 <USB_HC_Halt+0x19e>
 800a02e:	e011      	b.n	800a054 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	4413      	add	r3, r2
 800a038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	440a      	add	r2, r1
 800a046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a04a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e000      	b.n	800a054 <USB_HC_Halt+0x1ea>
          break;
 800a052:	bf00      	nop
    }
  }

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3724      	adds	r7, #36	; 0x24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
	...

0800a064 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a078:	2301      	movs	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	04da      	lsls	r2, r3, #19
 800a080:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <USB_DoPing+0x74>)
 800a082:	4013      	ands	r3, r2
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a094:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	1ff80000 	.word	0x1ff80000

0800a0dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff f911 	bl	8009318 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0f6:	2110      	movs	r1, #16
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff f96b 	bl	80093d4 <USB_FlushTxFifo>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff f997 	bl	800943c <USB_FlushRxFifo>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a118:	2300      	movs	r3, #0
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e01f      	b.n	800a15e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a134:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a13c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a144:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a152:	461a      	mov	r2, r3
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	3301      	adds	r3, #1
 800a15c:	61bb      	str	r3, [r7, #24]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b0f      	cmp	r3, #15
 800a162:	d9dc      	bls.n	800a11e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a164:	2300      	movs	r3, #0
 800a166:	61bb      	str	r3, [r7, #24]
 800a168:	e034      	b.n	800a1d4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a180:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a190:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19e:	461a      	mov	r2, r3
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b0:	d80c      	bhi.n	800a1cc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c8:	d0ec      	beq.n	800a1a4 <USB_StopHost+0xc8>
 800a1ca:	e000      	b.n	800a1ce <USB_StopHost+0xf2>
        break;
 800a1cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d9c7      	bls.n	800a16a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff f880 	bl	80092f6 <USB_EnableGlobalInt>

  return ret;
 800a1f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b089      	sub	sp, #36	; 0x24
 800a204:	af04      	add	r7, sp, #16
 800a206:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a208:	2301      	movs	r3, #1
 800a20a:	2202      	movs	r2, #2
 800a20c:	2102      	movs	r1, #2
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fcb8 	bl	800ab84 <USBH_FindInterface>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2bff      	cmp	r3, #255	; 0xff
 800a21c:	d002      	beq.n	800a224 <USBH_CDC_InterfaceInit+0x24>
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d901      	bls.n	800a228 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	e13d      	b.n	800a4a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fc8d 	bl	800ab4c <USBH_SelectInterface>
 800a232:	4603      	mov	r3, r0
 800a234:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a23c:	2302      	movs	r3, #2
 800a23e:	e131      	b.n	800a4a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a246:	2050      	movs	r0, #80	; 0x50
 800a248:	f005 f828 	bl	800f29c <malloc>
 800a24c:	4603      	mov	r3, r0
 800a24e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	e11f      	b.n	800a4a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a264:	2250      	movs	r2, #80	; 0x50
 800a266:	2100      	movs	r1, #0
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f005 f835 	bl	800f2d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	211a      	movs	r1, #26
 800a274:	fb01 f303 	mul.w	r3, r1, r3
 800a278:	4413      	add	r3, r2
 800a27a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	b25b      	sxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	da15      	bge.n	800a2b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	211a      	movs	r1, #26
 800a28c:	fb01 f303 	mul.w	r3, r1, r3
 800a290:	4413      	add	r3, r2
 800a292:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a296:	781a      	ldrb	r2, [r3, #0]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	211a      	movs	r1, #26
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a2ac:	881a      	ldrh	r2, [r3, #0]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f002 f988 	bl	800c5ce <USBH_AllocPipe>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	7819      	ldrb	r1, [r3, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	7858      	ldrb	r0, [r3, #1]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	8952      	ldrh	r2, [r2, #10]
 800a2de:	9202      	str	r2, [sp, #8]
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	9201      	str	r2, [sp, #4]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4623      	mov	r3, r4
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f002 f940 	bl	800c570 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f004 ff1f 	bl	800f13c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a2fe:	2300      	movs	r3, #0
 800a300:	2200      	movs	r2, #0
 800a302:	210a      	movs	r1, #10
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fc3d 	bl	800ab84 <USBH_FindInterface>
 800a30a:	4603      	mov	r3, r0
 800a30c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	2bff      	cmp	r3, #255	; 0xff
 800a312:	d002      	beq.n	800a31a <USBH_CDC_InterfaceInit+0x11a>
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d901      	bls.n	800a31e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a31a:	2302      	movs	r3, #2
 800a31c:	e0c2      	b.n	800a4a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	211a      	movs	r1, #26
 800a324:	fb01 f303 	mul.w	r3, r1, r3
 800a328:	4413      	add	r3, r2
 800a32a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	da16      	bge.n	800a364 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	211a      	movs	r1, #26
 800a33c:	fb01 f303 	mul.w	r3, r1, r3
 800a340:	4413      	add	r3, r2
 800a342:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	211a      	movs	r1, #26
 800a352:	fb01 f303 	mul.w	r3, r1, r3
 800a356:	4413      	add	r3, r2
 800a358:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a35c:	881a      	ldrh	r2, [r3, #0]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	835a      	strh	r2, [r3, #26]
 800a362:	e015      	b.n	800a390 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	211a      	movs	r1, #26
 800a36a:	fb01 f303 	mul.w	r3, r1, r3
 800a36e:	4413      	add	r3, r2
 800a370:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	211a      	movs	r1, #26
 800a380:	fb01 f303 	mul.w	r3, r1, r3
 800a384:	4413      	add	r3, r2
 800a386:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a38a:	881a      	ldrh	r2, [r3, #0]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	211a      	movs	r1, #26
 800a396:	fb01 f303 	mul.w	r3, r1, r3
 800a39a:	4413      	add	r3, r2
 800a39c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	da16      	bge.n	800a3d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	211a      	movs	r1, #26
 800a3ae:	fb01 f303 	mul.w	r3, r1, r3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	211a      	movs	r1, #26
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3ce:	881a      	ldrh	r2, [r3, #0]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	835a      	strh	r2, [r3, #26]
 800a3d4:	e015      	b.n	800a402 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	211a      	movs	r1, #26
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3e6:	781a      	ldrb	r2, [r3, #0]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	211a      	movs	r1, #26
 800a3f2:	fb01 f303 	mul.w	r3, r1, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3fc:	881a      	ldrh	r2, [r3, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	7b9b      	ldrb	r3, [r3, #14]
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f002 f8e0 	bl	800c5ce <USBH_AllocPipe>
 800a40e:	4603      	mov	r3, r0
 800a410:	461a      	mov	r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	7bdb      	ldrb	r3, [r3, #15]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f002 f8d6 	bl	800c5ce <USBH_AllocPipe>
 800a422:	4603      	mov	r3, r0
 800a424:	461a      	mov	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	7b59      	ldrb	r1, [r3, #13]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	7b98      	ldrb	r0, [r3, #14]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	8b12      	ldrh	r2, [r2, #24]
 800a442:	9202      	str	r2, [sp, #8]
 800a444:	2202      	movs	r2, #2
 800a446:	9201      	str	r2, [sp, #4]
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4623      	mov	r3, r4
 800a44c:	4602      	mov	r2, r0
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f002 f88e 	bl	800c570 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	7b19      	ldrb	r1, [r3, #12]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	7bd8      	ldrb	r0, [r3, #15]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	8b52      	ldrh	r2, [r2, #26]
 800a46c:	9202      	str	r2, [sp, #8]
 800a46e:	2202      	movs	r2, #2
 800a470:	9201      	str	r2, [sp, #4]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4623      	mov	r3, r4
 800a476:	4602      	mov	r2, r0
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f002 f879 	bl	800c570 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	7b5b      	ldrb	r3, [r3, #13]
 800a48a:	2200      	movs	r2, #0
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f004 fe54 	bl	800f13c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	7b1b      	ldrb	r3, [r3, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f004 fe4d 	bl	800f13c <USBH_LL_SetToggle>

  return USBH_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd90      	pop	{r4, r7, pc}

0800a4ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00e      	beq.n	800a4e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 f86e 	bl	800c5ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f002 f899 	bl	800c610 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	7b1b      	ldrb	r3, [r3, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00e      	beq.n	800a50a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	7b1b      	ldrb	r3, [r3, #12]
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f002 f85b 	bl	800c5ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7b1b      	ldrb	r3, [r3, #12]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f002 f886 	bl	800c610 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	7b5b      	ldrb	r3, [r3, #13]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00e      	beq.n	800a530 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	7b5b      	ldrb	r3, [r3, #13]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 f848 	bl	800c5ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	7b5b      	ldrb	r3, [r3, #13]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f002 f873 	bl	800c610 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	4618      	mov	r0, r3
 800a546:	f004 feb1 	bl	800f2ac <free>
    phost->pActiveClass->pData = 0U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a550:	2200      	movs	r2, #0
 800a552:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3340      	adds	r3, #64	; 0x40
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f8b1 	bl	800a6de <GetLineCoding>
 800a57c:	4603      	mov	r3, r0
 800a57e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a58c:	2102      	movs	r1, #2
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a592:	7afb      	ldrb	r3, [r7, #11]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d877      	bhi.n	800a6b0 <USBH_CDC_Process+0x114>
 800a5c0:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <USBH_CDC_Process+0x2c>)
 800a5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c6:	bf00      	nop
 800a5c8:	0800a5dd 	.word	0x0800a5dd
 800a5cc:	0800a5e3 	.word	0x0800a5e3
 800a5d0:	0800a613 	.word	0x0800a613
 800a5d4:	0800a687 	.word	0x0800a687
 800a5d8:	0800a695 	.word	0x0800a695
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e0:	e06d      	b.n	800a6be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f897 	bl	800a71c <SetLineCoding>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d104      	bne.n	800a602 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a600:	e058      	b.n	800a6b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d055      	beq.n	800a6b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2204      	movs	r2, #4
 800a60c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a610:	e050      	b.n	800a6b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	3340      	adds	r3, #64	; 0x40
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f860 	bl	800a6de <GetLineCoding>
 800a61e:	4603      	mov	r3, r0
 800a620:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d126      	bne.n	800a676 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d13b      	bne.n	800a6b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d133      	bne.n	800a6b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d12b      	bne.n	800a6b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a668:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d124      	bne.n	800a6b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f982 	bl	800a978 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a674:	e020      	b.n	800a6b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d01d      	beq.n	800a6b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2204      	movs	r2, #4
 800a680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a684:	e018      	b.n	800a6b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f867 	bl	800a75a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f8f6 	bl	800a87e <CDC_ProcessReception>
      break;
 800a692:	e014      	b.n	800a6be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a694:	2100      	movs	r1, #0
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f95b 	bl	800b952 <USBH_ClrFeature>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a6ae:	e005      	b.n	800a6bc <USBH_CDC_Process+0x120>

    default:
      break;
 800a6b0:	bf00      	nop
 800a6b2:	e004      	b.n	800a6be <USBH_CDC_Process+0x122>
      break;
 800a6b4:	bf00      	nop
 800a6b6:	e002      	b.n	800a6be <USBH_CDC_Process+0x122>
      break;
 800a6b8:	bf00      	nop
 800a6ba:	e000      	b.n	800a6be <USBH_CDC_Process+0x122>
      break;
 800a6bc:	bf00      	nop

  }

  return status;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	22a1      	movs	r2, #161	; 0xa1
 800a6ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2221      	movs	r2, #33	; 0x21
 800a6f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2207      	movs	r2, #7
 800a704:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2207      	movs	r2, #7
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 fbed 	bl	800beec <USBH_CtlReq>
 800a712:	4603      	mov	r3, r0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2221      	movs	r2, #33	; 0x21
 800a72a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2207      	movs	r2, #7
 800a742:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2207      	movs	r2, #7
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fbce 	bl	800beec <USBH_CtlReq>
 800a750:	4603      	mov	r3, r0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b086      	sub	sp, #24
 800a75e:	af02      	add	r7, sp, #8
 800a760:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a776:	2b01      	cmp	r3, #1
 800a778:	d002      	beq.n	800a780 <CDC_ProcessTransmission+0x26>
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d023      	beq.n	800a7c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a77e:	e07a      	b.n	800a876 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	8b12      	ldrh	r2, [r2, #24]
 800a788:	4293      	cmp	r3, r2
 800a78a:	d90b      	bls.n	800a7a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	69d9      	ldr	r1, [r3, #28]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8b1a      	ldrh	r2, [r3, #24]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	7b5b      	ldrb	r3, [r3, #13]
 800a798:	2001      	movs	r0, #1
 800a79a:	9000      	str	r0, [sp, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 fea4 	bl	800c4ea <USBH_BulkSendData>
 800a7a2:	e00b      	b.n	800a7bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	7b5b      	ldrb	r3, [r3, #13]
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	9000      	str	r0, [sp, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 fe97 	bl	800c4ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a7c4:	e057      	b.n	800a876 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	7b5b      	ldrb	r3, [r3, #13]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f004 fc8b 	bl	800f0e8 <USBH_LL_GetURBState>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d136      	bne.n	800a84a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	8b12      	ldrh	r2, [r2, #24]
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d90e      	bls.n	800a806 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	8b12      	ldrh	r2, [r2, #24]
 800a7f0:	1a9a      	subs	r2, r3, r2
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	8b12      	ldrh	r2, [r2, #24]
 800a7fe:	441a      	add	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	61da      	str	r2, [r3, #28]
 800a804:	e002      	b.n	800a80c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a81c:	e006      	b.n	800a82c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f892 	bl	800a950 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2204      	movs	r2, #4
 800a830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a840:	2200      	movs	r2, #0
 800a842:	4619      	mov	r1, r3
 800a844:	f001 ffe0 	bl	800c808 <osMessagePut>
      break;
 800a848:	e014      	b.n	800a874 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d111      	bne.n	800a874 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2204      	movs	r2, #4
 800a85c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a86c:	2200      	movs	r2, #0
 800a86e:	4619      	mov	r1, r3
 800a870:	f001 ffca 	bl	800c808 <osMessagePut>
      break;
 800a874:	bf00      	nop
  }
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a890:	2300      	movs	r3, #0
 800a892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d002      	beq.n	800a8a4 <CDC_ProcessReception+0x26>
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d00e      	beq.n	800a8c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a8a2:	e051      	b.n	800a948 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	6a19      	ldr	r1, [r3, #32]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	8b5a      	ldrh	r2, [r3, #26]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	7b1b      	ldrb	r3, [r3, #12]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fe3f 	bl	800c534 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2204      	movs	r2, #4
 800a8ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a8be:	e043      	b.n	800a948 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	7b1b      	ldrb	r3, [r3, #12]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f004 fc0e 	bl	800f0e8 <USBH_LL_GetURBState>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a8d0:	7cfb      	ldrb	r3, [r7, #19]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d137      	bne.n	800a946 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	7b1b      	ldrb	r3, [r3, #12]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f004 fb71 	bl	800efc4 <USBH_LL_GetLastXferSize>
 800a8e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d016      	beq.n	800a91c <CDC_ProcessReception+0x9e>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	8b5b      	ldrh	r3, [r3, #26]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d910      	bls.n	800a91c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	1ad2      	subs	r2, r2, r3
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	6a1a      	ldr	r2, [r3, #32]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	441a      	add	r2, r3
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2203      	movs	r2, #3
 800a916:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a91a:	e006      	b.n	800a92a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f81d 	bl	800a964 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a93e:	2200      	movs	r2, #0
 800a940:	4619      	mov	r1, r3
 800a942:	f001 ff61 	bl	800c808 <osMessagePut>
      break;
 800a946:	bf00      	nop
  }
}
 800a948:	bf00      	nop
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a98c:	b5b0      	push	{r4, r5, r7, lr}
 800a98e:	b090      	sub	sp, #64	; 0x40
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e04d      	b.n	800aa40 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	79fa      	ldrb	r2, [r7, #7]
 800a9a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 f847 	bl	800aa50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a9f0:	4b15      	ldr	r3, [pc, #84]	; (800aa48 <USBH_Init+0xbc>)
 800a9f2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a9f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a9fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa00:	2100      	movs	r1, #0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 fed7 	bl	800c7b6 <osMessageCreate>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800aa10:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <USBH_Init+0xc0>)
 800aa12:	f107 0414 	add.w	r4, r7, #20
 800aa16:	461d      	mov	r5, r3
 800aa18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800aa24:	f107 0314 	add.w	r3, r7, #20
 800aa28:	68f9      	ldr	r1, [r7, #12]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f001 fe63 	bl	800c6f6 <osThreadCreate>
 800aa30:	4602      	mov	r2, r0
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f004 fa05 	bl	800ee48 <USBH_LL_Init>

  return USBH_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3740      	adds	r7, #64	; 0x40
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bdb0      	pop	{r4, r5, r7, pc}
 800aa48:	0800f7c0 	.word	0x0800f7c0
 800aa4c:	0800f7d0 	.word	0x0800f7d0

0800aa50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e009      	b.n	800aa76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	33e0      	adds	r3, #224	; 0xe0
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b0f      	cmp	r3, #15
 800aa7a:	d9f2      	bls.n	800aa62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e009      	b.n	800aa96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa9c:	d3f1      	bcc.n	800aa82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2240      	movs	r2, #64	; 0x40
 800aac2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d016      	beq.n	800ab3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10e      	bne.n	800ab34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab1c:	1c59      	adds	r1, r3, #1
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	33de      	adds	r3, #222	; 0xde
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	e004      	b.n	800ab3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab34:	2302      	movs	r3, #2
 800ab36:	73fb      	strb	r3, [r7, #15]
 800ab38:	e001      	b.n	800ab3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d204      	bcs.n	800ab72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ab70:	e001      	b.n	800ab76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab72:	2302      	movs	r3, #2
 800ab74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	461a      	mov	r2, r3
 800ab92:	4603      	mov	r3, r0
 800ab94:	70fb      	strb	r3, [r7, #3]
 800ab96:	460b      	mov	r3, r1
 800ab98:	70bb      	strb	r3, [r7, #2]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800abac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abae:	e025      	b.n	800abfc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	221a      	movs	r2, #26
 800abb4:	fb02 f303 	mul.w	r3, r2, r3
 800abb8:	3308      	adds	r3, #8
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4413      	add	r3, r2
 800abbe:	3302      	adds	r3, #2
 800abc0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	795b      	ldrb	r3, [r3, #5]
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d002      	beq.n	800abd2 <USBH_FindInterface+0x4e>
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	2bff      	cmp	r3, #255	; 0xff
 800abd0:	d111      	bne.n	800abf6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abd6:	78ba      	ldrb	r2, [r7, #2]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d002      	beq.n	800abe2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abdc:	78bb      	ldrb	r3, [r7, #2]
 800abde:	2bff      	cmp	r3, #255	; 0xff
 800abe0:	d109      	bne.n	800abf6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abe6:	787a      	ldrb	r2, [r7, #1]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d002      	beq.n	800abf2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abec:	787b      	ldrb	r3, [r7, #1]
 800abee:	2bff      	cmp	r3, #255	; 0xff
 800abf0:	d101      	bne.n	800abf6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	e006      	b.n	800ac04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	3301      	adds	r3, #1
 800abfa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d9d6      	bls.n	800abb0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac02:	23ff      	movs	r3, #255	; 0xff
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	371c      	adds	r7, #28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f004 f95b 	bl	800eed4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ac1e:	2101      	movs	r1, #1
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f004 fa74 	bl	800f10e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af04      	add	r7, sp, #16
 800ac36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d102      	bne.n	800ac52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2203      	movs	r2, #3
 800ac50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b0b      	cmp	r3, #11
 800ac5a:	f200 8247 	bhi.w	800b0ec <USBH_Process+0x4bc>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <USBH_Process+0x34>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac95 	.word	0x0800ac95
 800ac68:	0800ace3 	.word	0x0800ace3
 800ac6c:	0800ad67 	.word	0x0800ad67
 800ac70:	0800b06b 	.word	0x0800b06b
 800ac74:	0800b0ed 	.word	0x0800b0ed
 800ac78:	0800ae27 	.word	0x0800ae27
 800ac7c:	0800aff5 	.word	0x0800aff5
 800ac80:	0800ae79 	.word	0x0800ae79
 800ac84:	0800aeb5 	.word	0x0800aeb5
 800ac88:	0800aeef 	.word	0x0800aeef
 800ac8c:	0800af4d 	.word	0x0800af4d
 800ac90:	0800b053 	.word	0x0800b053
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 8227 	beq.w	800b0f0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aca8:	20c8      	movs	r0, #200	; 0xc8
 800acaa:	f004 fa77 	bl	800f19c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f004 f96d 	bl	800ef8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acd8:	2200      	movs	r2, #0
 800acda:	4619      	mov	r1, r3
 800acdc:	f001 fd94 	bl	800c808 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ace0:	e206      	b.n	800b0f0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d107      	bne.n	800acfc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e025      	b.n	800ad48 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad06:	d914      	bls.n	800ad32 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad0e:	3301      	adds	r3, #1
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d903      	bls.n	800ad2a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	220d      	movs	r2, #13
 800ad26:	701a      	strb	r2, [r3, #0]
 800ad28:	e00e      	b.n	800ad48 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e00a      	b.n	800ad48 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad38:	f103 020a 	add.w	r2, r3, #10
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ad42:	200a      	movs	r0, #10
 800ad44:	f004 fa2a 	bl	800f19c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f001 fd52 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad64:	e1cb      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad76:	2104      	movs	r1, #4
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad7c:	2064      	movs	r0, #100	; 0x64
 800ad7e:	f004 fa0d 	bl	800f19c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f004 f8dc 	bl	800ef40 <USBH_LL_GetSpeed>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2205      	movs	r2, #5
 800ad96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad98:	2100      	movs	r1, #0
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 fc17 	bl	800c5ce <USBH_AllocPipe>
 800ada0:	4603      	mov	r3, r0
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 fc0f 	bl	800c5ce <USBH_AllocPipe>
 800adb0:	4603      	mov	r3, r0
 800adb2:	461a      	mov	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	7919      	ldrb	r1, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adcc:	b292      	uxth	r2, r2
 800adce:	9202      	str	r2, [sp, #8]
 800add0:	2200      	movs	r2, #0
 800add2:	9201      	str	r2, [sp, #4]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	4603      	mov	r3, r0
 800add8:	2280      	movs	r2, #128	; 0x80
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f001 fbc8 	bl	800c570 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7959      	ldrb	r1, [r3, #5]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adf4:	b292      	uxth	r2, r2
 800adf6:	9202      	str	r2, [sp, #8]
 800adf8:	2200      	movs	r2, #0
 800adfa:	9201      	str	r2, [sp, #4]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4603      	mov	r3, r0
 800ae00:	2200      	movs	r2, #0
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 fbb4 	bl	800c570 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f001 fcf2 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae24:	e16b      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f96e 	bl	800b108 <USBH_HandleEnum>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f040 815d 	bne.w	800b0f4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d103      	bne.n	800ae54 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2208      	movs	r2, #8
 800ae50:	701a      	strb	r2, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2207      	movs	r2, #7
 800ae58:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2205      	movs	r2, #5
 800ae5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4619      	mov	r1, r3
 800ae72:	f001 fcc9 	bl	800c808 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae76:	e13d      	b.n	800b0f4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 813a 	beq.w	800b0f8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2208      	movs	r2, #8
 800ae94:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2205      	movs	r2, #5
 800ae9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	f001 fcab 	bl	800c808 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800aeb2:	e121      	b.n	800b0f8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fd00 	bl	800b8c4 <USBH_SetCfg>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d102      	bne.n	800aed0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2209      	movs	r2, #9
 800aece:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aee4:	2200      	movs	r2, #0
 800aee6:	4619      	mov	r1, r3
 800aee8:	f001 fc8e 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aeec:	e107      	b.n	800b0fe <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aef4:	f003 0320 	and.w	r3, r3, #32
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d015      	beq.n	800af28 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800aefc:	2101      	movs	r1, #1
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fd03 	bl	800b90a <USBH_SetFeature>
 800af04:	4603      	mov	r3, r0
 800af06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	220a      	movs	r2, #10
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e00a      	b.n	800af2e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d106      	bne.n	800af2e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	220a      	movs	r2, #10
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	e002      	b.n	800af2e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	220a      	movs	r2, #10
 800af2c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af42:	2200      	movs	r2, #0
 800af44:	4619      	mov	r1, r3
 800af46:	f001 fc5f 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af4a:	e0d8      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af52:	2b00      	cmp	r3, #0
 800af54:	d03f      	beq.n	800afd6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
 800af62:	e016      	b.n	800af92 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800af64:	7bfa      	ldrb	r2, [r7, #15]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32de      	adds	r2, #222	; 0xde
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	791a      	ldrb	r2, [r3, #4]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800af76:	429a      	cmp	r2, r3
 800af78:	d108      	bne.n	800af8c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800af7a:	7bfa      	ldrb	r2, [r7, #15]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	32de      	adds	r2, #222	; 0xde
 800af80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800af8a:	e005      	b.n	800af98 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	3301      	adds	r3, #1
 800af90:	73fb      	strb	r3, [r7, #15]
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0e5      	beq.n	800af64 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d016      	beq.n	800afd0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	4798      	blx	r3
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d109      	bne.n	800afc8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2206      	movs	r2, #6
 800afb8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afc0:	2103      	movs	r1, #3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
 800afc6:	e006      	b.n	800afd6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	220d      	movs	r2, #13
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	e002      	b.n	800afd6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	220d      	movs	r2, #13
 800afd4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2205      	movs	r2, #5
 800afda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afea:	2200      	movs	r2, #0
 800afec:	4619      	mov	r1, r3
 800afee:	f001 fc0b 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aff2:	e084      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d017      	beq.n	800b02e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	220b      	movs	r2, #11
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	e00a      	b.n	800b034 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d106      	bne.n	800b034 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	220d      	movs	r2, #13
 800b02a:	701a      	strb	r2, [r3, #0]
 800b02c:	e002      	b.n	800b034 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	220d      	movs	r2, #13
 800b032:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2205      	movs	r2, #5
 800b038:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b048:	2200      	movs	r2, #0
 800b04a:	4619      	mov	r1, r3
 800b04c:	f001 fbdc 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b050:	e055      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d04f      	beq.n	800b0fc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
      }
      break;
 800b068:	e048      	b.n	800b0fc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fcec 	bl	800aa50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d009      	beq.n	800b096 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d005      	beq.n	800b0ac <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0a6:	2105      	movs	r1, #5
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d107      	bne.n	800b0c8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff fda5 	bl	800ac10 <USBH_Start>
 800b0c6:	e002      	b.n	800b0ce <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f003 ff03 	bl	800eed4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	f001 fb8f 	bl	800c808 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b0ea:	e008      	b.n	800b0fe <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b0ec:	bf00      	nop
 800b0ee:	e006      	b.n	800b0fe <USBH_Process+0x4ce>
      break;
 800b0f0:	bf00      	nop
 800b0f2:	e004      	b.n	800b0fe <USBH_Process+0x4ce>
      break;
 800b0f4:	bf00      	nop
 800b0f6:	e002      	b.n	800b0fe <USBH_Process+0x4ce>
    break;
 800b0f8:	bf00      	nop
 800b0fa:	e000      	b.n	800b0fe <USBH_Process+0x4ce>
      break;
 800b0fc:	bf00      	nop
  }
  return USBH_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b110:	2301      	movs	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b114:	2301      	movs	r3, #1
 800b116:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	2b07      	cmp	r3, #7
 800b11e:	f200 8208 	bhi.w	800b532 <USBH_HandleEnum+0x42a>
 800b122:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <USBH_HandleEnum+0x20>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b149 	.word	0x0800b149
 800b12c:	0800b207 	.word	0x0800b207
 800b130:	0800b271 	.word	0x0800b271
 800b134:	0800b2ff 	.word	0x0800b2ff
 800b138:	0800b369 	.word	0x0800b369
 800b13c:	0800b3d9 	.word	0x0800b3d9
 800b140:	0800b475 	.word	0x0800b475
 800b144:	0800b4f3 	.word	0x0800b4f3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b148:	2108      	movs	r1, #8
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 faea 	bl	800b724 <USBH_Get_DevDesc>
 800b150:	4603      	mov	r3, r0
 800b152:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d130      	bne.n	800b1bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	7919      	ldrb	r1, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b17e:	b292      	uxth	r2, r2
 800b180:	9202      	str	r2, [sp, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	9201      	str	r2, [sp, #4]
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	4603      	mov	r3, r0
 800b18a:	2280      	movs	r2, #128	; 0x80
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f9ef 	bl	800c570 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7959      	ldrb	r1, [r3, #5]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1a6:	b292      	uxth	r2, r2
 800b1a8:	9202      	str	r2, [sp, #8]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	9201      	str	r2, [sp, #4]
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f001 f9db 	bl	800c570 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b1ba:	e1bc      	b.n	800b536 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	f040 81b9 	bne.w	800b536 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d903      	bls.n	800b1e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	220d      	movs	r2, #13
 800b1e2:	701a      	strb	r2, [r3, #0]
      break;
 800b1e4:	e1a7      	b.n	800b536 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	795b      	ldrb	r3, [r3, #5]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 fa0f 	bl	800c610 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	791b      	ldrb	r3, [r3, #4]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 fa09 	bl	800c610 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	701a      	strb	r2, [r3, #0]
      break;
 800b204:	e197      	b.n	800b536 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b206:	2112      	movs	r1, #18
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fa8b 	bl	800b724 <USBH_Get_DevDesc>
 800b20e:	4603      	mov	r3, r0
 800b210:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b21e:	e18c      	b.n	800b53a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b03      	cmp	r3, #3
 800b224:	f040 8189 	bne.w	800b53a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b22e:	3301      	adds	r3, #1
 800b230:	b2da      	uxtb	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d903      	bls.n	800b24a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	220d      	movs	r2, #13
 800b246:	701a      	strb	r2, [r3, #0]
      break;
 800b248:	e177      	b.n	800b53a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	795b      	ldrb	r3, [r3, #5]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 f9dd 	bl	800c610 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	791b      	ldrb	r3, [r3, #4]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f001 f9d7 	bl	800c610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
      break;
 800b26e:	e164      	b.n	800b53a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b270:	2101      	movs	r1, #1
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fb02 	bl	800b87c <USBH_SetAddress>
 800b278:	4603      	mov	r3, r0
 800b27a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d132      	bne.n	800b2e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b282:	2002      	movs	r0, #2
 800b284:	f003 ff8a 	bl	800f19c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2203      	movs	r2, #3
 800b294:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	7919      	ldrb	r1, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	9202      	str	r2, [sp, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	9201      	str	r2, [sp, #4]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2280      	movs	r2, #128	; 0x80
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f001 f959 	bl	800c570 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	7959      	ldrb	r1, [r3, #5]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2d2:	b292      	uxth	r2, r2
 800b2d4:	9202      	str	r2, [sp, #8]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	9201      	str	r2, [sp, #4]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2200      	movs	r2, #0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 f945 	bl	800c570 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2e6:	e12a      	b.n	800b53e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2e8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	f040 8127 	bne.w	800b53e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	220d      	movs	r2, #13
 800b2f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	705a      	strb	r2, [r3, #1]
      break;
 800b2fc:	e11f      	b.n	800b53e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b2fe:	2109      	movs	r1, #9
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa37 	bl	800b774 <USBH_Get_CfgDesc>
 800b306:	4603      	mov	r3, r0
 800b308:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2204      	movs	r2, #4
 800b314:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b316:	e114      	b.n	800b542 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	f040 8111 	bne.w	800b542 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b326:	3301      	adds	r3, #1
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b336:	2b03      	cmp	r3, #3
 800b338:	d903      	bls.n	800b342 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	220d      	movs	r2, #13
 800b33e:	701a      	strb	r2, [r3, #0]
      break;
 800b340:	e0ff      	b.n	800b542 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	795b      	ldrb	r3, [r3, #5]
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 f961 	bl	800c610 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	791b      	ldrb	r3, [r3, #4]
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 f95b 	bl	800c610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
      break;
 800b366:	e0ec      	b.n	800b542 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f9ff 	bl	800b774 <USBH_Get_CfgDesc>
 800b376:	4603      	mov	r3, r0
 800b378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d103      	bne.n	800b388 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2205      	movs	r2, #5
 800b384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b386:	e0de      	b.n	800b546 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	f040 80db 	bne.w	800b546 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b396:	3301      	adds	r3, #1
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d903      	bls.n	800b3b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220d      	movs	r2, #13
 800b3ae:	701a      	strb	r2, [r3, #0]
      break;
 800b3b0:	e0c9      	b.n	800b546 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	795b      	ldrb	r3, [r3, #5]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 f929 	bl	800c610 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	791b      	ldrb	r3, [r3, #4]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f001 f923 	bl	800c610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
      break;
 800b3d6:	e0b6      	b.n	800b546 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d036      	beq.n	800b450 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b3ee:	23ff      	movs	r3, #255	; 0xff
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f9e3 	bl	800b7bc <USBH_Get_StringDesc>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d111      	bne.n	800b424 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2206      	movs	r2, #6
 800b404:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2205      	movs	r2, #5
 800b40a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b41a:	2200      	movs	r2, #0
 800b41c:	4619      	mov	r1, r3
 800b41e:	f001 f9f3 	bl	800c808 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b422:	e092      	b.n	800b54a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	2b03      	cmp	r3, #3
 800b428:	f040 808f 	bne.w	800b54a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2206      	movs	r2, #6
 800b430:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2205      	movs	r2, #5
 800b436:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b446:	2200      	movs	r2, #0
 800b448:	4619      	mov	r1, r3
 800b44a:	f001 f9dd 	bl	800c808 <osMessagePut>
      break;
 800b44e:	e07c      	b.n	800b54a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2206      	movs	r2, #6
 800b454:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2205      	movs	r2, #5
 800b45a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b46a:	2200      	movs	r2, #0
 800b46c:	4619      	mov	r1, r3
 800b46e:	f001 f9cb 	bl	800c808 <osMessagePut>
      break;
 800b472:	e06a      	b.n	800b54a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d027      	beq.n	800b4ce <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b48a:	23ff      	movs	r3, #255	; 0xff
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f995 	bl	800b7bc <USBH_Get_StringDesc>
 800b492:	4603      	mov	r3, r0
 800b494:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2207      	movs	r2, #7
 800b4a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b4a2:	e054      	b.n	800b54e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d151      	bne.n	800b54e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2207      	movs	r2, #7
 800b4ae:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2205      	movs	r2, #5
 800b4b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	f001 f99e 	bl	800c808 <osMessagePut>
      break;
 800b4cc:	e03f      	b.n	800b54e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2207      	movs	r2, #7
 800b4d2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f001 f98c 	bl	800c808 <osMessagePut>
      break;
 800b4f0:	e02d      	b.n	800b54e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d017      	beq.n	800b52c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b508:	23ff      	movs	r3, #255	; 0xff
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f956 	bl	800b7bc <USBH_Get_StringDesc>
 800b510:	4603      	mov	r3, r0
 800b512:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b514:	7bbb      	ldrb	r3, [r7, #14]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d102      	bne.n	800b520 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b51e:	e018      	b.n	800b552 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	2b03      	cmp	r3, #3
 800b524:	d115      	bne.n	800b552 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
      break;
 800b52a:	e012      	b.n	800b552 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
      break;
 800b530:	e00f      	b.n	800b552 <USBH_HandleEnum+0x44a>

    default:
      break;
 800b532:	bf00      	nop
 800b534:	e00e      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b536:	bf00      	nop
 800b538:	e00c      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b53a:	bf00      	nop
 800b53c:	e00a      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b53e:	bf00      	nop
 800b540:	e008      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b542:	bf00      	nop
 800b544:	e006      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b546:	bf00      	nop
 800b548:	e004      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <USBH_HandleEnum+0x44c>
      break;
 800b552:	bf00      	nop
  }
  return Status;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop

0800b560 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b572:	bf00      	nop
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f804 	bl	800b5a2 <USBH_HandleSof>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b0b      	cmp	r3, #11
 800b5b2:	d10a      	bne.n	800b5ca <USBH_HandleSof+0x28>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d005      	beq.n	800b5ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3
  }
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f001 f905 	bl	800c808 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b5fe:	bf00      	nop
}
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b616:	bf00      	nop
}
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b656:	2200      	movs	r2, #0
 800b658:	4619      	mov	r1, r3
 800b65a:	f001 f8d5 	bl	800c808 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f003 fc3e 	bl	800ef0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	791b      	ldrb	r3, [r3, #4]
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 ffbb 	bl	800c610 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	795b      	ldrb	r3, [r3, #5]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 ffb5 	bl	800c610 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f001 f8a3 	bl	800c808 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b6da:	f107 030c 	add.w	r3, r7, #12
 800b6de:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f001 f8d0 	bl	800c888 <osMessageGet>
    if (event.status == osEventMessage)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b10      	cmp	r3, #16
 800b6ec:	d1f2      	bne.n	800b6d4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff fa9e 	bl	800ac30 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b6f4:	e7ee      	b.n	800b6d4 <USBH_Process_OS+0x8>

0800b6f6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b712:	2200      	movs	r2, #0
 800b714:	4619      	mov	r1, r3
 800b716:	f001 f877 	bl	800c808 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af02      	add	r7, sp, #8
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b736:	78fb      	ldrb	r3, [r7, #3]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	4613      	mov	r3, r2
 800b73e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b742:	2100      	movs	r1, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f864 	bl	800b812 <USBH_GetDescriptor>
 800b74a:	4603      	mov	r3, r0
 800b74c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	b292      	uxth	r2, r2
 800b764:	4619      	mov	r1, r3
 800b766:	f000 f918 	bl	800b99a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af02      	add	r7, sp, #8
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	331c      	adds	r3, #28
 800b784:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b786:	887b      	ldrh	r3, [r7, #2]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f83d 	bl	800b812 <USBH_GetDescriptor>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d107      	bne.n	800b7b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b7a2:	887b      	ldrh	r3, [r7, #2]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f987 	bl	800babc <USBH_ParseCfgDesc>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af02      	add	r7, sp, #8
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	607a      	str	r2, [r7, #4]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	72fb      	strb	r3, [r7, #11]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b7d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b7e0:	893b      	ldrh	r3, [r7, #8]
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 f812 	bl	800b812 <USBH_GetDescriptor>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b7fe:	893a      	ldrh	r2, [r7, #8]
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fb24 	bl	800be50 <USBH_ParseStringDesc>
  }

  return status;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	460b      	mov	r3, r1
 800b81e:	72fb      	strb	r3, [r7, #11]
 800b820:	4613      	mov	r3, r2
 800b822:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	789b      	ldrb	r3, [r3, #2]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d11c      	bne.n	800b866 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b832:	b2da      	uxtb	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2206      	movs	r2, #6
 800b83c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	893a      	ldrh	r2, [r7, #8]
 800b842:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b844:	893b      	ldrh	r3, [r7, #8]
 800b846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b84a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b84e:	d104      	bne.n	800b85a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f240 4209 	movw	r2, #1033	; 0x409
 800b856:	829a      	strh	r2, [r3, #20]
 800b858:	e002      	b.n	800b860 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8b3a      	ldrh	r2, [r7, #24]
 800b864:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b866:	8b3b      	ldrh	r3, [r7, #24]
 800b868:	461a      	mov	r2, r3
 800b86a:	6879      	ldr	r1, [r7, #4]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f000 fb3d 	bl	800beec <USBH_CtlReq>
 800b872:	4603      	mov	r3, r0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	789b      	ldrb	r3, [r3, #2]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d10f      	bne.n	800b8b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2205      	movs	r2, #5
 800b89a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fb19 	bl	800beec <USBH_CtlReq>
 800b8ba:	4603      	mov	r3, r0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	789b      	ldrb	r3, [r3, #2]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d10e      	bne.n	800b8f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2209      	movs	r2, #9
 800b8e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	887a      	ldrh	r2, [r7, #2]
 800b8e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 faf6 	bl	800beec <USBH_CtlReq>
 800b900:	4603      	mov	r3, r0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	460b      	mov	r3, r1
 800b914:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	789b      	ldrb	r3, [r3, #2]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d10f      	bne.n	800b93e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2203      	movs	r2, #3
 800b928:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fad2 	bl	800beec <USBH_CtlReq>
 800b948:	4603      	mov	r3, r0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	789b      	ldrb	r3, [r3, #2]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d10f      	bne.n	800b986 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b986:	2200      	movs	r2, #0
 800b988:	2100      	movs	r1, #0
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 faae 	bl	800beec <USBH_CtlReq>
 800b990:	4603      	mov	r3, r0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	781a      	ldrb	r2, [r3, #0]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	785a      	ldrb	r2, [r3, #1]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	021b      	lsls	r3, r3, #8
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	791a      	ldrb	r2, [r3, #4]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	795a      	ldrb	r2, [r3, #5]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	799a      	ldrb	r2, [r3, #6]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	79da      	ldrb	r2, [r3, #7]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	79db      	ldrb	r3, [r3, #7]
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	dc11      	bgt.n	800ba20 <USBH_ParseDevDesc+0x86>
 800b9fc:	2b08      	cmp	r3, #8
 800b9fe:	db16      	blt.n	800ba2e <USBH_ParseDevDesc+0x94>
 800ba00:	3b08      	subs	r3, #8
 800ba02:	2201      	movs	r2, #1
 800ba04:	fa02 f303 	lsl.w	r3, r2, r3
 800ba08:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ba0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bf14      	ite	ne
 800ba14:	2301      	movne	r3, #1
 800ba16:	2300      	moveq	r3, #0
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <USBH_ParseDevDesc+0x8a>
 800ba1e:	e006      	b.n	800ba2e <USBH_ParseDevDesc+0x94>
 800ba20:	2b40      	cmp	r3, #64	; 0x40
 800ba22:	d104      	bne.n	800ba2e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	79da      	ldrb	r2, [r3, #7]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	71da      	strb	r2, [r3, #7]
      break;
 800ba2c:	e003      	b.n	800ba36 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2240      	movs	r2, #64	; 0x40
 800ba32:	71da      	strb	r2, [r3, #7]
      break;
 800ba34:	bf00      	nop
  }

  if (length > 8U)
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d939      	bls.n	800bab0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	3309      	adds	r3, #9
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	4313      	orrs	r3, r2
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	330a      	adds	r3, #10
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	330b      	adds	r3, #11
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	330c      	adds	r3, #12
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	330d      	adds	r3, #13
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	7b9a      	ldrb	r2, [r3, #14]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	7bda      	ldrb	r2, [r3, #15]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	7c1a      	ldrb	r2, [r3, #16]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	7c5a      	ldrb	r2, [r3, #17]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	745a      	strb	r2, [r3, #17]
  }
}
 800bab0:	bf00      	nop
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08c      	sub	sp, #48	; 0x30
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	4613      	mov	r3, r2
 800bac8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bad0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	785a      	ldrb	r2, [r3, #1]
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3302      	adds	r3, #2
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	3303      	adds	r3, #3
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	021b      	lsls	r3, r3, #8
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4313      	orrs	r3, r2
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb18:	bf28      	it	cs
 800bb1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	791a      	ldrb	r2, [r3, #4]
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	795a      	ldrb	r2, [r3, #5]
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	799a      	ldrb	r2, [r3, #6]
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	79da      	ldrb	r2, [r3, #7]
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	7a1a      	ldrb	r2, [r3, #8]
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b09      	cmp	r3, #9
 800bb52:	d002      	beq.n	800bb5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	2209      	movs	r2, #9
 800bb58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	2b09      	cmp	r3, #9
 800bb5e:	f240 809d 	bls.w	800bc9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800bb62:	2309      	movs	r3, #9
 800bb64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bb6a:	e081      	b.n	800bc70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bb6c:	f107 0316 	add.w	r3, r7, #22
 800bb70:	4619      	mov	r1, r3
 800bb72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb74:	f000 f99f 	bl	800beb6 <USBH_GetNextDesc>
 800bb78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d176      	bne.n	800bc70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b09      	cmp	r3, #9
 800bb88:	d002      	beq.n	800bb90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	2209      	movs	r2, #9
 800bb8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bb90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb94:	221a      	movs	r2, #26
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	6a3a      	ldr	r2, [r7, #32]
 800bb9e:	4413      	add	r3, r2
 800bba0:	3302      	adds	r3, #2
 800bba2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bba6:	69f8      	ldr	r0, [r7, #28]
 800bba8:	f000 f87e 	bl	800bca8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bbb6:	e043      	b.n	800bc40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbb8:	f107 0316 	add.w	r3, r7, #22
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc0:	f000 f979 	bl	800beb6 <USBH_GetNextDesc>
 800bbc4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	785b      	ldrb	r3, [r3, #1]
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d138      	bne.n	800bc40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	795b      	ldrb	r3, [r3, #5]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d10f      	bne.n	800bbf6 <USBH_ParseCfgDesc+0x13a>
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	799b      	ldrb	r3, [r3, #6]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d10b      	bne.n	800bbf6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	79db      	ldrb	r3, [r3, #7]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10f      	bne.n	800bc06 <USBH_ParseCfgDesc+0x14a>
 800bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	2b09      	cmp	r3, #9
 800bbec:	d00b      	beq.n	800bc06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	2209      	movs	r2, #9
 800bbf2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bbf4:	e007      	b.n	800bc06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b07      	cmp	r3, #7
 800bbfc:	d004      	beq.n	800bc08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc00:	2207      	movs	r2, #7
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e000      	b.n	800bc08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc10:	3201      	adds	r2, #1
 800bc12:	00d2      	lsls	r2, r2, #3
 800bc14:	211a      	movs	r1, #26
 800bc16:	fb01 f303 	mul.w	r3, r1, r3
 800bc1a:	4413      	add	r3, r2
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	6a3a      	ldr	r2, [r7, #32]
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc28:	69b9      	ldr	r1, [r7, #24]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f86b 	bl	800bd06 <USBH_ParseEPDesc>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bc36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	791b      	ldrb	r3, [r3, #4]
 800bc44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d204      	bcs.n	800bc56 <USBH_ParseCfgDesc+0x19a>
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	885a      	ldrh	r2, [r3, #2]
 800bc50:	8afb      	ldrh	r3, [r7, #22]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d8b0      	bhi.n	800bbb8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	791b      	ldrb	r3, [r3, #4]
 800bc5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d201      	bcs.n	800bc66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e01c      	b.n	800bca0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800bc66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d805      	bhi.n	800bc84 <USBH_ParseCfgDesc+0x1c8>
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	885a      	ldrh	r2, [r3, #2]
 800bc7c:	8afb      	ldrh	r3, [r7, #22]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f63f af74 	bhi.w	800bb6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	791b      	ldrb	r3, [r3, #4]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	bf28      	it	cs
 800bc8c:	2302      	movcs	r3, #2
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d201      	bcs.n	800bc9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e001      	b.n	800bca0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800bc9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3730      	adds	r7, #48	; 0x30
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781a      	ldrb	r2, [r3, #0]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	785a      	ldrb	r2, [r3, #1]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	789a      	ldrb	r2, [r3, #2]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	78da      	ldrb	r2, [r3, #3]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	791a      	ldrb	r2, [r3, #4]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	795a      	ldrb	r2, [r3, #5]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	799a      	ldrb	r2, [r3, #6]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	79da      	ldrb	r2, [r3, #7]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	7a1a      	ldrb	r2, [r3, #8]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	721a      	strb	r2, [r3, #8]
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b087      	sub	sp, #28
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	781a      	ldrb	r2, [r3, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	785a      	ldrb	r2, [r3, #1]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	789a      	ldrb	r2, [r3, #2]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	78da      	ldrb	r2, [r3, #3]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3305      	adds	r3, #5
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	799a      	ldrb	r2, [r3, #6]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	889b      	ldrh	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d102      	bne.n	800bd68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bd62:	2303      	movs	r3, #3
 800bd64:	75fb      	strb	r3, [r7, #23]
 800bd66:	e033      	b.n	800bdd0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	889b      	ldrh	r3, [r3, #4]
 800bd6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd70:	f023 0307 	bic.w	r3, r3, #7
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	889b      	ldrh	r3, [r3, #4]
 800bd7e:	b21a      	sxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b299      	uxth	r1, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	3305      	adds	r3, #5
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	430b      	orrs	r3, r1
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d110      	bne.n	800bdc2 <USBH_ParseEPDesc+0xbc>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3304      	adds	r3, #4
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b299      	uxth	r1, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3305      	adds	r3, #5
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	021b      	lsls	r3, r3, #8
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdbe:	b21b      	sxth	r3, r3
 800bdc0:	e001      	b.n	800bdc6 <USBH_ParseEPDesc+0xc0>
 800bdc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	b21b      	sxth	r3, r3
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d116      	bne.n	800be08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	78db      	ldrb	r3, [r3, #3]
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d005      	beq.n	800bdf2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	78db      	ldrb	r3, [r3, #3]
 800bdea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d127      	bne.n	800be42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	799b      	ldrb	r3, [r3, #6]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <USBH_ParseEPDesc+0xfc>
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	799b      	ldrb	r3, [r3, #6]
 800bdfe:	2b10      	cmp	r3, #16
 800be00:	d91f      	bls.n	800be42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be02:	2303      	movs	r3, #3
 800be04:	75fb      	strb	r3, [r7, #23]
 800be06:	e01c      	b.n	800be42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	78db      	ldrb	r3, [r3, #3]
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	2b01      	cmp	r3, #1
 800be12:	d10a      	bne.n	800be2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	799b      	ldrb	r3, [r3, #6]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <USBH_ParseEPDesc+0x11e>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	799b      	ldrb	r3, [r3, #6]
 800be20:	2b10      	cmp	r3, #16
 800be22:	d90e      	bls.n	800be42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be24:	2303      	movs	r3, #3
 800be26:	75fb      	strb	r3, [r7, #23]
 800be28:	e00b      	b.n	800be42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	78db      	ldrb	r3, [r3, #3]
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	2b03      	cmp	r3, #3
 800be34:	d105      	bne.n	800be42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	799b      	ldrb	r3, [r3, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be3e:	2303      	movs	r3, #3
 800be40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800be42:	7dfb      	ldrb	r3, [r7, #23]
}
 800be44:	4618      	mov	r0, r3
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	4613      	mov	r3, r2
 800be5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b03      	cmp	r3, #3
 800be66:	d120      	bne.n	800beaa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	1e9a      	subs	r2, r3, #2
 800be6e:	88fb      	ldrh	r3, [r7, #6]
 800be70:	4293      	cmp	r3, r2
 800be72:	bf28      	it	cs
 800be74:	4613      	movcs	r3, r2
 800be76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3302      	adds	r3, #2
 800be7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800be7e:	2300      	movs	r3, #0
 800be80:	82fb      	strh	r3, [r7, #22]
 800be82:	e00b      	b.n	800be9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800be84:	8afb      	ldrh	r3, [r7, #22]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	781a      	ldrb	r2, [r3, #0]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	3301      	adds	r3, #1
 800be94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800be96:	8afb      	ldrh	r3, [r7, #22]
 800be98:	3302      	adds	r3, #2
 800be9a:	82fb      	strh	r3, [r7, #22]
 800be9c:	8afa      	ldrh	r2, [r7, #22]
 800be9e:	8abb      	ldrh	r3, [r7, #20]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d3ef      	bcc.n	800be84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
  }
}
 800beaa:	bf00      	nop
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b085      	sub	sp, #20
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	881a      	ldrh	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4413      	add	r3, r2
 800becc:	b29a      	uxth	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4413      	add	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bede:	68fb      	ldr	r3, [r7, #12]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	4613      	mov	r3, r2
 800bef8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800befa:	2301      	movs	r3, #1
 800befc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	789b      	ldrb	r3, [r3, #2]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d002      	beq.n	800bf0c <USBH_CtlReq+0x20>
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d01d      	beq.n	800bf46 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800bf0a:	e043      	b.n	800bf94 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	88fa      	ldrh	r2, [r7, #6]
 800bf16:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2202      	movs	r2, #2
 800bf22:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf24:	2301      	movs	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2203      	movs	r2, #3
 800bf2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4619      	mov	r1, r3
 800bf40:	f000 fc62 	bl	800c808 <osMessagePut>
      break;
 800bf44:	e026      	b.n	800bf94 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 f82a 	bl	800bfa0 <USBH_HandleControl>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d002      	beq.n	800bf5c <USBH_CtlReq+0x70>
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d106      	bne.n	800bf6a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	761a      	strb	r2, [r3, #24]
 800bf68:	e005      	b.n	800bf76 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d102      	bne.n	800bf76 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2201      	movs	r2, #1
 800bf74:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2203      	movs	r2, #3
 800bf7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f000 fc3b 	bl	800c808 <osMessagePut>
      break;
 800bf92:	bf00      	nop
  }
  return status;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3718      	adds	r7, #24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af02      	add	r7, sp, #8
 800bfa6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	7e1b      	ldrb	r3, [r3, #24]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	2b0a      	cmp	r3, #10
 800bfb8:	f200 8229 	bhi.w	800c40e <USBH_HandleControl+0x46e>
 800bfbc:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <USBH_HandleControl+0x24>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800bff1 	.word	0x0800bff1
 800bfc8:	0800c00b 	.word	0x0800c00b
 800bfcc:	0800c0ad 	.word	0x0800c0ad
 800bfd0:	0800c0d3 	.word	0x0800c0d3
 800bfd4:	0800c15f 	.word	0x0800c15f
 800bfd8:	0800c189 	.word	0x0800c189
 800bfdc:	0800c24b 	.word	0x0800c24b
 800bfe0:	0800c26d 	.word	0x0800c26d
 800bfe4:	0800c2ff 	.word	0x0800c2ff
 800bfe8:	0800c325 	.word	0x0800c325
 800bfec:	0800c3b7 	.word	0x0800c3b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f103 0110 	add.w	r1, r3, #16
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	795b      	ldrb	r3, [r3, #5]
 800bffa:	461a      	mov	r2, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fa17 	bl	800c430 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2202      	movs	r2, #2
 800c006:	761a      	strb	r2, [r3, #24]
      break;
 800c008:	e20c      	b.n	800c424 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	795b      	ldrb	r3, [r3, #5]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f003 f869 	bl	800f0e8 <USBH_LL_GetURBState>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d12c      	bne.n	800c07a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7c1b      	ldrb	r3, [r3, #16]
 800c024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c028:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8adb      	ldrh	r3, [r3, #22]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c032:	7b7b      	ldrb	r3, [r7, #13]
 800c034:	2b80      	cmp	r3, #128	; 0x80
 800c036:	d103      	bne.n	800c040 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2203      	movs	r2, #3
 800c03c:	761a      	strb	r2, [r3, #24]
 800c03e:	e00d      	b.n	800c05c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2205      	movs	r2, #5
 800c044:	761a      	strb	r2, [r3, #24]
 800c046:	e009      	b.n	800c05c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c048:	7b7b      	ldrb	r3, [r7, #13]
 800c04a:	2b80      	cmp	r3, #128	; 0x80
 800c04c:	d103      	bne.n	800c056 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2209      	movs	r2, #9
 800c052:	761a      	strb	r2, [r3, #24]
 800c054:	e002      	b.n	800c05c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2207      	movs	r2, #7
 800c05a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2203      	movs	r2, #3
 800c060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c070:	2200      	movs	r2, #0
 800c072:	4619      	mov	r1, r3
 800c074:	f000 fbc8 	bl	800c808 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c078:	e1cb      	b.n	800c412 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	2b04      	cmp	r3, #4
 800c07e:	d003      	beq.n	800c088 <USBH_HandleControl+0xe8>
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	2b02      	cmp	r3, #2
 800c084:	f040 81c5 	bne.w	800c412 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	220b      	movs	r2, #11
 800c08c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2203      	movs	r2, #3
 800c092:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f000 fbaf 	bl	800c808 <osMessagePut>
      break;
 800c0aa:	e1b2      	b.n	800c412 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6899      	ldr	r1, [r3, #8]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	899a      	ldrh	r2, [r3, #12]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f9f2 	bl	800c4ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2204      	movs	r2, #4
 800c0ce:	761a      	strb	r2, [r3, #24]
      break;
 800c0d0:	e1a8      	b.n	800c424 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	791b      	ldrb	r3, [r3, #4]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f003 f805 	bl	800f0e8 <USBH_LL_GetURBState>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d110      	bne.n	800c10a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2209      	movs	r2, #9
 800c0ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c102:	2200      	movs	r2, #0
 800c104:	4619      	mov	r1, r3
 800c106:	f000 fb7f 	bl	800c808 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	2b05      	cmp	r3, #5
 800c10e:	d110      	bne.n	800c132 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c110:	2303      	movs	r3, #3
 800c112:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2203      	movs	r2, #3
 800c118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c128:	2200      	movs	r2, #0
 800c12a:	4619      	mov	r1, r3
 800c12c:	f000 fb6c 	bl	800c808 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c130:	e171      	b.n	800c416 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b04      	cmp	r3, #4
 800c136:	f040 816e 	bne.w	800c416 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	220b      	movs	r2, #11
 800c13e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2203      	movs	r2, #3
 800c144:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c154:	2200      	movs	r2, #0
 800c156:	4619      	mov	r1, r3
 800c158:	f000 fb56 	bl	800c808 <osMessagePut>
      break;
 800c15c:	e15b      	b.n	800c416 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6899      	ldr	r1, [r3, #8]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	899a      	ldrh	r2, [r3, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	795b      	ldrb	r3, [r3, #5]
 800c16a:	2001      	movs	r0, #1
 800c16c:	9000      	str	r0, [sp, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f978 	bl	800c464 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2206      	movs	r2, #6
 800c184:	761a      	strb	r2, [r3, #24]
      break;
 800c186:	e14d      	b.n	800c424 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	795b      	ldrb	r3, [r3, #5]
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f002 ffaa 	bl	800f0e8 <USBH_LL_GetURBState>
 800c194:	4603      	mov	r3, r0
 800c196:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d111      	bne.n	800c1c2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2207      	movs	r2, #7
 800c1a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2203      	movs	r2, #3
 800c1a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f000 fb24 	bl	800c808 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c1c0:	e12b      	b.n	800c41a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d113      	bne.n	800c1f0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	220c      	movs	r2, #12
 800c1cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2203      	movs	r2, #3
 800c1d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f000 fb0d 	bl	800c808 <osMessagePut>
      break;
 800c1ee:	e114      	b.n	800c41a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d111      	bne.n	800c21a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2205      	movs	r2, #5
 800c1fa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2203      	movs	r2, #3
 800c200:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c210:	2200      	movs	r2, #0
 800c212:	4619      	mov	r1, r3
 800c214:	f000 faf8 	bl	800c808 <osMessagePut>
      break;
 800c218:	e0ff      	b.n	800c41a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b04      	cmp	r3, #4
 800c21e:	f040 80fc 	bne.w	800c41a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	220b      	movs	r2, #11
 800c226:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c228:	2302      	movs	r3, #2
 800c22a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2203      	movs	r2, #3
 800c230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c240:	2200      	movs	r2, #0
 800c242:	4619      	mov	r1, r3
 800c244:	f000 fae0 	bl	800c808 <osMessagePut>
      break;
 800c248:	e0e7      	b.n	800c41a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	791b      	ldrb	r3, [r3, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	2100      	movs	r1, #0
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f92b 	bl	800c4ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2208      	movs	r2, #8
 800c268:	761a      	strb	r2, [r3, #24]

      break;
 800c26a:	e0db      	b.n	800c424 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	791b      	ldrb	r3, [r3, #4]
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f002 ff38 	bl	800f0e8 <USBH_LL_GetURBState>
 800c278:	4603      	mov	r3, r0
 800c27a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d113      	bne.n	800c2aa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	220d      	movs	r2, #13
 800c286:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2203      	movs	r2, #3
 800c290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	f000 fab0 	bl	800c808 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2a8:	e0b9      	b.n	800c41e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d111      	bne.n	800c2d4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	220b      	movs	r2, #11
 800c2b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	f000 fa9b 	bl	800c808 <osMessagePut>
      break;
 800c2d2:	e0a4      	b.n	800c41e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	f040 80a1 	bne.w	800c41e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f000 fa86 	bl	800c808 <osMessagePut>
      break;
 800c2fc:	e08f      	b.n	800c41e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	795b      	ldrb	r3, [r3, #5]
 800c302:	2201      	movs	r2, #1
 800c304:	9200      	str	r2, [sp, #0]
 800c306:	2200      	movs	r2, #0
 800c308:	2100      	movs	r1, #0
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f8aa 	bl	800c464 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	220a      	movs	r2, #10
 800c320:	761a      	strb	r2, [r3, #24]
      break;
 800c322:	e07f      	b.n	800c424 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	795b      	ldrb	r3, [r3, #5]
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f002 fedc 	bl	800f0e8 <USBH_LL_GetURBState>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d113      	bne.n	800c362 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	220d      	movs	r2, #13
 800c342:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2203      	movs	r2, #3
 800c348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c358:	2200      	movs	r2, #0
 800c35a:	4619      	mov	r1, r3
 800c35c:	f000 fa54 	bl	800c808 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c360:	e05f      	b.n	800c422 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d111      	bne.n	800c38c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2209      	movs	r2, #9
 800c36c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2203      	movs	r2, #3
 800c372:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c382:	2200      	movs	r2, #0
 800c384:	4619      	mov	r1, r3
 800c386:	f000 fa3f 	bl	800c808 <osMessagePut>
      break;
 800c38a:	e04a      	b.n	800c422 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d147      	bne.n	800c422 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	220b      	movs	r2, #11
 800c396:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2203      	movs	r2, #3
 800c39c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f000 fa2a 	bl	800c808 <osMessagePut>
      break;
 800c3b4:	e035      	b.n	800c422 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	7e5b      	ldrb	r3, [r3, #25]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	765a      	strb	r2, [r3, #25]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7e5b      	ldrb	r3, [r3, #25]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d806      	bhi.n	800c3d8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c3d6:	e025      	b.n	800c424 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3de:	2106      	movs	r1, #6
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	795b      	ldrb	r3, [r3, #5]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f90d 	bl	800c610 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	791b      	ldrb	r3, [r3, #4]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f907 	bl	800c610 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c408:	2302      	movs	r3, #2
 800c40a:	73fb      	strb	r3, [r7, #15]
      break;
 800c40c:	e00a      	b.n	800c424 <USBH_HandleControl+0x484>

    default:
      break;
 800c40e:	bf00      	nop
 800c410:	e008      	b.n	800c424 <USBH_HandleControl+0x484>
      break;
 800c412:	bf00      	nop
 800c414:	e006      	b.n	800c424 <USBH_HandleControl+0x484>
      break;
 800c416:	bf00      	nop
 800c418:	e004      	b.n	800c424 <USBH_HandleControl+0x484>
      break;
 800c41a:	bf00      	nop
 800c41c:	e002      	b.n	800c424 <USBH_HandleControl+0x484>
      break;
 800c41e:	bf00      	nop
 800c420:	e000      	b.n	800c424 <USBH_HandleControl+0x484>
      break;
 800c422:	bf00      	nop
  }

  return status;
 800c424:	7bfb      	ldrb	r3, [r7, #15]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop

0800c430 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af04      	add	r7, sp, #16
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	4613      	mov	r3, r2
 800c43c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c43e:	79f9      	ldrb	r1, [r7, #7]
 800c440:	2300      	movs	r3, #0
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	2308      	movs	r3, #8
 800c446:	9302      	str	r3, [sp, #8]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	2300      	movs	r3, #0
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	2300      	movs	r3, #0
 800c452:	2200      	movs	r2, #0
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f002 fe16 	bl	800f086 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af04      	add	r7, sp, #16
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	4611      	mov	r1, r2
 800c470:	461a      	mov	r2, r3
 800c472:	460b      	mov	r3, r1
 800c474:	80fb      	strh	r3, [r7, #6]
 800c476:	4613      	mov	r3, r2
 800c478:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c488:	7979      	ldrb	r1, [r7, #5]
 800c48a:	7e3b      	ldrb	r3, [r7, #24]
 800c48c:	9303      	str	r3, [sp, #12]
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	9302      	str	r3, [sp, #8]
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	2301      	movs	r3, #1
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	2300      	movs	r3, #0
 800c49c:	2200      	movs	r2, #0
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f002 fdf1 	bl	800f086 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b088      	sub	sp, #32
 800c4b2:	af04      	add	r7, sp, #16
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	460b      	mov	r3, r1
 800c4be:	80fb      	strh	r3, [r7, #6]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c4c4:	7979      	ldrb	r1, [r7, #5]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	9303      	str	r3, [sp, #12]
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	9302      	str	r3, [sp, #8]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	9301      	str	r3, [sp, #4]
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	2201      	movs	r2, #1
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f002 fdd3 	bl	800f086 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c4e0:	2300      	movs	r3, #0

}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b088      	sub	sp, #32
 800c4ee:	af04      	add	r7, sp, #16
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	80fb      	strh	r3, [r7, #6]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c50e:	7979      	ldrb	r1, [r7, #5]
 800c510:	7e3b      	ldrb	r3, [r7, #24]
 800c512:	9303      	str	r3, [sp, #12]
 800c514:	88fb      	ldrh	r3, [r7, #6]
 800c516:	9302      	str	r3, [sp, #8]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	2301      	movs	r3, #1
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	2302      	movs	r3, #2
 800c522:	2200      	movs	r2, #0
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f002 fdae 	bl	800f086 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af04      	add	r7, sp, #16
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	4611      	mov	r1, r2
 800c540:	461a      	mov	r2, r3
 800c542:	460b      	mov	r3, r1
 800c544:	80fb      	strh	r3, [r7, #6]
 800c546:	4613      	mov	r3, r2
 800c548:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c54a:	7979      	ldrb	r1, [r7, #5]
 800c54c:	2300      	movs	r3, #0
 800c54e:	9303      	str	r3, [sp, #12]
 800c550:	88fb      	ldrh	r3, [r7, #6]
 800c552:	9302      	str	r3, [sp, #8]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	2301      	movs	r3, #1
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	2302      	movs	r3, #2
 800c55e:	2201      	movs	r2, #1
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f002 fd90 	bl	800f086 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af04      	add	r7, sp, #16
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	4608      	mov	r0, r1
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	4603      	mov	r3, r0
 800c580:	70fb      	strb	r3, [r7, #3]
 800c582:	460b      	mov	r3, r1
 800c584:	70bb      	strb	r3, [r7, #2]
 800c586:	4613      	mov	r3, r2
 800c588:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c58a:	7878      	ldrb	r0, [r7, #1]
 800c58c:	78ba      	ldrb	r2, [r7, #2]
 800c58e:	78f9      	ldrb	r1, [r7, #3]
 800c590:	8b3b      	ldrh	r3, [r7, #24]
 800c592:	9302      	str	r3, [sp, #8]
 800c594:	7d3b      	ldrb	r3, [r7, #20]
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	7c3b      	ldrb	r3, [r7, #16]
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	4603      	mov	r3, r0
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f002 fd23 	bl	800efea <USBH_LL_OpenPipe>

  return USBH_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c5ba:	78fb      	ldrb	r3, [r7, #3]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f002 fd42 	bl	800f048 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f836 	bl	800c64c <USBH_GetFreePipe>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d00a      	beq.n	800c604 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c5ee:	78fa      	ldrb	r2, [r7, #3]
 800c5f0:	89fb      	ldrh	r3, [r7, #14]
 800c5f2:	f003 030f 	and.w	r3, r3, #15
 800c5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	33e0      	adds	r3, #224	; 0xe0
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	440b      	add	r3, r1
 800c602:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c604:	89fb      	ldrh	r3, [r7, #14]
 800c606:	b2db      	uxtb	r3, r3
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	2b0f      	cmp	r3, #15
 800c620:	d80d      	bhi.n	800c63e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c622:	78fb      	ldrb	r3, [r7, #3]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	33e0      	adds	r3, #224	; 0xe0
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	33e0      	adds	r3, #224	; 0xe0
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	440b      	add	r3, r1
 800c63c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c654:	2300      	movs	r3, #0
 800c656:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]
 800c65c:	e00f      	b.n	800c67e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	33e0      	adds	r3, #224	; 0xe0
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	b29b      	uxth	r3, r3
 800c676:	e007      	b.n	800c688 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	3301      	adds	r3, #1
 800c67c:	73fb      	strb	r3, [r7, #15]
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b0f      	cmp	r3, #15
 800c682:	d9ec      	bls.n	800c65e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c684:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6a6:	2b84      	cmp	r3, #132	; 0x84
 800c6a8:	d005      	beq.n	800c6b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	3303      	adds	r3, #3
 800c6b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ca:	f3ef 8305 	mrs	r3, IPSR
 800c6ce:	607b      	str	r3, [r7, #4]
  return(result);
 800c6d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bf14      	ite	ne
 800c6d6:	2301      	movne	r3, #1
 800c6d8:	2300      	moveq	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c6ec:	f001 f922 	bl	800d934 <vTaskStartScheduler>
  
  return osOK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f8:	b089      	sub	sp, #36	; 0x24
 800c6fa:	af04      	add	r7, sp, #16
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d020      	beq.n	800c74a <osThreadCreate+0x54>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01c      	beq.n	800c74a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685c      	ldr	r4, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681d      	ldr	r5, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	691e      	ldr	r6, [r3, #16]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff ffb6 	bl	800c694 <makeFreeRtosPriority>
 800c728:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c732:	9202      	str	r2, [sp, #8]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	9100      	str	r1, [sp, #0]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	4632      	mov	r2, r6
 800c73c:	4629      	mov	r1, r5
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 ff0e 	bl	800d560 <xTaskCreateStatic>
 800c744:	4603      	mov	r3, r0
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e01c      	b.n	800c784 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685c      	ldr	r4, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c756:	b29e      	uxth	r6, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff ff98 	bl	800c694 <makeFreeRtosPriority>
 800c764:	4602      	mov	r2, r0
 800c766:	f107 030c 	add.w	r3, r7, #12
 800c76a:	9301      	str	r3, [sp, #4]
 800c76c:	9200      	str	r2, [sp, #0]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	4632      	mov	r2, r6
 800c772:	4629      	mov	r1, r5
 800c774:	4620      	mov	r0, r4
 800c776:	f000 ff50 	bl	800d61a <xTaskCreate>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d001      	beq.n	800c784 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	e000      	b.n	800c786 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c78e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <osDelay+0x16>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	e000      	b.n	800c7a6 <osDelay+0x18>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 f890 	bl	800d8cc <vTaskDelay>
  
  return osOK;
 800c7ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c7b6:	b590      	push	{r4, r7, lr}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af02      	add	r7, sp, #8
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d011      	beq.n	800c7ec <osMessageCreate+0x36>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00d      	beq.n	800c7ec <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6859      	ldr	r1, [r3, #4]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2400      	movs	r4, #0
 800c7e2:	9400      	str	r4, [sp, #0]
 800c7e4:	f000 f9e0 	bl	800cba8 <xQueueGenericCreateStatic>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	e008      	b.n	800c7fe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	f000 fa4e 	bl	800cc98 <xQueueGenericCreate>
 800c7fc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	bd90      	pop	{r4, r7, pc}
	...

0800c808 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <osMessagePut+0x1e>
    ticks = 1;
 800c822:	2301      	movs	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c826:	f7ff ff4d 	bl	800c6c4 <inHandlerMode>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d018      	beq.n	800c862 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c830:	f107 0210 	add.w	r2, r7, #16
 800c834:	f107 0108 	add.w	r1, r7, #8
 800c838:	2300      	movs	r3, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f000 fb84 	bl	800cf48 <xQueueGenericSendFromISR>
 800c840:	4603      	mov	r3, r0
 800c842:	2b01      	cmp	r3, #1
 800c844:	d001      	beq.n	800c84a <osMessagePut+0x42>
      return osErrorOS;
 800c846:	23ff      	movs	r3, #255	; 0xff
 800c848:	e018      	b.n	800c87c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d014      	beq.n	800c87a <osMessagePut+0x72>
 800c850:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <osMessagePut+0x7c>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	e00b      	b.n	800c87a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c862:	f107 0108 	add.w	r1, r7, #8
 800c866:	2300      	movs	r3, #0
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fa6e 	bl	800cd4c <xQueueGenericSend>
 800c870:	4603      	mov	r3, r0
 800c872:	2b01      	cmp	r3, #1
 800c874:	d001      	beq.n	800c87a <osMessagePut+0x72>
      return osErrorOS;
 800c876:	23ff      	movs	r3, #255	; 0xff
 800c878:	e000      	b.n	800c87c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	e000ed04 	.word	0xe000ed04

0800c888 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c888:	b590      	push	{r4, r7, lr}
 800c88a:	b08b      	sub	sp, #44	; 0x2c
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c8a2:	2380      	movs	r3, #128	; 0x80
 800c8a4:	617b      	str	r3, [r7, #20]
    return event;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	461c      	mov	r4, r3
 800c8aa:	f107 0314 	add.w	r3, r7, #20
 800c8ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c8b6:	e054      	b.n	800c962 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d103      	bne.n	800c8d0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ce:	e009      	b.n	800c8e4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <osMessageGet+0x5c>
      ticks = 1;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c8e4:	f7ff feee 	bl	800c6c4 <inHandlerMode>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d01c      	beq.n	800c928 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c8ee:	f107 0220 	add.w	r2, r7, #32
 800c8f2:	f107 0314 	add.w	r3, r7, #20
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	68b8      	ldr	r0, [r7, #8]
 800c8fc:	f000 fca0 	bl	800d240 <xQueueReceiveFromISR>
 800c900:	4603      	mov	r3, r0
 800c902:	2b01      	cmp	r3, #1
 800c904:	d102      	bne.n	800c90c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c906:	2310      	movs	r3, #16
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e001      	b.n	800c910 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d01d      	beq.n	800c952 <osMessageGet+0xca>
 800c916:	4b15      	ldr	r3, [pc, #84]	; (800c96c <osMessageGet+0xe4>)
 800c918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	e014      	b.n	800c952 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c928:	f107 0314 	add.w	r3, r7, #20
 800c92c:	3304      	adds	r3, #4
 800c92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c930:	4619      	mov	r1, r3
 800c932:	68b8      	ldr	r0, [r7, #8]
 800c934:	f000 fba4 	bl	800d080 <xQueueReceive>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d102      	bne.n	800c944 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c93e:	2310      	movs	r3, #16
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	e006      	b.n	800c952 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <osMessageGet+0xc6>
 800c94a:	2300      	movs	r3, #0
 800c94c:	e000      	b.n	800c950 <osMessageGet+0xc8>
 800c94e:	2340      	movs	r3, #64	; 0x40
 800c950:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	461c      	mov	r4, r3
 800c956:	f107 0314 	add.w	r3, r7, #20
 800c95a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c95e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	372c      	adds	r7, #44	; 0x2c
 800c966:	46bd      	mov	sp, r7
 800c968:	bd90      	pop	{r4, r7, pc}
 800c96a:	bf00      	nop
 800c96c:	e000ed04 	.word	0xe000ed04

0800c970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f103 0208 	add.w	r2, r3, #8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f04f 32ff 	mov.w	r2, #4294967295
 800c988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f103 0208 	add.w	r2, r3, #8
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f103 0208 	add.w	r2, r3, #8
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9be:	bf00      	nop
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca28:	d103      	bne.n	800ca32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	e00c      	b.n	800ca4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3308      	adds	r3, #8
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e002      	b.n	800ca40 <vListInsert+0x2e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d2f6      	bcs.n	800ca3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	601a      	str	r2, [r3, #0]
}
 800ca78:	bf00      	nop
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	6892      	ldr	r2, [r2, #8]
 800ca9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6852      	ldr	r2, [r2, #4]
 800caa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d103      	bne.n	800cab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	1e5a      	subs	r2, r3, #1
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb02:	f001 fd87 	bl	800e614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb12:	fb01 f303 	mul.w	r3, r1, r3
 800cb16:	441a      	add	r2, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb32:	3b01      	subs	r3, #1
 800cb34:	68f9      	ldr	r1, [r7, #12]
 800cb36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb38:	fb01 f303 	mul.w	r3, r1, r3
 800cb3c:	441a      	add	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	22ff      	movs	r2, #255	; 0xff
 800cb46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	22ff      	movs	r2, #255	; 0xff
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d114      	bne.n	800cb82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3310      	adds	r3, #16
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 f95d 	bl	800de24 <xTaskRemoveFromEventList>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb70:	4b0c      	ldr	r3, [pc, #48]	; (800cba4 <xQueueGenericReset+0xcc>)
 800cb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	e009      	b.n	800cb96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3310      	adds	r3, #16
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fef2 	bl	800c970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3324      	adds	r3, #36	; 0x24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff feed 	bl	800c970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb96:	f001 fd6d 	bl	800e674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb9a:	2301      	movs	r3, #1
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08e      	sub	sp, #56	; 0x38
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <xQueueGenericCreateStatic+0x52>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <xQueueGenericCreateStatic+0x56>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <xQueueGenericCreateStatic+0x58>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	623b      	str	r3, [r7, #32]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <xQueueGenericCreateStatic+0x7e>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <xQueueGenericCreateStatic+0x82>
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <xQueueGenericCreateStatic+0x84>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	61fb      	str	r3, [r7, #28]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc46:	2348      	movs	r3, #72	; 0x48
 800cc48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b48      	cmp	r3, #72	; 0x48
 800cc4e:	d00a      	beq.n	800cc66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	61bb      	str	r3, [r7, #24]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00d      	beq.n	800cc8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	2201      	movs	r2, #1
 800cc76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	4613      	mov	r3, r2
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	68b9      	ldr	r1, [r7, #8]
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 f83f 	bl	800cd0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3730      	adds	r7, #48	; 0x30
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08a      	sub	sp, #40	; 0x28
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4613      	mov	r3, r2
 800cca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10a      	bne.n	800ccc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	613b      	str	r3, [r7, #16]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	fb02 f303 	mul.w	r3, r2, r3
 800ccca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	3348      	adds	r3, #72	; 0x48
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f001 fdc1 	bl	800e858 <pvPortMalloc>
 800ccd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d011      	beq.n	800cd02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	3348      	adds	r3, #72	; 0x48
 800cce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccf0:	79fa      	ldrb	r2, [r7, #7]
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f000 f805 	bl	800cd0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd02:	69bb      	ldr	r3, [r7, #24]
	}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d103      	bne.n	800cd28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	69ba      	ldr	r2, [r7, #24]
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	e002      	b.n	800cd2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	69b8      	ldr	r0, [r7, #24]
 800cd3e:	f7ff fecb 	bl	800cad8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd42:	bf00      	nop
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
	...

0800cd4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xQueueGenericSend+0x32>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <xQueueGenericSend+0x40>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <xQueueGenericSend+0x44>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <xQueueGenericSend+0x46>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <xQueueGenericSend+0x60>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d103      	bne.n	800cdba <xQueueGenericSend+0x6e>
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <xQueueGenericSend+0x72>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e000      	b.n	800cdc0 <xQueueGenericSend+0x74>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <xQueueGenericSend+0x8e>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	623b      	str	r3, [r7, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdda:	f001 f9e5 	bl	800e1a8 <xTaskGetSchedulerState>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <xQueueGenericSend+0x9e>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <xQueueGenericSend+0xa2>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e000      	b.n	800cdf0 <xQueueGenericSend+0xa4>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <xQueueGenericSend+0xbe>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	61fb      	str	r3, [r7, #28]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce0a:	f001 fc03 	bl	800e614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d302      	bcc.n	800ce20 <xQueueGenericSend+0xd4>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d129      	bne.n	800ce74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce26:	f000 fa8b 	bl	800d340 <prvCopyDataToQueue>
 800ce2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d010      	beq.n	800ce56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce36:	3324      	adds	r3, #36	; 0x24
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fff3 	bl	800de24 <xTaskRemoveFromEventList>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d013      	beq.n	800ce6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce44:	4b3f      	ldr	r3, [pc, #252]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800ce46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	e00a      	b.n	800ce6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce5c:	4b39      	ldr	r3, [pc, #228]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce6c:	f001 fc02 	bl	800e674 <vPortExitCritical>
				return pdPASS;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e063      	b.n	800cf3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce7a:	f001 fbfb 	bl	800e674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e05c      	b.n	800cf3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce88:	f107 0314 	add.w	r3, r7, #20
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f001 f82b 	bl	800dee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce92:	2301      	movs	r3, #1
 800ce94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce96:	f001 fbed 	bl	800e674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce9a:	f000 fdb5 	bl	800da08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce9e:	f001 fbb9 	bl	800e614 <vPortEnterCritical>
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea8:	b25b      	sxtb	r3, r3
 800ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceae:	d103      	bne.n	800ceb8 <xQueueGenericSend+0x16c>
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cebe:	b25b      	sxtb	r3, r3
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec4:	d103      	bne.n	800cece <xQueueGenericSend+0x182>
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cece:	f001 fbd1 	bl	800e674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ced2:	1d3a      	adds	r2, r7, #4
 800ced4:	f107 0314 	add.w	r3, r7, #20
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f001 f81a 	bl	800df14 <xTaskCheckForTimeOut>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d124      	bne.n	800cf30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee8:	f000 fb22 	bl	800d530 <prvIsQueueFull>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d018      	beq.n	800cf24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	3310      	adds	r3, #16
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 ff6e 	bl	800dddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf02:	f000 faad 	bl	800d460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf06:	f000 fd8d 	bl	800da24 <xTaskResumeAll>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f47f af7c 	bne.w	800ce0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf12:	4b0c      	ldr	r3, [pc, #48]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800cf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	e772      	b.n	800ce0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf26:	f000 fa9b 	bl	800d460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf2a:	f000 fd7b 	bl	800da24 <xTaskResumeAll>
 800cf2e:	e76c      	b.n	800ce0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf32:	f000 fa95 	bl	800d460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf36:	f000 fd75 	bl	800da24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3738      	adds	r7, #56	; 0x38
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	e000ed04 	.word	0xe000ed04

0800cf48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b090      	sub	sp, #64	; 0x40
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
 800cf54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <xQueueGenericSendFromISR+0x3c>
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <xQueueGenericSendFromISR+0x40>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <xQueueGenericSendFromISR+0x42>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10a      	bne.n	800cfa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d103      	bne.n	800cfb2 <xQueueGenericSendFromISR+0x6a>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <xQueueGenericSendFromISR+0x6e>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <xQueueGenericSendFromISR+0x70>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	623b      	str	r3, [r7, #32]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfd2:	f001 fc01 	bl	800e7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfd6:	f3ef 8211 	mrs	r2, BASEPRI
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	61fa      	str	r2, [r7, #28]
 800cfec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d302      	bcc.n	800d004 <xQueueGenericSendFromISR+0xbc>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b02      	cmp	r3, #2
 800d002:	d12f      	bne.n	800d064 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d01a:	f000 f991 	bl	800d340 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d01e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d026:	d112      	bne.n	800d04e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d016      	beq.n	800d05e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	3324      	adds	r3, #36	; 0x24
 800d034:	4618      	mov	r0, r3
 800d036:	f000 fef5 	bl	800de24 <xTaskRemoveFromEventList>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00e      	beq.n	800d05e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00b      	beq.n	800d05e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	e007      	b.n	800d05e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d04e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d052:	3301      	adds	r3, #1
 800d054:	b2db      	uxtb	r3, r3
 800d056:	b25a      	sxtb	r2, r3
 800d058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d05e:	2301      	movs	r3, #1
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d062:	e001      	b.n	800d068 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d064:	2300      	movs	r3, #0
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d06a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d072:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d076:	4618      	mov	r0, r3
 800d078:	3740      	adds	r7, #64	; 0x40
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08c      	sub	sp, #48	; 0x30
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d08c:	2300      	movs	r3, #0
 800d08e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10a      	bne.n	800d0b0 <xQueueReceive+0x30>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	623b      	str	r3, [r7, #32]
}
 800d0ac:	bf00      	nop
 800d0ae:	e7fe      	b.n	800d0ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d103      	bne.n	800d0be <xQueueReceive+0x3e>
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <xQueueReceive+0x42>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e000      	b.n	800d0c4 <xQueueReceive+0x44>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10a      	bne.n	800d0de <xQueueReceive+0x5e>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	61fb      	str	r3, [r7, #28]
}
 800d0da:	bf00      	nop
 800d0dc:	e7fe      	b.n	800d0dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0de:	f001 f863 	bl	800e1a8 <xTaskGetSchedulerState>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <xQueueReceive+0x6e>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <xQueueReceive+0x72>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <xQueueReceive+0x74>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10a      	bne.n	800d10e <xQueueReceive+0x8e>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	61bb      	str	r3, [r7, #24]
}
 800d10a:	bf00      	nop
 800d10c:	e7fe      	b.n	800d10c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d10e:	f001 fa81 	bl	800e614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d01f      	beq.n	800d15e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d122:	f000 f977 	bl	800d414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	1e5a      	subs	r2, r3, #1
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00f      	beq.n	800d156 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	3310      	adds	r3, #16
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fe72 	bl	800de24 <xTaskRemoveFromEventList>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d007      	beq.n	800d156 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d146:	4b3d      	ldr	r3, [pc, #244]	; (800d23c <xQueueReceive+0x1bc>)
 800d148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d156:	f001 fa8d 	bl	800e674 <vPortExitCritical>
				return pdPASS;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e069      	b.n	800d232 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d103      	bne.n	800d16c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d164:	f001 fa86 	bl	800e674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d168:	2300      	movs	r3, #0
 800d16a:	e062      	b.n	800d232 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d172:	f107 0310 	add.w	r3, r7, #16
 800d176:	4618      	mov	r0, r3
 800d178:	f000 feb6 	bl	800dee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d17c:	2301      	movs	r3, #1
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d180:	f001 fa78 	bl	800e674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d184:	f000 fc40 	bl	800da08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d188:	f001 fa44 	bl	800e614 <vPortEnterCritical>
 800d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d192:	b25b      	sxtb	r3, r3
 800d194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d198:	d103      	bne.n	800d1a2 <xQueueReceive+0x122>
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1a8:	b25b      	sxtb	r3, r3
 800d1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ae:	d103      	bne.n	800d1b8 <xQueueReceive+0x138>
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1b8:	f001 fa5c 	bl	800e674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1bc:	1d3a      	adds	r2, r7, #4
 800d1be:	f107 0310 	add.w	r3, r7, #16
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fea5 	bl	800df14 <xTaskCheckForTimeOut>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d123      	bne.n	800d218 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d2:	f000 f997 	bl	800d504 <prvIsQueueEmpty>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d017      	beq.n	800d20c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1de:	3324      	adds	r3, #36	; 0x24
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fdf9 	bl	800dddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ec:	f000 f938 	bl	800d460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1f0:	f000 fc18 	bl	800da24 <xTaskResumeAll>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d189      	bne.n	800d10e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1fa:	4b10      	ldr	r3, [pc, #64]	; (800d23c <xQueueReceive+0x1bc>)
 800d1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	e780      	b.n	800d10e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20e:	f000 f927 	bl	800d460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d212:	f000 fc07 	bl	800da24 <xTaskResumeAll>
 800d216:	e77a      	b.n	800d10e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d21a:	f000 f921 	bl	800d460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d21e:	f000 fc01 	bl	800da24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d224:	f000 f96e 	bl	800d504 <prvIsQueueEmpty>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f43f af6f 	beq.w	800d10e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d232:	4618      	mov	r0, r3
 800d234:	3730      	adds	r7, #48	; 0x30
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	e000ed04 	.word	0xe000ed04

0800d240 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08e      	sub	sp, #56	; 0x38
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10a      	bne.n	800d26c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	623b      	str	r3, [r7, #32]
}
 800d268:	bf00      	nop
 800d26a:	e7fe      	b.n	800d26a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <xQueueReceiveFromISR+0x3a>
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <xQueueReceiveFromISR+0x3e>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e000      	b.n	800d280 <xQueueReceiveFromISR+0x40>
 800d27e:	2300      	movs	r3, #0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	61fb      	str	r3, [r7, #28]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d29a:	f001 fa9d 	bl	800e7d8 <vPortValidateInterruptPriority>
	__asm volatile
 800d29e:	f3ef 8211 	mrs	r2, BASEPRI
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	61ba      	str	r2, [r7, #24]
 800d2b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d02f      	beq.n	800d326 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2d0:	68b9      	ldr	r1, [r7, #8]
 800d2d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d4:	f000 f89e 	bl	800d414 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	1e5a      	subs	r2, r3, #1
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e8:	d112      	bne.n	800d310 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d016      	beq.n	800d320 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 fd94 	bl	800de24 <xTaskRemoveFromEventList>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00e      	beq.n	800d320 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00b      	beq.n	800d320 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	e007      	b.n	800d320 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d314:	3301      	adds	r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	b25a      	sxtb	r2, r3
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d320:	2301      	movs	r3, #1
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
 800d324:	e001      	b.n	800d32a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d326:	2300      	movs	r3, #0
 800d328:	637b      	str	r3, [r7, #52]	; 0x34
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f383 8811 	msr	BASEPRI, r3
}
 800d334:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3738      	adds	r7, #56	; 0x38
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d354:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10d      	bne.n	800d37a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d14d      	bne.n	800d402 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	689b      	ldr	r3, [r3, #8]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 ff3a 	bl	800e1e4 <xTaskPriorityDisinherit>
 800d370:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2200      	movs	r2, #0
 800d376:	609a      	str	r2, [r3, #8]
 800d378:	e043      	b.n	800d402 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d119      	bne.n	800d3b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6858      	ldr	r0, [r3, #4]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d388:	461a      	mov	r2, r3
 800d38a:	68b9      	ldr	r1, [r7, #8]
 800d38c:	f001 ff96 	bl	800f2bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d398:	441a      	add	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d32b      	bcc.n	800d402 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	605a      	str	r2, [r3, #4]
 800d3b2:	e026      	b.n	800d402 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68d8      	ldr	r0, [r3, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3bc:	461a      	mov	r2, r3
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	f001 ff7c 	bl	800f2bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3cc:	425b      	negs	r3, r3
 800d3ce:	441a      	add	r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	68da      	ldr	r2, [r3, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d207      	bcs.n	800d3f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e8:	425b      	negs	r3, r3
 800d3ea:	441a      	add	r2, r3
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d105      	bne.n	800d402 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d40a:	697b      	ldr	r3, [r7, #20]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d018      	beq.n	800d458 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68da      	ldr	r2, [r3, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42e:	441a      	add	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	68da      	ldr	r2, [r3, #12]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d303      	bcc.n	800d448 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68d9      	ldr	r1, [r3, #12]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d450:	461a      	mov	r2, r3
 800d452:	6838      	ldr	r0, [r7, #0]
 800d454:	f001 ff32 	bl	800f2bc <memcpy>
	}
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d468:	f001 f8d4 	bl	800e614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d474:	e011      	b.n	800d49a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d012      	beq.n	800d4a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	3324      	adds	r3, #36	; 0x24
 800d482:	4618      	mov	r0, r3
 800d484:	f000 fcce 	bl	800de24 <xTaskRemoveFromEventList>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d48e:	f000 fda3 	bl	800dfd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
 800d494:	3b01      	subs	r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dce9      	bgt.n	800d476 <prvUnlockQueue+0x16>
 800d4a2:	e000      	b.n	800d4a6 <prvUnlockQueue+0x46>
					break;
 800d4a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	22ff      	movs	r2, #255	; 0xff
 800d4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d4ae:	f001 f8e1 	bl	800e674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4b2:	f001 f8af 	bl	800e614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4be:	e011      	b.n	800d4e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d012      	beq.n	800d4ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3310      	adds	r3, #16
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 fca9 	bl	800de24 <xTaskRemoveFromEventList>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4d8:	f000 fd7e 	bl	800dfd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dce9      	bgt.n	800d4c0 <prvUnlockQueue+0x60>
 800d4ec:	e000      	b.n	800d4f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	22ff      	movs	r2, #255	; 0xff
 800d4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4f8:	f001 f8bc 	bl	800e674 <vPortExitCritical>
}
 800d4fc:	bf00      	nop
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d50c:	f001 f882 	bl	800e614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d518:	2301      	movs	r3, #1
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e001      	b.n	800d522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d522:	f001 f8a7 	bl	800e674 <vPortExitCritical>

	return xReturn;
 800d526:	68fb      	ldr	r3, [r7, #12]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d538:	f001 f86c 	bl	800e614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d544:	429a      	cmp	r2, r3
 800d546:	d102      	bne.n	800d54e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d548:	2301      	movs	r3, #1
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	e001      	b.n	800d552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d552:	f001 f88f 	bl	800e674 <vPortExitCritical>

	return xReturn;
 800d556:	68fb      	ldr	r3, [r7, #12]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08e      	sub	sp, #56	; 0x38
 800d564:	af04      	add	r7, sp, #16
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10a      	bne.n	800d58a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	623b      	str	r3, [r7, #32]
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10a      	bne.n	800d5a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	61fb      	str	r3, [r7, #28]
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5a6:	23b8      	movs	r3, #184	; 0xb8
 800d5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2bb8      	cmp	r3, #184	; 0xb8
 800d5ae:	d00a      	beq.n	800d5c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	f383 8811 	msr	BASEPRI, r3
 800d5b8:	f3bf 8f6f 	isb	sy
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	61bb      	str	r3, [r7, #24]
}
 800d5c2:	bf00      	nop
 800d5c4:	e7fe      	b.n	800d5c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d01e      	beq.n	800d60c <xTaskCreateStatic+0xac>
 800d5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d01b      	beq.n	800d60c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9303      	str	r3, [sp, #12]
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	9302      	str	r3, [sp, #8]
 800d5ee:	f107 0314 	add.w	r3, r7, #20
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 f850 	bl	800d6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d606:	f000 f8f7 	bl	800d7f8 <prvAddNewTaskToReadyList>
 800d60a:	e001      	b.n	800d610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d60c:	2300      	movs	r3, #0
 800d60e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d610:	697b      	ldr	r3, [r7, #20]
	}
 800d612:	4618      	mov	r0, r3
 800d614:	3728      	adds	r7, #40	; 0x28
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b08c      	sub	sp, #48	; 0x30
 800d61e:	af04      	add	r7, sp, #16
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	603b      	str	r3, [r7, #0]
 800d626:	4613      	mov	r3, r2
 800d628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d62a:	88fb      	ldrh	r3, [r7, #6]
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 f912 	bl	800e858 <pvPortMalloc>
 800d634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00e      	beq.n	800d65a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d63c:	20b8      	movs	r0, #184	; 0xb8
 800d63e:	f001 f90b 	bl	800e858 <pvPortMalloc>
 800d642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	631a      	str	r2, [r3, #48]	; 0x30
 800d650:	e005      	b.n	800d65e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d652:	6978      	ldr	r0, [r7, #20]
 800d654:	f001 f9d0 	bl	800e9f8 <vPortFree>
 800d658:	e001      	b.n	800d65e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d017      	beq.n	800d694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d66c:	88fa      	ldrh	r2, [r7, #6]
 800d66e:	2300      	movs	r3, #0
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	68b9      	ldr	r1, [r7, #8]
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 f80e 	bl	800d6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d688:	69f8      	ldr	r0, [r7, #28]
 800d68a:	f000 f8b5 	bl	800d7f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d68e:	2301      	movs	r3, #1
 800d690:	61bb      	str	r3, [r7, #24]
 800d692:	e002      	b.n	800d69a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d694:	f04f 33ff 	mov.w	r3, #4294967295
 800d698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d69a:	69bb      	ldr	r3, [r7, #24]
	}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b088      	sub	sp, #32
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
 800d6b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	21a5      	movs	r1, #165	; 0xa5
 800d6be:	f001 fe0b 	bl	800f2d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	f023 0307 	bic.w	r3, r3, #7
 800d6da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	617b      	str	r3, [r7, #20]
}
 800d6f8:	bf00      	nop
 800d6fa:	e7fe      	b.n	800d6fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d01f      	beq.n	800d742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d702:	2300      	movs	r3, #0
 800d704:	61fb      	str	r3, [r7, #28]
 800d706:	e012      	b.n	800d72e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	7819      	ldrb	r1, [r3, #0]
 800d710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	4413      	add	r3, r2
 800d716:	3334      	adds	r3, #52	; 0x34
 800d718:	460a      	mov	r2, r1
 800d71a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	4413      	add	r3, r2
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	3301      	adds	r3, #1
 800d72c:	61fb      	str	r3, [r7, #28]
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	2b0f      	cmp	r3, #15
 800d732:	d9e9      	bls.n	800d708 <prvInitialiseNewTask+0x64>
 800d734:	e000      	b.n	800d738 <prvInitialiseNewTask+0x94>
			{
				break;
 800d736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d740:	e003      	b.n	800d74a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	2b06      	cmp	r3, #6
 800d74e:	d901      	bls.n	800d754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d750:	2306      	movs	r3, #6
 800d752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d75e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	2200      	movs	r2, #0
 800d764:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	3304      	adds	r3, #4
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff f920 	bl	800c9b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	3318      	adds	r3, #24
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff f91b 	bl	800c9b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	f1c3 0207 	rsb	r2, r3, #7
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d78e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	2200      	movs	r2, #0
 800d794:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	2200      	movs	r2, #0
 800d79a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	3350      	adds	r3, #80	; 0x50
 800d7aa:	2260      	movs	r2, #96	; 0x60
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f001 fd92 	bl	800f2d8 <memset>
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	4a0d      	ldr	r2, [pc, #52]	; (800d7ec <prvInitialiseNewTask+0x148>)
 800d7b8:	655a      	str	r2, [r3, #84]	; 0x54
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	4a0c      	ldr	r2, [pc, #48]	; (800d7f0 <prvInitialiseNewTask+0x14c>)
 800d7be:	659a      	str	r2, [r3, #88]	; 0x58
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	4a0c      	ldr	r2, [pc, #48]	; (800d7f4 <prvInitialiseNewTask+0x150>)
 800d7c4:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	68f9      	ldr	r1, [r7, #12]
 800d7ca:	69b8      	ldr	r0, [r7, #24]
 800d7cc:	f000 fdf6 	bl	800e3bc <pxPortInitialiseStack>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7e2:	bf00      	nop
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	080112f4 	.word	0x080112f4
 800d7f0:	08011314 	.word	0x08011314
 800d7f4:	080112d4 	.word	0x080112d4

0800d7f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d800:	f000 ff08 	bl	800e614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d804:	4b2a      	ldr	r3, [pc, #168]	; (800d8b0 <prvAddNewTaskToReadyList+0xb8>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	4a29      	ldr	r2, [pc, #164]	; (800d8b0 <prvAddNewTaskToReadyList+0xb8>)
 800d80c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d80e:	4b29      	ldr	r3, [pc, #164]	; (800d8b4 <prvAddNewTaskToReadyList+0xbc>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d109      	bne.n	800d82a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d816:	4a27      	ldr	r2, [pc, #156]	; (800d8b4 <prvAddNewTaskToReadyList+0xbc>)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d81c:	4b24      	ldr	r3, [pc, #144]	; (800d8b0 <prvAddNewTaskToReadyList+0xb8>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d110      	bne.n	800d846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d824:	f000 fbfe 	bl	800e024 <prvInitialiseTaskLists>
 800d828:	e00d      	b.n	800d846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d82a:	4b23      	ldr	r3, [pc, #140]	; (800d8b8 <prvAddNewTaskToReadyList+0xc0>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d109      	bne.n	800d846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d832:	4b20      	ldr	r3, [pc, #128]	; (800d8b4 <prvAddNewTaskToReadyList+0xbc>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d802      	bhi.n	800d846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d840:	4a1c      	ldr	r2, [pc, #112]	; (800d8b4 <prvAddNewTaskToReadyList+0xbc>)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d846:	4b1d      	ldr	r3, [pc, #116]	; (800d8bc <prvAddNewTaskToReadyList+0xc4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3301      	adds	r3, #1
 800d84c:	4a1b      	ldr	r2, [pc, #108]	; (800d8bc <prvAddNewTaskToReadyList+0xc4>)
 800d84e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	2201      	movs	r2, #1
 800d856:	409a      	lsls	r2, r3
 800d858:	4b19      	ldr	r3, [pc, #100]	; (800d8c0 <prvAddNewTaskToReadyList+0xc8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	4a18      	ldr	r2, [pc, #96]	; (800d8c0 <prvAddNewTaskToReadyList+0xc8>)
 800d860:	6013      	str	r3, [r2, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d866:	4613      	mov	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4a15      	ldr	r2, [pc, #84]	; (800d8c4 <prvAddNewTaskToReadyList+0xcc>)
 800d870:	441a      	add	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	3304      	adds	r3, #4
 800d876:	4619      	mov	r1, r3
 800d878:	4610      	mov	r0, r2
 800d87a:	f7ff f8a6 	bl	800c9ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d87e:	f000 fef9 	bl	800e674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d882:	4b0d      	ldr	r3, [pc, #52]	; (800d8b8 <prvAddNewTaskToReadyList+0xc0>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00e      	beq.n	800d8a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d88a:	4b0a      	ldr	r3, [pc, #40]	; (800d8b4 <prvAddNewTaskToReadyList+0xbc>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	429a      	cmp	r2, r3
 800d896:	d207      	bcs.n	800d8a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d898:	4b0b      	ldr	r3, [pc, #44]	; (800d8c8 <prvAddNewTaskToReadyList+0xd0>)
 800d89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000988 	.word	0x20000988
 800d8b4:	20000888 	.word	0x20000888
 800d8b8:	20000994 	.word	0x20000994
 800d8bc:	200009a4 	.word	0x200009a4
 800d8c0:	20000990 	.word	0x20000990
 800d8c4:	2000088c 	.word	0x2000088c
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d017      	beq.n	800d90e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <vTaskDelay+0x60>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <vTaskDelay+0x30>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	60bb      	str	r3, [r7, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8fc:	f000 f884 	bl	800da08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d900:	2100      	movs	r1, #0
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fcf4 	bl	800e2f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d908:	f000 f88c 	bl	800da24 <xTaskResumeAll>
 800d90c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d107      	bne.n	800d924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d914:	4b06      	ldr	r3, [pc, #24]	; (800d930 <vTaskDelay+0x64>)
 800d916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d924:	bf00      	nop
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	200009b0 	.word	0x200009b0
 800d930:	e000ed04 	.word	0xe000ed04

0800d934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d942:	463a      	mov	r2, r7
 800d944:	1d39      	adds	r1, r7, #4
 800d946:	f107 0308 	add.w	r3, r7, #8
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f3 fa70 	bl	8000e30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	9202      	str	r2, [sp, #8]
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	2300      	movs	r3, #0
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	2300      	movs	r3, #0
 800d960:	460a      	mov	r2, r1
 800d962:	4921      	ldr	r1, [pc, #132]	; (800d9e8 <vTaskStartScheduler+0xb4>)
 800d964:	4821      	ldr	r0, [pc, #132]	; (800d9ec <vTaskStartScheduler+0xb8>)
 800d966:	f7ff fdfb 	bl	800d560 <xTaskCreateStatic>
 800d96a:	4603      	mov	r3, r0
 800d96c:	4a20      	ldr	r2, [pc, #128]	; (800d9f0 <vTaskStartScheduler+0xbc>)
 800d96e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d970:	4b1f      	ldr	r3, [pc, #124]	; (800d9f0 <vTaskStartScheduler+0xbc>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d978:	2301      	movs	r3, #1
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	e001      	b.n	800d982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d11b      	bne.n	800d9c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	613b      	str	r3, [r7, #16]
}
 800d99a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d99c:	4b15      	ldr	r3, [pc, #84]	; (800d9f4 <vTaskStartScheduler+0xc0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3350      	adds	r3, #80	; 0x50
 800d9a2:	4a15      	ldr	r2, [pc, #84]	; (800d9f8 <vTaskStartScheduler+0xc4>)
 800d9a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9a6:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <vTaskStartScheduler+0xc8>)
 800d9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9ae:	4b14      	ldr	r3, [pc, #80]	; (800da00 <vTaskStartScheduler+0xcc>)
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9b4:	4b13      	ldr	r3, [pc, #76]	; (800da04 <vTaskStartScheduler+0xd0>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9ba:	f000 fd89 	bl	800e4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9be:	e00e      	b.n	800d9de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d10a      	bne.n	800d9de <vTaskStartScheduler+0xaa>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	60fb      	str	r3, [r7, #12]
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <vTaskStartScheduler+0xa8>
}
 800d9de:	bf00      	nop
 800d9e0:	3718      	adds	r7, #24
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	0800f7ec 	.word	0x0800f7ec
 800d9ec:	0800dff1 	.word	0x0800dff1
 800d9f0:	200009ac 	.word	0x200009ac
 800d9f4:	20000888 	.word	0x20000888
 800d9f8:	20000078 	.word	0x20000078
 800d9fc:	200009a8 	.word	0x200009a8
 800da00:	20000994 	.word	0x20000994
 800da04:	2000098c 	.word	0x2000098c

0800da08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da0c:	4b04      	ldr	r3, [pc, #16]	; (800da20 <vTaskSuspendAll+0x18>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	4a03      	ldr	r2, [pc, #12]	; (800da20 <vTaskSuspendAll+0x18>)
 800da14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da16:	bf00      	nop
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	200009b0 	.word	0x200009b0

0800da24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da2e:	2300      	movs	r3, #0
 800da30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da32:	4b41      	ldr	r3, [pc, #260]	; (800db38 <xTaskResumeAll+0x114>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <xTaskResumeAll+0x2c>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	603b      	str	r3, [r7, #0]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da50:	f000 fde0 	bl	800e614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da54:	4b38      	ldr	r3, [pc, #224]	; (800db38 <xTaskResumeAll+0x114>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3b01      	subs	r3, #1
 800da5a:	4a37      	ldr	r2, [pc, #220]	; (800db38 <xTaskResumeAll+0x114>)
 800da5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da5e:	4b36      	ldr	r3, [pc, #216]	; (800db38 <xTaskResumeAll+0x114>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d161      	bne.n	800db2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da66:	4b35      	ldr	r3, [pc, #212]	; (800db3c <xTaskResumeAll+0x118>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d05d      	beq.n	800db2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da6e:	e02e      	b.n	800dace <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da70:	4b33      	ldr	r3, [pc, #204]	; (800db40 <xTaskResumeAll+0x11c>)
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3318      	adds	r3, #24
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff f801 	bl	800ca84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3304      	adds	r3, #4
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe fffc 	bl	800ca84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da90:	2201      	movs	r2, #1
 800da92:	409a      	lsls	r2, r3
 800da94:	4b2b      	ldr	r3, [pc, #172]	; (800db44 <xTaskResumeAll+0x120>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4313      	orrs	r3, r2
 800da9a:	4a2a      	ldr	r2, [pc, #168]	; (800db44 <xTaskResumeAll+0x120>)
 800da9c:	6013      	str	r3, [r2, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa2:	4613      	mov	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4413      	add	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4a27      	ldr	r2, [pc, #156]	; (800db48 <xTaskResumeAll+0x124>)
 800daac:	441a      	add	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3304      	adds	r3, #4
 800dab2:	4619      	mov	r1, r3
 800dab4:	4610      	mov	r0, r2
 800dab6:	f7fe ff88 	bl	800c9ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabe:	4b23      	ldr	r3, [pc, #140]	; (800db4c <xTaskResumeAll+0x128>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d302      	bcc.n	800dace <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dac8:	4b21      	ldr	r3, [pc, #132]	; (800db50 <xTaskResumeAll+0x12c>)
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dace:	4b1c      	ldr	r3, [pc, #112]	; (800db40 <xTaskResumeAll+0x11c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1cc      	bne.n	800da70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dadc:	f000 fb44 	bl	800e168 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dae0:	4b1c      	ldr	r3, [pc, #112]	; (800db54 <xTaskResumeAll+0x130>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d010      	beq.n	800db0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800daec:	f000 f836 	bl	800db5c <xTaskIncrementTick>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800daf6:	4b16      	ldr	r3, [pc, #88]	; (800db50 <xTaskResumeAll+0x12c>)
 800daf8:	2201      	movs	r2, #1
 800dafa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3b01      	subs	r3, #1
 800db00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1f1      	bne.n	800daec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800db08:	4b12      	ldr	r3, [pc, #72]	; (800db54 <xTaskResumeAll+0x130>)
 800db0a:	2200      	movs	r2, #0
 800db0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db0e:	4b10      	ldr	r3, [pc, #64]	; (800db50 <xTaskResumeAll+0x12c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d009      	beq.n	800db2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db16:	2301      	movs	r3, #1
 800db18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db1a:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <xTaskResumeAll+0x134>)
 800db1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db2a:	f000 fda3 	bl	800e674 <vPortExitCritical>

	return xAlreadyYielded;
 800db2e:	68bb      	ldr	r3, [r7, #8]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	200009b0 	.word	0x200009b0
 800db3c:	20000988 	.word	0x20000988
 800db40:	20000948 	.word	0x20000948
 800db44:	20000990 	.word	0x20000990
 800db48:	2000088c 	.word	0x2000088c
 800db4c:	20000888 	.word	0x20000888
 800db50:	2000099c 	.word	0x2000099c
 800db54:	20000998 	.word	0x20000998
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db66:	4b4e      	ldr	r3, [pc, #312]	; (800dca0 <xTaskIncrementTick+0x144>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f040 808e 	bne.w	800dc8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db70:	4b4c      	ldr	r3, [pc, #304]	; (800dca4 <xTaskIncrementTick+0x148>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db78:	4a4a      	ldr	r2, [pc, #296]	; (800dca4 <xTaskIncrementTick+0x148>)
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d120      	bne.n	800dbc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db84:	4b48      	ldr	r3, [pc, #288]	; (800dca8 <xTaskIncrementTick+0x14c>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00a      	beq.n	800dba4 <xTaskIncrementTick+0x48>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	603b      	str	r3, [r7, #0]
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <xTaskIncrementTick+0x46>
 800dba4:	4b40      	ldr	r3, [pc, #256]	; (800dca8 <xTaskIncrementTick+0x14c>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	60fb      	str	r3, [r7, #12]
 800dbaa:	4b40      	ldr	r3, [pc, #256]	; (800dcac <xTaskIncrementTick+0x150>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a3e      	ldr	r2, [pc, #248]	; (800dca8 <xTaskIncrementTick+0x14c>)
 800dbb0:	6013      	str	r3, [r2, #0]
 800dbb2:	4a3e      	ldr	r2, [pc, #248]	; (800dcac <xTaskIncrementTick+0x150>)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	4b3d      	ldr	r3, [pc, #244]	; (800dcb0 <xTaskIncrementTick+0x154>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	4a3c      	ldr	r2, [pc, #240]	; (800dcb0 <xTaskIncrementTick+0x154>)
 800dbc0:	6013      	str	r3, [r2, #0]
 800dbc2:	f000 fad1 	bl	800e168 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbc6:	4b3b      	ldr	r3, [pc, #236]	; (800dcb4 <xTaskIncrementTick+0x158>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d348      	bcc.n	800dc62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbd0:	4b35      	ldr	r3, [pc, #212]	; (800dca8 <xTaskIncrementTick+0x14c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d104      	bne.n	800dbe4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbda:	4b36      	ldr	r3, [pc, #216]	; (800dcb4 <xTaskIncrementTick+0x158>)
 800dbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe0:	601a      	str	r2, [r3, #0]
					break;
 800dbe2:	e03e      	b.n	800dc62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe4:	4b30      	ldr	r3, [pc, #192]	; (800dca8 <xTaskIncrementTick+0x14c>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d203      	bcs.n	800dc04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbfc:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <xTaskIncrementTick+0x158>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc02:	e02e      	b.n	800dc62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe ff3b 	bl	800ca84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d004      	beq.n	800dc20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	3318      	adds	r3, #24
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe ff32 	bl	800ca84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	2201      	movs	r2, #1
 800dc26:	409a      	lsls	r2, r3
 800dc28:	4b23      	ldr	r3, [pc, #140]	; (800dcb8 <xTaskIncrementTick+0x15c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	4a22      	ldr	r2, [pc, #136]	; (800dcb8 <xTaskIncrementTick+0x15c>)
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc36:	4613      	mov	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4a1f      	ldr	r2, [pc, #124]	; (800dcbc <xTaskIncrementTick+0x160>)
 800dc40:	441a      	add	r2, r3
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fe febe 	bl	800c9ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc52:	4b1b      	ldr	r3, [pc, #108]	; (800dcc0 <xTaskIncrementTick+0x164>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d3b9      	bcc.n	800dbd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc60:	e7b6      	b.n	800dbd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc62:	4b17      	ldr	r3, [pc, #92]	; (800dcc0 <xTaskIncrementTick+0x164>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	4914      	ldr	r1, [pc, #80]	; (800dcbc <xTaskIncrementTick+0x160>)
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	440b      	add	r3, r1
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d901      	bls.n	800dc7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc7e:	4b11      	ldr	r3, [pc, #68]	; (800dcc4 <xTaskIncrementTick+0x168>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dc86:	2301      	movs	r3, #1
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	e004      	b.n	800dc96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc8c:	4b0e      	ldr	r3, [pc, #56]	; (800dcc8 <xTaskIncrementTick+0x16c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3301      	adds	r3, #1
 800dc92:	4a0d      	ldr	r2, [pc, #52]	; (800dcc8 <xTaskIncrementTick+0x16c>)
 800dc94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc96:	697b      	ldr	r3, [r7, #20]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	200009b0 	.word	0x200009b0
 800dca4:	2000098c 	.word	0x2000098c
 800dca8:	20000940 	.word	0x20000940
 800dcac:	20000944 	.word	0x20000944
 800dcb0:	200009a0 	.word	0x200009a0
 800dcb4:	200009a8 	.word	0x200009a8
 800dcb8:	20000990 	.word	0x20000990
 800dcbc:	2000088c 	.word	0x2000088c
 800dcc0:	20000888 	.word	0x20000888
 800dcc4:	2000099c 	.word	0x2000099c
 800dcc8:	20000998 	.word	0x20000998

0800dccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcd2:	4b3c      	ldr	r3, [pc, #240]	; (800ddc4 <vTaskSwitchContext+0xf8>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d003      	beq.n	800dce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcda:	4b3b      	ldr	r3, [pc, #236]	; (800ddc8 <vTaskSwitchContext+0xfc>)
 800dcdc:	2201      	movs	r2, #1
 800dcde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dce0:	e06b      	b.n	800ddba <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800dce2:	4b39      	ldr	r3, [pc, #228]	; (800ddc8 <vTaskSwitchContext+0xfc>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dce8:	4b38      	ldr	r3, [pc, #224]	; (800ddcc <vTaskSwitchContext+0x100>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcee:	61fb      	str	r3, [r7, #28]
 800dcf0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dcf4:	61bb      	str	r3, [r7, #24]
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	69ba      	ldr	r2, [r7, #24]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d111      	bne.n	800dd24 <vTaskSwitchContext+0x58>
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	3304      	adds	r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	69ba      	ldr	r2, [r7, #24]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d10b      	bne.n	800dd24 <vTaskSwitchContext+0x58>
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	69ba      	ldr	r2, [r7, #24]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d105      	bne.n	800dd24 <vTaskSwitchContext+0x58>
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	330c      	adds	r3, #12
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69ba      	ldr	r2, [r7, #24]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d008      	beq.n	800dd36 <vTaskSwitchContext+0x6a>
 800dd24:	4b29      	ldr	r3, [pc, #164]	; (800ddcc <vTaskSwitchContext+0x100>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	4b28      	ldr	r3, [pc, #160]	; (800ddcc <vTaskSwitchContext+0x100>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3334      	adds	r3, #52	; 0x34
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4610      	mov	r0, r2
 800dd32:	f7f3 f86b 	bl	8000e0c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd36:	4b26      	ldr	r3, [pc, #152]	; (800ddd0 <vTaskSwitchContext+0x104>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	fab3 f383 	clz	r3, r3
 800dd42:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	f1c3 031f 	rsb	r3, r3, #31
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	4921      	ldr	r1, [pc, #132]	; (800ddd4 <vTaskSwitchContext+0x108>)
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	440b      	add	r3, r1
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10a      	bne.n	800dd76 <vTaskSwitchContext+0xaa>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	607b      	str	r3, [r7, #4]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <vTaskSwitchContext+0xa8>
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4a14      	ldr	r2, [pc, #80]	; (800ddd4 <vTaskSwitchContext+0x108>)
 800dd82:	4413      	add	r3, r2
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	605a      	str	r2, [r3, #4]
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	3308      	adds	r3, #8
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d104      	bne.n	800dda6 <vTaskSwitchContext+0xda>
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	685a      	ldr	r2, [r3, #4]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	605a      	str	r2, [r3, #4]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	4a07      	ldr	r2, [pc, #28]	; (800ddcc <vTaskSwitchContext+0x100>)
 800ddae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddb0:	4b06      	ldr	r3, [pc, #24]	; (800ddcc <vTaskSwitchContext+0x100>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3350      	adds	r3, #80	; 0x50
 800ddb6:	4a08      	ldr	r2, [pc, #32]	; (800ddd8 <vTaskSwitchContext+0x10c>)
 800ddb8:	6013      	str	r3, [r2, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	200009b0 	.word	0x200009b0
 800ddc8:	2000099c 	.word	0x2000099c
 800ddcc:	20000888 	.word	0x20000888
 800ddd0:	20000990 	.word	0x20000990
 800ddd4:	2000088c 	.word	0x2000088c
 800ddd8:	20000078 	.word	0x20000078

0800dddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de02:	4b07      	ldr	r3, [pc, #28]	; (800de20 <vTaskPlaceOnEventList+0x44>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3318      	adds	r3, #24
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fe01 	bl	800ca12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de10:	2101      	movs	r1, #1
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f000 fa6c 	bl	800e2f0 <prvAddCurrentTaskToDelayedList>
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20000888 	.word	0x20000888

0800de24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10a      	bne.n	800de50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	60fb      	str	r3, [r7, #12]
}
 800de4c:	bf00      	nop
 800de4e:	e7fe      	b.n	800de4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	3318      	adds	r3, #24
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe fe15 	bl	800ca84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de5a:	4b1d      	ldr	r3, [pc, #116]	; (800ded0 <xTaskRemoveFromEventList+0xac>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d11c      	bne.n	800de9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	3304      	adds	r3, #4
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fe0c 	bl	800ca84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	2201      	movs	r2, #1
 800de72:	409a      	lsls	r2, r3
 800de74:	4b17      	ldr	r3, [pc, #92]	; (800ded4 <xTaskRemoveFromEventList+0xb0>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4313      	orrs	r3, r2
 800de7a:	4a16      	ldr	r2, [pc, #88]	; (800ded4 <xTaskRemoveFromEventList+0xb0>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de82:	4613      	mov	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4a13      	ldr	r2, [pc, #76]	; (800ded8 <xTaskRemoveFromEventList+0xb4>)
 800de8c:	441a      	add	r2, r3
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	3304      	adds	r3, #4
 800de92:	4619      	mov	r1, r3
 800de94:	4610      	mov	r0, r2
 800de96:	f7fe fd98 	bl	800c9ca <vListInsertEnd>
 800de9a:	e005      	b.n	800dea8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	3318      	adds	r3, #24
 800dea0:	4619      	mov	r1, r3
 800dea2:	480e      	ldr	r0, [pc, #56]	; (800dedc <xTaskRemoveFromEventList+0xb8>)
 800dea4:	f7fe fd91 	bl	800c9ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4b0c      	ldr	r3, [pc, #48]	; (800dee0 <xTaskRemoveFromEventList+0xbc>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d905      	bls.n	800dec2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800deb6:	2301      	movs	r3, #1
 800deb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800deba:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <xTaskRemoveFromEventList+0xc0>)
 800debc:	2201      	movs	r2, #1
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	e001      	b.n	800dec6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dec6:	697b      	ldr	r3, [r7, #20]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	200009b0 	.word	0x200009b0
 800ded4:	20000990 	.word	0x20000990
 800ded8:	2000088c 	.word	0x2000088c
 800dedc:	20000948 	.word	0x20000948
 800dee0:	20000888 	.word	0x20000888
 800dee4:	2000099c 	.word	0x2000099c

0800dee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800def0:	4b06      	ldr	r3, [pc, #24]	; (800df0c <vTaskInternalSetTimeOutState+0x24>)
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800def8:	4b05      	ldr	r3, [pc, #20]	; (800df10 <vTaskInternalSetTimeOutState+0x28>)
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	605a      	str	r2, [r3, #4]
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	200009a0 	.word	0x200009a0
 800df10:	2000098c 	.word	0x2000098c

0800df14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	613b      	str	r3, [r7, #16]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10a      	bne.n	800df56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	60fb      	str	r3, [r7, #12]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df56:	f000 fb5d 	bl	800e614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df5a:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <xTaskCheckForTimeOut+0xbc>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df72:	d102      	bne.n	800df7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df74:	2300      	movs	r3, #0
 800df76:	61fb      	str	r3, [r7, #28]
 800df78:	e023      	b.n	800dfc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <xTaskCheckForTimeOut+0xc0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	429a      	cmp	r2, r3
 800df84:	d007      	beq.n	800df96 <xTaskCheckForTimeOut+0x82>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	69ba      	ldr	r2, [r7, #24]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d302      	bcc.n	800df96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df90:	2301      	movs	r3, #1
 800df92:	61fb      	str	r3, [r7, #28]
 800df94:	e015      	b.n	800dfc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d20b      	bcs.n	800dfb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ff9b 	bl	800dee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	e004      	b.n	800dfc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfc2:	f000 fb57 	bl	800e674 <vPortExitCritical>

	return xReturn;
 800dfc6:	69fb      	ldr	r3, [r7, #28]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3720      	adds	r7, #32
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	2000098c 	.word	0x2000098c
 800dfd4:	200009a0 	.word	0x200009a0

0800dfd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfd8:	b480      	push	{r7}
 800dfda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfdc:	4b03      	ldr	r3, [pc, #12]	; (800dfec <vTaskMissedYield+0x14>)
 800dfde:	2201      	movs	r2, #1
 800dfe0:	601a      	str	r2, [r3, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	2000099c 	.word	0x2000099c

0800dff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dff8:	f000 f854 	bl	800e0a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dffc:	4b07      	ldr	r3, [pc, #28]	; (800e01c <prvIdleTask+0x2c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d907      	bls.n	800e014 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e004:	4b06      	ldr	r3, [pc, #24]	; (800e020 <prvIdleTask+0x30>)
 800e006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e014:	f7f2 fef3 	bl	8000dfe <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e018:	e7ee      	b.n	800dff8 <prvIdleTask+0x8>
 800e01a:	bf00      	nop
 800e01c:	2000088c 	.word	0x2000088c
 800e020:	e000ed04 	.word	0xe000ed04

0800e024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e02a:	2300      	movs	r3, #0
 800e02c:	607b      	str	r3, [r7, #4]
 800e02e:	e00c      	b.n	800e04a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4a12      	ldr	r2, [pc, #72]	; (800e084 <prvInitialiseTaskLists+0x60>)
 800e03c:	4413      	add	r3, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fc96 	bl	800c970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3301      	adds	r3, #1
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b06      	cmp	r3, #6
 800e04e:	d9ef      	bls.n	800e030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e050:	480d      	ldr	r0, [pc, #52]	; (800e088 <prvInitialiseTaskLists+0x64>)
 800e052:	f7fe fc8d 	bl	800c970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e056:	480d      	ldr	r0, [pc, #52]	; (800e08c <prvInitialiseTaskLists+0x68>)
 800e058:	f7fe fc8a 	bl	800c970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e05c:	480c      	ldr	r0, [pc, #48]	; (800e090 <prvInitialiseTaskLists+0x6c>)
 800e05e:	f7fe fc87 	bl	800c970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e062:	480c      	ldr	r0, [pc, #48]	; (800e094 <prvInitialiseTaskLists+0x70>)
 800e064:	f7fe fc84 	bl	800c970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e068:	480b      	ldr	r0, [pc, #44]	; (800e098 <prvInitialiseTaskLists+0x74>)
 800e06a:	f7fe fc81 	bl	800c970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e06e:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <prvInitialiseTaskLists+0x78>)
 800e070:	4a05      	ldr	r2, [pc, #20]	; (800e088 <prvInitialiseTaskLists+0x64>)
 800e072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <prvInitialiseTaskLists+0x7c>)
 800e076:	4a05      	ldr	r2, [pc, #20]	; (800e08c <prvInitialiseTaskLists+0x68>)
 800e078:	601a      	str	r2, [r3, #0]
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	2000088c 	.word	0x2000088c
 800e088:	20000918 	.word	0x20000918
 800e08c:	2000092c 	.word	0x2000092c
 800e090:	20000948 	.word	0x20000948
 800e094:	2000095c 	.word	0x2000095c
 800e098:	20000974 	.word	0x20000974
 800e09c:	20000940 	.word	0x20000940
 800e0a0:	20000944 	.word	0x20000944

0800e0a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0aa:	e019      	b.n	800e0e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e0ac:	f000 fab2 	bl	800e614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0b0:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <prvCheckTasksWaitingTermination+0x50>)
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fce1 	bl	800ca84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	; (800e0f8 <prvCheckTasksWaitingTermination+0x54>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	4a0b      	ldr	r2, [pc, #44]	; (800e0f8 <prvCheckTasksWaitingTermination+0x54>)
 800e0ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0cc:	4b0b      	ldr	r3, [pc, #44]	; (800e0fc <prvCheckTasksWaitingTermination+0x58>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	4a0a      	ldr	r2, [pc, #40]	; (800e0fc <prvCheckTasksWaitingTermination+0x58>)
 800e0d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0d6:	f000 facd 	bl	800e674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f810 	bl	800e100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0e0:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <prvCheckTasksWaitingTermination+0x58>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1e1      	bne.n	800e0ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0e8:	bf00      	nop
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	2000095c 	.word	0x2000095c
 800e0f8:	20000988 	.word	0x20000988
 800e0fc:	20000970 	.word	0x20000970

0800e100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3350      	adds	r3, #80	; 0x50
 800e10c:	4618      	mov	r0, r3
 800e10e:	f001 f9d9 	bl	800f4c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d108      	bne.n	800e12e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e120:	4618      	mov	r0, r3
 800e122:	f000 fc69 	bl	800e9f8 <vPortFree>
				vPortFree( pxTCB );
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fc66 	bl	800e9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e12c:	e018      	b.n	800e160 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800e134:	2b01      	cmp	r3, #1
 800e136:	d103      	bne.n	800e140 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fc5d 	bl	800e9f8 <vPortFree>
	}
 800e13e:	e00f      	b.n	800e160 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800e146:	2b02      	cmp	r3, #2
 800e148:	d00a      	beq.n	800e160 <prvDeleteTCB+0x60>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	60fb      	str	r3, [r7, #12]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <prvDeleteTCB+0x5e>
	}
 800e160:	bf00      	nop
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e16e:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <prvResetNextTaskUnblockTime+0x38>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d104      	bne.n	800e182 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e178:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e17a:	f04f 32ff 	mov.w	r2, #4294967295
 800e17e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e180:	e008      	b.n	800e194 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e182:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <prvResetNextTaskUnblockTime+0x38>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	4a04      	ldr	r2, [pc, #16]	; (800e1a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e192:	6013      	str	r3, [r2, #0]
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	20000940 	.word	0x20000940
 800e1a4:	200009a8 	.word	0x200009a8

0800e1a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1ae:	4b0b      	ldr	r3, [pc, #44]	; (800e1dc <xTaskGetSchedulerState+0x34>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d102      	bne.n	800e1bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	607b      	str	r3, [r7, #4]
 800e1ba:	e008      	b.n	800e1ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1bc:	4b08      	ldr	r3, [pc, #32]	; (800e1e0 <xTaskGetSchedulerState+0x38>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d102      	bne.n	800e1ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	607b      	str	r3, [r7, #4]
 800e1c8:	e001      	b.n	800e1ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1ce:	687b      	ldr	r3, [r7, #4]
	}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	20000994 	.word	0x20000994
 800e1e0:	200009b0 	.word	0x200009b0

0800e1e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d06e      	beq.n	800e2d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1fa:	4b3a      	ldr	r3, [pc, #232]	; (800e2e4 <xTaskPriorityDisinherit+0x100>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	693a      	ldr	r2, [r7, #16]
 800e200:	429a      	cmp	r2, r3
 800e202:	d00a      	beq.n	800e21a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	60fb      	str	r3, [r7, #12]
}
 800e216:	bf00      	nop
 800e218:	e7fe      	b.n	800e218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10a      	bne.n	800e238 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	60bb      	str	r3, [r7, #8]
}
 800e234:	bf00      	nop
 800e236:	e7fe      	b.n	800e236 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d044      	beq.n	800e2d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e252:	2b00      	cmp	r3, #0
 800e254:	d140      	bne.n	800e2d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe fc12 	bl	800ca84 <uxListRemove>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d115      	bne.n	800e292 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26a:	491f      	ldr	r1, [pc, #124]	; (800e2e8 <xTaskPriorityDisinherit+0x104>)
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	440b      	add	r3, r1
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xTaskPriorityDisinherit+0xae>
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	43da      	mvns	r2, r3
 800e288:	4b18      	ldr	r3, [pc, #96]	; (800e2ec <xTaskPriorityDisinherit+0x108>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4013      	ands	r3, r2
 800e28e:	4a17      	ldr	r2, [pc, #92]	; (800e2ec <xTaskPriorityDisinherit+0x108>)
 800e290:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29e:	f1c3 0207 	rsb	r2, r3, #7
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	409a      	lsls	r2, r3
 800e2ae:	4b0f      	ldr	r3, [pc, #60]	; (800e2ec <xTaskPriorityDisinherit+0x108>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <xTaskPriorityDisinherit+0x108>)
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4a08      	ldr	r2, [pc, #32]	; (800e2e8 <xTaskPriorityDisinherit+0x104>)
 800e2c6:	441a      	add	r2, r3
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fe fb7b 	bl	800c9ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2d8:	697b      	ldr	r3, [r7, #20]
	}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20000888 	.word	0x20000888
 800e2e8:	2000088c 	.word	0x2000088c
 800e2ec:	20000990 	.word	0x20000990

0800e2f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2fa:	4b29      	ldr	r3, [pc, #164]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e300:	4b28      	ldr	r3, [pc, #160]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3304      	adds	r3, #4
 800e306:	4618      	mov	r0, r3
 800e308:	f7fe fbbc 	bl	800ca84 <uxListRemove>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10b      	bne.n	800e32a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e312:	4b24      	ldr	r3, [pc, #144]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	2201      	movs	r2, #1
 800e31a:	fa02 f303 	lsl.w	r3, r2, r3
 800e31e:	43da      	mvns	r2, r3
 800e320:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4013      	ands	r3, r2
 800e326:	4a20      	ldr	r2, [pc, #128]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e330:	d10a      	bne.n	800e348 <prvAddCurrentTaskToDelayedList+0x58>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d007      	beq.n	800e348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e338:	4b1a      	ldr	r3, [pc, #104]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	481a      	ldr	r0, [pc, #104]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800e342:	f7fe fb42 	bl	800c9ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e346:	e026      	b.n	800e396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4413      	add	r3, r2
 800e34e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e350:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d209      	bcs.n	800e374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e360:	4b13      	ldr	r3, [pc, #76]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3304      	adds	r3, #4
 800e36a:	4619      	mov	r1, r3
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7fe fb50 	bl	800ca12 <vListInsert>
}
 800e372:	e010      	b.n	800e396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e374:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3304      	adds	r3, #4
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7fe fb46 	bl	800ca12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e386:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d202      	bcs.n	800e396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e390:	4a09      	ldr	r2, [pc, #36]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	6013      	str	r3, [r2, #0]
}
 800e396:	bf00      	nop
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	2000098c 	.word	0x2000098c
 800e3a4:	20000888 	.word	0x20000888
 800e3a8:	20000990 	.word	0x20000990
 800e3ac:	20000974 	.word	0x20000974
 800e3b0:	20000944 	.word	0x20000944
 800e3b4:	20000940 	.word	0x20000940
 800e3b8:	200009a8 	.word	0x200009a8

0800e3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3b04      	subs	r3, #4
 800e3cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3b04      	subs	r3, #4
 800e3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	f023 0201 	bic.w	r2, r3, #1
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	3b04      	subs	r3, #4
 800e3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3ec:	4a0c      	ldr	r2, [pc, #48]	; (800e420 <pxPortInitialiseStack+0x64>)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	3b14      	subs	r3, #20
 800e3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3b04      	subs	r3, #4
 800e402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f06f 0202 	mvn.w	r2, #2
 800e40a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	3b20      	subs	r3, #32
 800e410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e412:	68fb      	ldr	r3, [r7, #12]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	0800e425 	.word	0x0800e425

0800e424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e42a:	2300      	movs	r3, #0
 800e42c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e42e:	4b12      	ldr	r3, [pc, #72]	; (800e478 <prvTaskExitError+0x54>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e436:	d00a      	beq.n	800e44e <prvTaskExitError+0x2a>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	60fb      	str	r3, [r7, #12]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <prvTaskExitError+0x28>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	60bb      	str	r3, [r7, #8]
}
 800e460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e462:	bf00      	nop
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0fc      	beq.n	800e464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr
 800e478:	20000074 	.word	0x20000074
 800e47c:	00000000 	.word	0x00000000

0800e480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <pxCurrentTCBConst2>)
 800e482:	6819      	ldr	r1, [r3, #0]
 800e484:	6808      	ldr	r0, [r1, #0]
 800e486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48a:	f380 8809 	msr	PSP, r0
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f04f 0000 	mov.w	r0, #0
 800e496:	f380 8811 	msr	BASEPRI, r0
 800e49a:	4770      	bx	lr
 800e49c:	f3af 8000 	nop.w

0800e4a0 <pxCurrentTCBConst2>:
 800e4a0:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop

0800e4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4a8:	4808      	ldr	r0, [pc, #32]	; (800e4cc <prvPortStartFirstTask+0x24>)
 800e4aa:	6800      	ldr	r0, [r0, #0]
 800e4ac:	6800      	ldr	r0, [r0, #0]
 800e4ae:	f380 8808 	msr	MSP, r0
 800e4b2:	f04f 0000 	mov.w	r0, #0
 800e4b6:	f380 8814 	msr	CONTROL, r0
 800e4ba:	b662      	cpsie	i
 800e4bc:	b661      	cpsie	f
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	df00      	svc	0
 800e4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4ca:	bf00      	nop
 800e4cc:	e000ed08 	.word	0xe000ed08

0800e4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4d6:	4b46      	ldr	r3, [pc, #280]	; (800e5f0 <xPortStartScheduler+0x120>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a46      	ldr	r2, [pc, #280]	; (800e5f4 <xPortStartScheduler+0x124>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d10a      	bne.n	800e4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	613b      	str	r3, [r7, #16]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4f6:	4b3e      	ldr	r3, [pc, #248]	; (800e5f0 <xPortStartScheduler+0x120>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a3f      	ldr	r2, [pc, #252]	; (800e5f8 <xPortStartScheduler+0x128>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d10a      	bne.n	800e516 <xPortStartScheduler+0x46>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	60fb      	str	r3, [r7, #12]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e516:	4b39      	ldr	r3, [pc, #228]	; (800e5fc <xPortStartScheduler+0x12c>)
 800e518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	22ff      	movs	r2, #255	; 0xff
 800e526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e530:	78fb      	ldrb	r3, [r7, #3]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	4b31      	ldr	r3, [pc, #196]	; (800e600 <xPortStartScheduler+0x130>)
 800e53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e53e:	4b31      	ldr	r3, [pc, #196]	; (800e604 <xPortStartScheduler+0x134>)
 800e540:	2207      	movs	r2, #7
 800e542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e544:	e009      	b.n	800e55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e546:	4b2f      	ldr	r3, [pc, #188]	; (800e604 <xPortStartScheduler+0x134>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	3b01      	subs	r3, #1
 800e54c:	4a2d      	ldr	r2, [pc, #180]	; (800e604 <xPortStartScheduler+0x134>)
 800e54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e550:	78fb      	ldrb	r3, [r7, #3]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e55a:	78fb      	ldrb	r3, [r7, #3]
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e562:	2b80      	cmp	r3, #128	; 0x80
 800e564:	d0ef      	beq.n	800e546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e566:	4b27      	ldr	r3, [pc, #156]	; (800e604 <xPortStartScheduler+0x134>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f1c3 0307 	rsb	r3, r3, #7
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d00a      	beq.n	800e588 <xPortStartScheduler+0xb8>
	__asm volatile
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	60bb      	str	r3, [r7, #8]
}
 800e584:	bf00      	nop
 800e586:	e7fe      	b.n	800e586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e588:	4b1e      	ldr	r3, [pc, #120]	; (800e604 <xPortStartScheduler+0x134>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	021b      	lsls	r3, r3, #8
 800e58e:	4a1d      	ldr	r2, [pc, #116]	; (800e604 <xPortStartScheduler+0x134>)
 800e590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e592:	4b1c      	ldr	r3, [pc, #112]	; (800e604 <xPortStartScheduler+0x134>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e59a:	4a1a      	ldr	r2, [pc, #104]	; (800e604 <xPortStartScheduler+0x134>)
 800e59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5a6:	4b18      	ldr	r3, [pc, #96]	; (800e608 <xPortStartScheduler+0x138>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a17      	ldr	r2, [pc, #92]	; (800e608 <xPortStartScheduler+0x138>)
 800e5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5b2:	4b15      	ldr	r3, [pc, #84]	; (800e608 <xPortStartScheduler+0x138>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a14      	ldr	r2, [pc, #80]	; (800e608 <xPortStartScheduler+0x138>)
 800e5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5be:	f000 f8dd 	bl	800e77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5c2:	4b12      	ldr	r3, [pc, #72]	; (800e60c <xPortStartScheduler+0x13c>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5c8:	f000 f8fc 	bl	800e7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5cc:	4b10      	ldr	r3, [pc, #64]	; (800e610 <xPortStartScheduler+0x140>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a0f      	ldr	r2, [pc, #60]	; (800e610 <xPortStartScheduler+0x140>)
 800e5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5d8:	f7ff ff66 	bl	800e4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5dc:	f7ff fb76 	bl	800dccc <vTaskSwitchContext>
	prvTaskExitError();
 800e5e0:	f7ff ff20 	bl	800e424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3718      	adds	r7, #24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	e000ed00 	.word	0xe000ed00
 800e5f4:	410fc271 	.word	0x410fc271
 800e5f8:	410fc270 	.word	0x410fc270
 800e5fc:	e000e400 	.word	0xe000e400
 800e600:	200009b4 	.word	0x200009b4
 800e604:	200009b8 	.word	0x200009b8
 800e608:	e000ed20 	.word	0xe000ed20
 800e60c:	20000074 	.word	0x20000074
 800e610:	e000ef34 	.word	0xe000ef34

0800e614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	607b      	str	r3, [r7, #4]
}
 800e62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e62e:	4b0f      	ldr	r3, [pc, #60]	; (800e66c <vPortEnterCritical+0x58>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3301      	adds	r3, #1
 800e634:	4a0d      	ldr	r2, [pc, #52]	; (800e66c <vPortEnterCritical+0x58>)
 800e636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e638:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <vPortEnterCritical+0x58>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d10f      	bne.n	800e660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e640:	4b0b      	ldr	r3, [pc, #44]	; (800e670 <vPortEnterCritical+0x5c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <vPortEnterCritical+0x4c>
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	603b      	str	r3, [r7, #0]
}
 800e65c:	bf00      	nop
 800e65e:	e7fe      	b.n	800e65e <vPortEnterCritical+0x4a>
	}
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	20000074 	.word	0x20000074
 800e670:	e000ed04 	.word	0xe000ed04

0800e674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e67a:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <vPortExitCritical+0x50>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d10a      	bne.n	800e698 <vPortExitCritical+0x24>
	__asm volatile
 800e682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	607b      	str	r3, [r7, #4]
}
 800e694:	bf00      	nop
 800e696:	e7fe      	b.n	800e696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e698:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <vPortExitCritical+0x50>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3b01      	subs	r3, #1
 800e69e:	4a09      	ldr	r2, [pc, #36]	; (800e6c4 <vPortExitCritical+0x50>)
 800e6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6a2:	4b08      	ldr	r3, [pc, #32]	; (800e6c4 <vPortExitCritical+0x50>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d105      	bne.n	800e6b6 <vPortExitCritical+0x42>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	f383 8811 	msr	BASEPRI, r3
}
 800e6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6b6:	bf00      	nop
 800e6b8:	370c      	adds	r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	20000074 	.word	0x20000074
	...

0800e6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6d0:	f3ef 8009 	mrs	r0, PSP
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	4b15      	ldr	r3, [pc, #84]	; (800e730 <pxCurrentTCBConst>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	f01e 0f10 	tst.w	lr, #16
 800e6e0:	bf08      	it	eq
 800e6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	6010      	str	r0, [r2, #0]
 800e6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6f4:	f380 8811 	msr	BASEPRI, r0
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f7ff fae4 	bl	800dccc <vTaskSwitchContext>
 800e704:	f04f 0000 	mov.w	r0, #0
 800e708:	f380 8811 	msr	BASEPRI, r0
 800e70c:	bc09      	pop	{r0, r3}
 800e70e:	6819      	ldr	r1, [r3, #0]
 800e710:	6808      	ldr	r0, [r1, #0]
 800e712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e716:	f01e 0f10 	tst.w	lr, #16
 800e71a:	bf08      	it	eq
 800e71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e720:	f380 8809 	msr	PSP, r0
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	f3af 8000 	nop.w

0800e730 <pxCurrentTCBConst>:
 800e730:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e734:	bf00      	nop
 800e736:	bf00      	nop

0800e738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	607b      	str	r3, [r7, #4]
}
 800e750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e752:	f7ff fa03 	bl	800db5c <xTaskIncrementTick>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d003      	beq.n	800e764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e75c:	4b06      	ldr	r3, [pc, #24]	; (800e778 <SysTick_Handler+0x40>)
 800e75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	2300      	movs	r3, #0
 800e766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	f383 8811 	msr	BASEPRI, r3
}
 800e76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	e000ed04 	.word	0xe000ed04

0800e77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e780:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <vPortSetupTimerInterrupt+0x34>)
 800e782:	2200      	movs	r2, #0
 800e784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e786:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <vPortSetupTimerInterrupt+0x38>)
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e78c:	4b0a      	ldr	r3, [pc, #40]	; (800e7b8 <vPortSetupTimerInterrupt+0x3c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a0a      	ldr	r2, [pc, #40]	; (800e7bc <vPortSetupTimerInterrupt+0x40>)
 800e792:	fba2 2303 	umull	r2, r3, r2, r3
 800e796:	099b      	lsrs	r3, r3, #6
 800e798:	4a09      	ldr	r2, [pc, #36]	; (800e7c0 <vPortSetupTimerInterrupt+0x44>)
 800e79a:	3b01      	subs	r3, #1
 800e79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e79e:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <vPortSetupTimerInterrupt+0x34>)
 800e7a0:	2207      	movs	r2, #7
 800e7a2:	601a      	str	r2, [r3, #0]
}
 800e7a4:	bf00      	nop
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	e000e010 	.word	0xe000e010
 800e7b4:	e000e018 	.word	0xe000e018
 800e7b8:	20000000 	.word	0x20000000
 800e7bc:	10624dd3 	.word	0x10624dd3
 800e7c0:	e000e014 	.word	0xe000e014

0800e7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7d4 <vPortEnableVFP+0x10>
 800e7c8:	6801      	ldr	r1, [r0, #0]
 800e7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7ce:	6001      	str	r1, [r0, #0]
 800e7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7d2:	bf00      	nop
 800e7d4:	e000ed88 	.word	0xe000ed88

0800e7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7de:	f3ef 8305 	mrs	r3, IPSR
 800e7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b0f      	cmp	r3, #15
 800e7e8:	d914      	bls.n	800e814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7ea:	4a17      	ldr	r2, [pc, #92]	; (800e848 <vPortValidateInterruptPriority+0x70>)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7f4:	4b15      	ldr	r3, [pc, #84]	; (800e84c <vPortValidateInterruptPriority+0x74>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	7afa      	ldrb	r2, [r7, #11]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d20a      	bcs.n	800e814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	607b      	str	r3, [r7, #4]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e814:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <vPortValidateInterruptPriority+0x78>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e81c:	4b0d      	ldr	r3, [pc, #52]	; (800e854 <vPortValidateInterruptPriority+0x7c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	429a      	cmp	r2, r3
 800e822:	d90a      	bls.n	800e83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	603b      	str	r3, [r7, #0]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <vPortValidateInterruptPriority+0x60>
	}
 800e83a:	bf00      	nop
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	e000e3f0 	.word	0xe000e3f0
 800e84c:	200009b4 	.word	0x200009b4
 800e850:	e000ed0c 	.word	0xe000ed0c
 800e854:	200009b8 	.word	0x200009b8

0800e858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b08a      	sub	sp, #40	; 0x28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e860:	2300      	movs	r3, #0
 800e862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e864:	f7ff f8d0 	bl	800da08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e868:	4b5d      	ldr	r3, [pc, #372]	; (800e9e0 <pvPortMalloc+0x188>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e870:	f000 f924 	bl	800eabc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e874:	4b5b      	ldr	r3, [pc, #364]	; (800e9e4 <pvPortMalloc+0x18c>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4013      	ands	r3, r2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f040 8093 	bne.w	800e9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01d      	beq.n	800e8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e888:	2208      	movs	r2, #8
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4413      	add	r3, r2
 800e88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f003 0307 	and.w	r3, r3, #7
 800e896:	2b00      	cmp	r3, #0
 800e898:	d014      	beq.n	800e8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f023 0307 	bic.w	r3, r3, #7
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f003 0307 	and.w	r3, r3, #7
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00a      	beq.n	800e8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	617b      	str	r3, [r7, #20]
}
 800e8c0:	bf00      	nop
 800e8c2:	e7fe      	b.n	800e8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d06e      	beq.n	800e9a8 <pvPortMalloc+0x150>
 800e8ca:	4b47      	ldr	r3, [pc, #284]	; (800e9e8 <pvPortMalloc+0x190>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d869      	bhi.n	800e9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8d4:	4b45      	ldr	r3, [pc, #276]	; (800e9ec <pvPortMalloc+0x194>)
 800e8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8d8:	4b44      	ldr	r3, [pc, #272]	; (800e9ec <pvPortMalloc+0x194>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8de:	e004      	b.n	800e8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d903      	bls.n	800e8fc <pvPortMalloc+0xa4>
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1f1      	bne.n	800e8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8fc:	4b38      	ldr	r3, [pc, #224]	; (800e9e0 <pvPortMalloc+0x188>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e902:	429a      	cmp	r2, r3
 800e904:	d050      	beq.n	800e9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2208      	movs	r2, #8
 800e90c:	4413      	add	r3, r2
 800e90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	1ad2      	subs	r2, r2, r3
 800e920:	2308      	movs	r3, #8
 800e922:	005b      	lsls	r3, r3, #1
 800e924:	429a      	cmp	r2, r3
 800e926:	d91f      	bls.n	800e968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4413      	add	r3, r2
 800e92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	f003 0307 	and.w	r3, r3, #7
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <pvPortMalloc+0xf8>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	613b      	str	r3, [r7, #16]
}
 800e94c:	bf00      	nop
 800e94e:	e7fe      	b.n	800e94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	685a      	ldr	r2, [r3, #4]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	1ad2      	subs	r2, r2, r3
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e962:	69b8      	ldr	r0, [r7, #24]
 800e964:	f000 f90c 	bl	800eb80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e968:	4b1f      	ldr	r3, [pc, #124]	; (800e9e8 <pvPortMalloc+0x190>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	4a1d      	ldr	r2, [pc, #116]	; (800e9e8 <pvPortMalloc+0x190>)
 800e974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e976:	4b1c      	ldr	r3, [pc, #112]	; (800e9e8 <pvPortMalloc+0x190>)
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <pvPortMalloc+0x198>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d203      	bcs.n	800e98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e982:	4b19      	ldr	r3, [pc, #100]	; (800e9e8 <pvPortMalloc+0x190>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a1a      	ldr	r2, [pc, #104]	; (800e9f0 <pvPortMalloc+0x198>)
 800e988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	4b15      	ldr	r3, [pc, #84]	; (800e9e4 <pvPortMalloc+0x18c>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	431a      	orrs	r2, r3
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e99e:	4b15      	ldr	r3, [pc, #84]	; (800e9f4 <pvPortMalloc+0x19c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	4a13      	ldr	r2, [pc, #76]	; (800e9f4 <pvPortMalloc+0x19c>)
 800e9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9a8:	f7ff f83c 	bl	800da24 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e9b2:	f7f2 fa36 	bl	8000e22 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	f003 0307 	and.w	r3, r3, #7
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00a      	beq.n	800e9d6 <pvPortMalloc+0x17e>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	60fb      	str	r3, [r7, #12]
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <pvPortMalloc+0x17c>
	return pvReturn;
 800e9d6:	69fb      	ldr	r3, [r7, #28]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3728      	adds	r7, #40	; 0x28
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	200089c4 	.word	0x200089c4
 800e9e4:	200089d8 	.word	0x200089d8
 800e9e8:	200089c8 	.word	0x200089c8
 800e9ec:	200089bc 	.word	0x200089bc
 800e9f0:	200089cc 	.word	0x200089cc
 800e9f4:	200089d0 	.word	0x200089d0

0800e9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d04d      	beq.n	800eaa6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea0a:	2308      	movs	r3, #8
 800ea0c:	425b      	negs	r3, r3
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	4413      	add	r3, r2
 800ea12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	4b24      	ldr	r3, [pc, #144]	; (800eab0 <vPortFree+0xb8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4013      	ands	r3, r2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10a      	bne.n	800ea3c <vPortFree+0x44>
	__asm volatile
 800ea26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	60fb      	str	r3, [r7, #12]
}
 800ea38:	bf00      	nop
 800ea3a:	e7fe      	b.n	800ea3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00a      	beq.n	800ea5a <vPortFree+0x62>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	60bb      	str	r3, [r7, #8]
}
 800ea56:	bf00      	nop
 800ea58:	e7fe      	b.n	800ea58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	4b14      	ldr	r3, [pc, #80]	; (800eab0 <vPortFree+0xb8>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4013      	ands	r3, r2
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01e      	beq.n	800eaa6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d11a      	bne.n	800eaa6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	685a      	ldr	r2, [r3, #4]
 800ea74:	4b0e      	ldr	r3, [pc, #56]	; (800eab0 <vPortFree+0xb8>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	43db      	mvns	r3, r3
 800ea7a:	401a      	ands	r2, r3
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea80:	f7fe ffc2 	bl	800da08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	4b0a      	ldr	r3, [pc, #40]	; (800eab4 <vPortFree+0xbc>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	4a09      	ldr	r2, [pc, #36]	; (800eab4 <vPortFree+0xbc>)
 800ea90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea92:	6938      	ldr	r0, [r7, #16]
 800ea94:	f000 f874 	bl	800eb80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea98:	4b07      	ldr	r3, [pc, #28]	; (800eab8 <vPortFree+0xc0>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	4a06      	ldr	r2, [pc, #24]	; (800eab8 <vPortFree+0xc0>)
 800eaa0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eaa2:	f7fe ffbf 	bl	800da24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaa6:	bf00      	nop
 800eaa8:	3718      	adds	r7, #24
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	200089d8 	.word	0x200089d8
 800eab4:	200089c8 	.word	0x200089c8
 800eab8:	200089d4 	.word	0x200089d4

0800eabc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eac6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eac8:	4b27      	ldr	r3, [pc, #156]	; (800eb68 <prvHeapInit+0xac>)
 800eaca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f003 0307 	and.w	r3, r3, #7
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00c      	beq.n	800eaf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3307      	adds	r3, #7
 800eada:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f023 0307 	bic.w	r3, r3, #7
 800eae2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eae4:	68ba      	ldr	r2, [r7, #8]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	4a1f      	ldr	r2, [pc, #124]	; (800eb68 <prvHeapInit+0xac>)
 800eaec:	4413      	add	r3, r2
 800eaee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eaf4:	4a1d      	ldr	r2, [pc, #116]	; (800eb6c <prvHeapInit+0xb0>)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eafa:	4b1c      	ldr	r3, [pc, #112]	; (800eb6c <prvHeapInit+0xb0>)
 800eafc:	2200      	movs	r2, #0
 800eafe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	4413      	add	r3, r2
 800eb06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb08:	2208      	movs	r2, #8
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	1a9b      	subs	r3, r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f023 0307 	bic.w	r3, r3, #7
 800eb16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	4a15      	ldr	r2, [pc, #84]	; (800eb70 <prvHeapInit+0xb4>)
 800eb1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb1e:	4b14      	ldr	r3, [pc, #80]	; (800eb70 <prvHeapInit+0xb4>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2200      	movs	r2, #0
 800eb24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb26:	4b12      	ldr	r3, [pc, #72]	; (800eb70 <prvHeapInit+0xb4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	1ad2      	subs	r2, r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb3c:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <prvHeapInit+0xb4>)
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	4a0a      	ldr	r2, [pc, #40]	; (800eb74 <prvHeapInit+0xb8>)
 800eb4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	4a09      	ldr	r2, [pc, #36]	; (800eb78 <prvHeapInit+0xbc>)
 800eb52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb54:	4b09      	ldr	r3, [pc, #36]	; (800eb7c <prvHeapInit+0xc0>)
 800eb56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb5a:	601a      	str	r2, [r3, #0]
}
 800eb5c:	bf00      	nop
 800eb5e:	3714      	adds	r7, #20
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr
 800eb68:	200009bc 	.word	0x200009bc
 800eb6c:	200089bc 	.word	0x200089bc
 800eb70:	200089c4 	.word	0x200089c4
 800eb74:	200089cc 	.word	0x200089cc
 800eb78:	200089c8 	.word	0x200089c8
 800eb7c:	200089d8 	.word	0x200089d8

0800eb80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb88:	4b28      	ldr	r3, [pc, #160]	; (800ec2c <prvInsertBlockIntoFreeList+0xac>)
 800eb8a:	60fb      	str	r3, [r7, #12]
 800eb8c:	e002      	b.n	800eb94 <prvInsertBlockIntoFreeList+0x14>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d8f7      	bhi.n	800eb8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	4413      	add	r3, r2
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d108      	bne.n	800ebc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	441a      	add	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	441a      	add	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d118      	bne.n	800ec08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	4b15      	ldr	r3, [pc, #84]	; (800ec30 <prvInsertBlockIntoFreeList+0xb0>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d00d      	beq.n	800ebfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	441a      	add	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	e008      	b.n	800ec10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <prvInsertBlockIntoFreeList+0xb0>)
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	e003      	b.n	800ec10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d002      	beq.n	800ec1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec1e:	bf00      	nop
 800ec20:	3714      	adds	r7, #20
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	200089bc 	.word	0x200089bc
 800ec30:	200089c4 	.word	0x200089c4

0800ec34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	490e      	ldr	r1, [pc, #56]	; (800ec74 <MX_USB_HOST_Init+0x40>)
 800ec3c:	480e      	ldr	r0, [pc, #56]	; (800ec78 <MX_USB_HOST_Init+0x44>)
 800ec3e:	f7fb fea5 	bl	800a98c <USBH_Init>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ec48:	f7f2 fe46 	bl	80018d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ec4c:	490b      	ldr	r1, [pc, #44]	; (800ec7c <MX_USB_HOST_Init+0x48>)
 800ec4e:	480a      	ldr	r0, [pc, #40]	; (800ec78 <MX_USB_HOST_Init+0x44>)
 800ec50:	f7fb ff52 	bl	800aaf8 <USBH_RegisterClass>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d001      	beq.n	800ec5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ec5a:	f7f2 fe3d 	bl	80018d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ec5e:	4806      	ldr	r0, [pc, #24]	; (800ec78 <MX_USB_HOST_Init+0x44>)
 800ec60:	f7fb ffd6 	bl	800ac10 <USBH_Start>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ec6a:	f7f2 fe35 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ec6e:	bf00      	nop
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	0800ec81 	.word	0x0800ec81
 800ec78:	200089dc 	.word	0x200089dc
 800ec7c:	20000054 	.word	0x20000054

0800ec80 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d819      	bhi.n	800ecc8 <USBH_UserProcess+0x48>
 800ec94:	a201      	add	r2, pc, #4	; (adr r2, 800ec9c <USBH_UserProcess+0x1c>)
 800ec96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9a:	bf00      	nop
 800ec9c:	0800ecc9 	.word	0x0800ecc9
 800eca0:	0800ecb9 	.word	0x0800ecb9
 800eca4:	0800ecc9 	.word	0x0800ecc9
 800eca8:	0800ecc1 	.word	0x0800ecc1
 800ecac:	0800ecb1 	.word	0x0800ecb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ecb0:	4b09      	ldr	r3, [pc, #36]	; (800ecd8 <USBH_UserProcess+0x58>)
 800ecb2:	2203      	movs	r2, #3
 800ecb4:	701a      	strb	r2, [r3, #0]
  break;
 800ecb6:	e008      	b.n	800ecca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ecb8:	4b07      	ldr	r3, [pc, #28]	; (800ecd8 <USBH_UserProcess+0x58>)
 800ecba:	2202      	movs	r2, #2
 800ecbc:	701a      	strb	r2, [r3, #0]
  break;
 800ecbe:	e004      	b.n	800ecca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ecc0:	4b05      	ldr	r3, [pc, #20]	; (800ecd8 <USBH_UserProcess+0x58>)
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	701a      	strb	r2, [r3, #0]
  break;
 800ecc6:	e000      	b.n	800ecca <USBH_UserProcess+0x4a>

  default:
  break;
 800ecc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ecca:	bf00      	nop
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	20008dc0 	.word	0x20008dc0

0800ecdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ece4:	f107 0314 	add.w	r3, r7, #20
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	605a      	str	r2, [r3, #4]
 800ecee:	609a      	str	r2, [r3, #8]
 800ecf0:	60da      	str	r2, [r3, #12]
 800ecf2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a24      	ldr	r2, [pc, #144]	; (800ed8c <HAL_HCD_MspInit+0xb0>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d141      	bne.n	800ed82 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
 800ed02:	4b23      	ldr	r3, [pc, #140]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed06:	4a22      	ldr	r2, [pc, #136]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed0e:	4b20      	ldr	r3, [pc, #128]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed12:	f003 0302 	and.w	r3, r3, #2
 800ed16:	613b      	str	r3, [r7, #16]
 800ed18:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ed1a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ed1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed20:	2302      	movs	r3, #2
 800ed22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ed2c:	230c      	movs	r3, #12
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed30:	f107 0314 	add.w	r3, r7, #20
 800ed34:	4619      	mov	r1, r3
 800ed36:	4817      	ldr	r0, [pc, #92]	; (800ed94 <HAL_HCD_MspInit+0xb8>)
 800ed38:	f7f4 ffd6 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ed3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed42:	2300      	movs	r3, #0
 800ed44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed46:	2300      	movs	r3, #0
 800ed48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ed4a:	f107 0314 	add.w	r3, r7, #20
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4810      	ldr	r0, [pc, #64]	; (800ed94 <HAL_HCD_MspInit+0xb8>)
 800ed52:	f7f4 ffc9 	bl	8003ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ed56:	2300      	movs	r3, #0
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5e:	4a0c      	ldr	r2, [pc, #48]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed64:	6313      	str	r3, [r2, #48]	; 0x30
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <HAL_HCD_MspInit+0xb4>)
 800ed68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ed72:	2200      	movs	r2, #0
 800ed74:	2105      	movs	r1, #5
 800ed76:	204d      	movs	r0, #77	; 0x4d
 800ed78:	f7f4 fbc6 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ed7c:	204d      	movs	r0, #77	; 0x4d
 800ed7e:	f7f4 fbdf 	bl	8003540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ed82:	bf00      	nop
 800ed84:	3728      	adds	r7, #40	; 0x28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	40040000 	.word	0x40040000
 800ed90:	40023800 	.word	0x40023800
 800ed94:	40020400 	.word	0x40020400

0800ed98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fc fbe9 	bl	800b57e <USBH_LL_IncTimer>
}
 800edac:	bf00      	nop
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fc fc2d 	bl	800b622 <USBH_LL_Connect>
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fc fc42 	bl	800b668 <USBH_LL_Disconnect>
}
 800ede4:	bf00      	nop
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
 800edf8:	4613      	mov	r3, r2
 800edfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fc fc77 	bl	800b6f6 <USBH_LL_NotifyURBChange>
#endif
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fc fbd7 	bl	800b5d2 <USBH_LL_PortEnabled>
}
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fc fbe3 	bl	800b606 <USBH_LL_PortDisabled>
}
 800ee40:	bf00      	nop
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d132      	bne.n	800eec0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ee5a:	4a1c      	ldr	r2, [pc, #112]	; (800eecc <USBH_LL_Init+0x84>)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a19      	ldr	r2, [pc, #100]	; (800eecc <USBH_LL_Init+0x84>)
 800ee66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ee6a:	4b18      	ldr	r3, [pc, #96]	; (800eecc <USBH_LL_Init+0x84>)
 800ee6c:	4a18      	ldr	r2, [pc, #96]	; (800eed0 <USBH_LL_Init+0x88>)
 800ee6e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ee70:	4b16      	ldr	r3, [pc, #88]	; (800eecc <USBH_LL_Init+0x84>)
 800ee72:	220c      	movs	r2, #12
 800ee74:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ee76:	4b15      	ldr	r3, [pc, #84]	; (800eecc <USBH_LL_Init+0x84>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ee7c:	4b13      	ldr	r3, [pc, #76]	; (800eecc <USBH_LL_Init+0x84>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ee82:	4b12      	ldr	r3, [pc, #72]	; (800eecc <USBH_LL_Init+0x84>)
 800ee84:	2202      	movs	r2, #2
 800ee86:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ee88:	4b10      	ldr	r3, [pc, #64]	; (800eecc <USBH_LL_Init+0x84>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ee8e:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <USBH_LL_Init+0x84>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ee94:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <USBH_LL_Init+0x84>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ee9a:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <USBH_LL_Init+0x84>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800eea0:	480a      	ldr	r0, [pc, #40]	; (800eecc <USBH_LL_Init+0x84>)
 800eea2:	f7f5 f9f2 	bl	800428a <HAL_HCD_Init>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800eeac:	f7f2 fd14 	bl	80018d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800eeb0:	4806      	ldr	r0, [pc, #24]	; (800eecc <USBH_LL_Init+0x84>)
 800eeb2:	f7f5 fdd6 	bl	8004a62 <HAL_HCD_GetCurrentFrame>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7fc fb50 	bl	800b560 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20008dc4 	.word	0x20008dc4
 800eed0:	40040000 	.word	0x40040000

0800eed4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7f5 fd43 	bl	8004976 <HAL_HCD_Start>
 800eef0:	4603      	mov	r3, r0
 800eef2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 f95c 	bl	800f1b4 <USBH_Get_USB_Status>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b084      	sub	sp, #16
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7f5 fd4b 	bl	80049bc <HAL_HCD_Stop>
 800ef26:	4603      	mov	r3, r0
 800ef28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef2a:	7bfb      	ldrb	r3, [r7, #15]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 f941 	bl	800f1b4 <USBH_Get_USB_Status>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f5 fd93 	bl	8004a7e <HAL_HCD_GetCurrentSpeed>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d00c      	beq.n	800ef78 <USBH_LL_GetSpeed+0x38>
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d80d      	bhi.n	800ef7e <USBH_LL_GetSpeed+0x3e>
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d002      	beq.n	800ef6c <USBH_LL_GetSpeed+0x2c>
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d003      	beq.n	800ef72 <USBH_LL_GetSpeed+0x32>
 800ef6a:	e008      	b.n	800ef7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef70:	e008      	b.n	800ef84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ef72:	2301      	movs	r3, #1
 800ef74:	73fb      	strb	r3, [r7, #15]
    break;
 800ef76:	e005      	b.n	800ef84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ef78:	2302      	movs	r3, #2
 800ef7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef7c:	e002      	b.n	800ef84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	73fb      	strb	r3, [r7, #15]
    break;
 800ef82:	bf00      	nop
  }
  return  speed;
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7f5 fd26 	bl	80049f6 <HAL_HCD_ResetPort>
 800efaa:	4603      	mov	r3, r0
 800efac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800efae:	7bfb      	ldrb	r3, [r7, #15]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 f8ff 	bl	800f1b4 <USBH_Get_USB_Status>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efba:	7bbb      	ldrb	r3, [r7, #14]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	460b      	mov	r3, r1
 800efce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efd6:	78fa      	ldrb	r2, [r7, #3]
 800efd8:	4611      	mov	r1, r2
 800efda:	4618      	mov	r0, r3
 800efdc:	f7f5 fd2d 	bl	8004a3a <HAL_HCD_HC_GetXferCount>
 800efe0:	4603      	mov	r3, r0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800efea:	b590      	push	{r4, r7, lr}
 800efec:	b089      	sub	sp, #36	; 0x24
 800efee:	af04      	add	r7, sp, #16
 800eff0:	6078      	str	r0, [r7, #4]
 800eff2:	4608      	mov	r0, r1
 800eff4:	4611      	mov	r1, r2
 800eff6:	461a      	mov	r2, r3
 800eff8:	4603      	mov	r3, r0
 800effa:	70fb      	strb	r3, [r7, #3]
 800effc:	460b      	mov	r3, r1
 800effe:	70bb      	strb	r3, [r7, #2]
 800f000:	4613      	mov	r3, r2
 800f002:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f012:	787c      	ldrb	r4, [r7, #1]
 800f014:	78ba      	ldrb	r2, [r7, #2]
 800f016:	78f9      	ldrb	r1, [r7, #3]
 800f018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f01a:	9302      	str	r3, [sp, #8]
 800f01c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	4623      	mov	r3, r4
 800f02a:	f7f5 f990 	bl	800434e <HAL_HCD_HC_Init>
 800f02e:	4603      	mov	r3, r0
 800f030:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	4618      	mov	r0, r3
 800f036:	f000 f8bd 	bl	800f1b4 <USBH_Get_USB_Status>
 800f03a:	4603      	mov	r3, r0
 800f03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	bd90      	pop	{r4, r7, pc}

0800f048 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f062:	78fa      	ldrb	r2, [r7, #3]
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7f5 fa00 	bl	800446c <HAL_HCD_HC_Halt>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	4618      	mov	r0, r3
 800f074:	f000 f89e 	bl	800f1b4 <USBH_Get_USB_Status>
 800f078:	4603      	mov	r3, r0
 800f07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f086:	b590      	push	{r4, r7, lr}
 800f088:	b089      	sub	sp, #36	; 0x24
 800f08a:	af04      	add	r7, sp, #16
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	4608      	mov	r0, r1
 800f090:	4611      	mov	r1, r2
 800f092:	461a      	mov	r2, r3
 800f094:	4603      	mov	r3, r0
 800f096:	70fb      	strb	r3, [r7, #3]
 800f098:	460b      	mov	r3, r1
 800f09a:	70bb      	strb	r3, [r7, #2]
 800f09c:	4613      	mov	r3, r2
 800f09e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f0ae:	787c      	ldrb	r4, [r7, #1]
 800f0b0:	78ba      	ldrb	r2, [r7, #2]
 800f0b2:	78f9      	ldrb	r1, [r7, #3]
 800f0b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f0bc:	9302      	str	r3, [sp, #8]
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	4623      	mov	r3, r4
 800f0ca:	f7f5 f9f3 	bl	80044b4 <HAL_HCD_HC_SubmitRequest>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 f86d 	bl	800f1b4 <USBH_Get_USB_Status>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd90      	pop	{r4, r7, pc}

0800f0e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0fa:	78fa      	ldrb	r2, [r7, #3]
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f5 fc87 	bl	8004a12 <HAL_HCD_HC_GetURBState>
 800f104:	4603      	mov	r3, r0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	460b      	mov	r3, r1
 800f118:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f120:	2b00      	cmp	r3, #0
 800f122:	d103      	bne.n	800f12c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800f124:	78fb      	ldrb	r3, [r7, #3]
 800f126:	4618      	mov	r0, r3
 800f128:	f000 f870 	bl	800f20c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f12c:	20c8      	movs	r0, #200	; 0xc8
 800f12e:	f7f4 f90f 	bl	8003350 <HAL_Delay>
  return USBH_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	70fb      	strb	r3, [r7, #3]
 800f148:	4613      	mov	r3, r2
 800f14a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f152:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	212c      	movs	r1, #44	; 0x2c
 800f15a:	fb01 f303 	mul.w	r3, r1, r3
 800f15e:	4413      	add	r3, r2
 800f160:	333b      	adds	r3, #59	; 0x3b
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d009      	beq.n	800f17c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f168:	78fb      	ldrb	r3, [r7, #3]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	212c      	movs	r1, #44	; 0x2c
 800f16e:	fb01 f303 	mul.w	r3, r1, r3
 800f172:	4413      	add	r3, r2
 800f174:	3354      	adds	r3, #84	; 0x54
 800f176:	78ba      	ldrb	r2, [r7, #2]
 800f178:	701a      	strb	r2, [r3, #0]
 800f17a:	e008      	b.n	800f18e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f17c:	78fb      	ldrb	r3, [r7, #3]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	212c      	movs	r1, #44	; 0x2c
 800f182:	fb01 f303 	mul.w	r3, r1, r3
 800f186:	4413      	add	r3, r2
 800f188:	3355      	adds	r3, #85	; 0x55
 800f18a:	78ba      	ldrb	r2, [r7, #2]
 800f18c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f7f4 f8d3 	bl	8003350 <HAL_Delay>
}
 800f1aa:	bf00      	nop
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
	...

0800f1b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	d817      	bhi.n	800f1f8 <USBH_Get_USB_Status+0x44>
 800f1c8:	a201      	add	r2, pc, #4	; (adr r2, 800f1d0 <USBH_Get_USB_Status+0x1c>)
 800f1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ce:	bf00      	nop
 800f1d0:	0800f1e1 	.word	0x0800f1e1
 800f1d4:	0800f1e7 	.word	0x0800f1e7
 800f1d8:	0800f1ed 	.word	0x0800f1ed
 800f1dc:	0800f1f3 	.word	0x0800f1f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e4:	e00b      	b.n	800f1fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ea:	e008      	b.n	800f1fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f0:	e005      	b.n	800f1fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f6:	e002      	b.n	800f1fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f1fc:	bf00      	nop
  }
  return usb_status;
 800f1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	4603      	mov	r3, r0
 800f214:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f216:	79fb      	ldrb	r3, [r7, #7]
 800f218:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800f21a:	79fb      	ldrb	r3, [r7, #7]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d102      	bne.n	800f226 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f220:	2301      	movs	r3, #1
 800f222:	73fb      	strb	r3, [r7, #15]
 800f224:	e001      	b.n	800f22a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	461a      	mov	r2, r3
 800f22e:	2110      	movs	r1, #16
 800f230:	4803      	ldr	r0, [pc, #12]	; (800f240 <MX_DriverVbusHS+0x34>)
 800f232:	f7f5 f811 	bl	8004258 <HAL_GPIO_WritePin>
}
 800f236:	bf00      	nop
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	40020800 	.word	0x40020800

0800f244 <__errno>:
 800f244:	4b01      	ldr	r3, [pc, #4]	; (800f24c <__errno+0x8>)
 800f246:	6818      	ldr	r0, [r3, #0]
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	20000078 	.word	0x20000078

0800f250 <__libc_init_array>:
 800f250:	b570      	push	{r4, r5, r6, lr}
 800f252:	4d0d      	ldr	r5, [pc, #52]	; (800f288 <__libc_init_array+0x38>)
 800f254:	4c0d      	ldr	r4, [pc, #52]	; (800f28c <__libc_init_array+0x3c>)
 800f256:	1b64      	subs	r4, r4, r5
 800f258:	10a4      	asrs	r4, r4, #2
 800f25a:	2600      	movs	r6, #0
 800f25c:	42a6      	cmp	r6, r4
 800f25e:	d109      	bne.n	800f274 <__libc_init_array+0x24>
 800f260:	4d0b      	ldr	r5, [pc, #44]	; (800f290 <__libc_init_array+0x40>)
 800f262:	4c0c      	ldr	r4, [pc, #48]	; (800f294 <__libc_init_array+0x44>)
 800f264:	f000 fa84 	bl	800f770 <_init>
 800f268:	1b64      	subs	r4, r4, r5
 800f26a:	10a4      	asrs	r4, r4, #2
 800f26c:	2600      	movs	r6, #0
 800f26e:	42a6      	cmp	r6, r4
 800f270:	d105      	bne.n	800f27e <__libc_init_array+0x2e>
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	f855 3b04 	ldr.w	r3, [r5], #4
 800f278:	4798      	blx	r3
 800f27a:	3601      	adds	r6, #1
 800f27c:	e7ee      	b.n	800f25c <__libc_init_array+0xc>
 800f27e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f282:	4798      	blx	r3
 800f284:	3601      	adds	r6, #1
 800f286:	e7f2      	b.n	800f26e <__libc_init_array+0x1e>
 800f288:	0801133c 	.word	0x0801133c
 800f28c:	0801133c 	.word	0x0801133c
 800f290:	0801133c 	.word	0x0801133c
 800f294:	08011340 	.word	0x08011340

0800f298 <__retarget_lock_acquire_recursive>:
 800f298:	4770      	bx	lr

0800f29a <__retarget_lock_release_recursive>:
 800f29a:	4770      	bx	lr

0800f29c <malloc>:
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <malloc+0xc>)
 800f29e:	4601      	mov	r1, r0
 800f2a0:	6818      	ldr	r0, [r3, #0]
 800f2a2:	f000 b88d 	b.w	800f3c0 <_malloc_r>
 800f2a6:	bf00      	nop
 800f2a8:	20000078 	.word	0x20000078

0800f2ac <free>:
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <free+0xc>)
 800f2ae:	4601      	mov	r1, r0
 800f2b0:	6818      	ldr	r0, [r3, #0]
 800f2b2:	f000 b819 	b.w	800f2e8 <_free_r>
 800f2b6:	bf00      	nop
 800f2b8:	20000078 	.word	0x20000078

0800f2bc <memcpy>:
 800f2bc:	440a      	add	r2, r1
 800f2be:	4291      	cmp	r1, r2
 800f2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2c4:	d100      	bne.n	800f2c8 <memcpy+0xc>
 800f2c6:	4770      	bx	lr
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2d2:	4291      	cmp	r1, r2
 800f2d4:	d1f9      	bne.n	800f2ca <memcpy+0xe>
 800f2d6:	bd10      	pop	{r4, pc}

0800f2d8 <memset>:
 800f2d8:	4402      	add	r2, r0
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d100      	bne.n	800f2e2 <memset+0xa>
 800f2e0:	4770      	bx	lr
 800f2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f2e6:	e7f9      	b.n	800f2dc <memset+0x4>

0800f2e8 <_free_r>:
 800f2e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2ea:	2900      	cmp	r1, #0
 800f2ec:	d044      	beq.n	800f378 <_free_r+0x90>
 800f2ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2f2:	9001      	str	r0, [sp, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f2fa:	bfb8      	it	lt
 800f2fc:	18e4      	addlt	r4, r4, r3
 800f2fe:	f000 f94d 	bl	800f59c <__malloc_lock>
 800f302:	4a1e      	ldr	r2, [pc, #120]	; (800f37c <_free_r+0x94>)
 800f304:	9801      	ldr	r0, [sp, #4]
 800f306:	6813      	ldr	r3, [r2, #0]
 800f308:	b933      	cbnz	r3, 800f318 <_free_r+0x30>
 800f30a:	6063      	str	r3, [r4, #4]
 800f30c:	6014      	str	r4, [r2, #0]
 800f30e:	b003      	add	sp, #12
 800f310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f314:	f000 b948 	b.w	800f5a8 <__malloc_unlock>
 800f318:	42a3      	cmp	r3, r4
 800f31a:	d908      	bls.n	800f32e <_free_r+0x46>
 800f31c:	6825      	ldr	r5, [r4, #0]
 800f31e:	1961      	adds	r1, r4, r5
 800f320:	428b      	cmp	r3, r1
 800f322:	bf01      	itttt	eq
 800f324:	6819      	ldreq	r1, [r3, #0]
 800f326:	685b      	ldreq	r3, [r3, #4]
 800f328:	1949      	addeq	r1, r1, r5
 800f32a:	6021      	streq	r1, [r4, #0]
 800f32c:	e7ed      	b.n	800f30a <_free_r+0x22>
 800f32e:	461a      	mov	r2, r3
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	b10b      	cbz	r3, 800f338 <_free_r+0x50>
 800f334:	42a3      	cmp	r3, r4
 800f336:	d9fa      	bls.n	800f32e <_free_r+0x46>
 800f338:	6811      	ldr	r1, [r2, #0]
 800f33a:	1855      	adds	r5, r2, r1
 800f33c:	42a5      	cmp	r5, r4
 800f33e:	d10b      	bne.n	800f358 <_free_r+0x70>
 800f340:	6824      	ldr	r4, [r4, #0]
 800f342:	4421      	add	r1, r4
 800f344:	1854      	adds	r4, r2, r1
 800f346:	42a3      	cmp	r3, r4
 800f348:	6011      	str	r1, [r2, #0]
 800f34a:	d1e0      	bne.n	800f30e <_free_r+0x26>
 800f34c:	681c      	ldr	r4, [r3, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	6053      	str	r3, [r2, #4]
 800f352:	4421      	add	r1, r4
 800f354:	6011      	str	r1, [r2, #0]
 800f356:	e7da      	b.n	800f30e <_free_r+0x26>
 800f358:	d902      	bls.n	800f360 <_free_r+0x78>
 800f35a:	230c      	movs	r3, #12
 800f35c:	6003      	str	r3, [r0, #0]
 800f35e:	e7d6      	b.n	800f30e <_free_r+0x26>
 800f360:	6825      	ldr	r5, [r4, #0]
 800f362:	1961      	adds	r1, r4, r5
 800f364:	428b      	cmp	r3, r1
 800f366:	bf04      	itt	eq
 800f368:	6819      	ldreq	r1, [r3, #0]
 800f36a:	685b      	ldreq	r3, [r3, #4]
 800f36c:	6063      	str	r3, [r4, #4]
 800f36e:	bf04      	itt	eq
 800f370:	1949      	addeq	r1, r1, r5
 800f372:	6021      	streq	r1, [r4, #0]
 800f374:	6054      	str	r4, [r2, #4]
 800f376:	e7ca      	b.n	800f30e <_free_r+0x26>
 800f378:	b003      	add	sp, #12
 800f37a:	bd30      	pop	{r4, r5, pc}
 800f37c:	200090cc 	.word	0x200090cc

0800f380 <sbrk_aligned>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	4e0e      	ldr	r6, [pc, #56]	; (800f3bc <sbrk_aligned+0x3c>)
 800f384:	460c      	mov	r4, r1
 800f386:	6831      	ldr	r1, [r6, #0]
 800f388:	4605      	mov	r5, r0
 800f38a:	b911      	cbnz	r1, 800f392 <sbrk_aligned+0x12>
 800f38c:	f000 f8f6 	bl	800f57c <_sbrk_r>
 800f390:	6030      	str	r0, [r6, #0]
 800f392:	4621      	mov	r1, r4
 800f394:	4628      	mov	r0, r5
 800f396:	f000 f8f1 	bl	800f57c <_sbrk_r>
 800f39a:	1c43      	adds	r3, r0, #1
 800f39c:	d00a      	beq.n	800f3b4 <sbrk_aligned+0x34>
 800f39e:	1cc4      	adds	r4, r0, #3
 800f3a0:	f024 0403 	bic.w	r4, r4, #3
 800f3a4:	42a0      	cmp	r0, r4
 800f3a6:	d007      	beq.n	800f3b8 <sbrk_aligned+0x38>
 800f3a8:	1a21      	subs	r1, r4, r0
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 f8e6 	bl	800f57c <_sbrk_r>
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	d101      	bne.n	800f3b8 <sbrk_aligned+0x38>
 800f3b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	200090d0 	.word	0x200090d0

0800f3c0 <_malloc_r>:
 800f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c4:	1ccd      	adds	r5, r1, #3
 800f3c6:	f025 0503 	bic.w	r5, r5, #3
 800f3ca:	3508      	adds	r5, #8
 800f3cc:	2d0c      	cmp	r5, #12
 800f3ce:	bf38      	it	cc
 800f3d0:	250c      	movcc	r5, #12
 800f3d2:	2d00      	cmp	r5, #0
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	db01      	blt.n	800f3dc <_malloc_r+0x1c>
 800f3d8:	42a9      	cmp	r1, r5
 800f3da:	d905      	bls.n	800f3e8 <_malloc_r+0x28>
 800f3dc:	230c      	movs	r3, #12
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	2600      	movs	r6, #0
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e8:	4e2e      	ldr	r6, [pc, #184]	; (800f4a4 <_malloc_r+0xe4>)
 800f3ea:	f000 f8d7 	bl	800f59c <__malloc_lock>
 800f3ee:	6833      	ldr	r3, [r6, #0]
 800f3f0:	461c      	mov	r4, r3
 800f3f2:	bb34      	cbnz	r4, 800f442 <_malloc_r+0x82>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	f7ff ffc2 	bl	800f380 <sbrk_aligned>
 800f3fc:	1c43      	adds	r3, r0, #1
 800f3fe:	4604      	mov	r4, r0
 800f400:	d14d      	bne.n	800f49e <_malloc_r+0xde>
 800f402:	6834      	ldr	r4, [r6, #0]
 800f404:	4626      	mov	r6, r4
 800f406:	2e00      	cmp	r6, #0
 800f408:	d140      	bne.n	800f48c <_malloc_r+0xcc>
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	4631      	mov	r1, r6
 800f40e:	4638      	mov	r0, r7
 800f410:	eb04 0803 	add.w	r8, r4, r3
 800f414:	f000 f8b2 	bl	800f57c <_sbrk_r>
 800f418:	4580      	cmp	r8, r0
 800f41a:	d13a      	bne.n	800f492 <_malloc_r+0xd2>
 800f41c:	6821      	ldr	r1, [r4, #0]
 800f41e:	3503      	adds	r5, #3
 800f420:	1a6d      	subs	r5, r5, r1
 800f422:	f025 0503 	bic.w	r5, r5, #3
 800f426:	3508      	adds	r5, #8
 800f428:	2d0c      	cmp	r5, #12
 800f42a:	bf38      	it	cc
 800f42c:	250c      	movcc	r5, #12
 800f42e:	4629      	mov	r1, r5
 800f430:	4638      	mov	r0, r7
 800f432:	f7ff ffa5 	bl	800f380 <sbrk_aligned>
 800f436:	3001      	adds	r0, #1
 800f438:	d02b      	beq.n	800f492 <_malloc_r+0xd2>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	442b      	add	r3, r5
 800f43e:	6023      	str	r3, [r4, #0]
 800f440:	e00e      	b.n	800f460 <_malloc_r+0xa0>
 800f442:	6822      	ldr	r2, [r4, #0]
 800f444:	1b52      	subs	r2, r2, r5
 800f446:	d41e      	bmi.n	800f486 <_malloc_r+0xc6>
 800f448:	2a0b      	cmp	r2, #11
 800f44a:	d916      	bls.n	800f47a <_malloc_r+0xba>
 800f44c:	1961      	adds	r1, r4, r5
 800f44e:	42a3      	cmp	r3, r4
 800f450:	6025      	str	r5, [r4, #0]
 800f452:	bf18      	it	ne
 800f454:	6059      	strne	r1, [r3, #4]
 800f456:	6863      	ldr	r3, [r4, #4]
 800f458:	bf08      	it	eq
 800f45a:	6031      	streq	r1, [r6, #0]
 800f45c:	5162      	str	r2, [r4, r5]
 800f45e:	604b      	str	r3, [r1, #4]
 800f460:	4638      	mov	r0, r7
 800f462:	f104 060b 	add.w	r6, r4, #11
 800f466:	f000 f89f 	bl	800f5a8 <__malloc_unlock>
 800f46a:	f026 0607 	bic.w	r6, r6, #7
 800f46e:	1d23      	adds	r3, r4, #4
 800f470:	1af2      	subs	r2, r6, r3
 800f472:	d0b6      	beq.n	800f3e2 <_malloc_r+0x22>
 800f474:	1b9b      	subs	r3, r3, r6
 800f476:	50a3      	str	r3, [r4, r2]
 800f478:	e7b3      	b.n	800f3e2 <_malloc_r+0x22>
 800f47a:	6862      	ldr	r2, [r4, #4]
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	bf0c      	ite	eq
 800f480:	6032      	streq	r2, [r6, #0]
 800f482:	605a      	strne	r2, [r3, #4]
 800f484:	e7ec      	b.n	800f460 <_malloc_r+0xa0>
 800f486:	4623      	mov	r3, r4
 800f488:	6864      	ldr	r4, [r4, #4]
 800f48a:	e7b2      	b.n	800f3f2 <_malloc_r+0x32>
 800f48c:	4634      	mov	r4, r6
 800f48e:	6876      	ldr	r6, [r6, #4]
 800f490:	e7b9      	b.n	800f406 <_malloc_r+0x46>
 800f492:	230c      	movs	r3, #12
 800f494:	603b      	str	r3, [r7, #0]
 800f496:	4638      	mov	r0, r7
 800f498:	f000 f886 	bl	800f5a8 <__malloc_unlock>
 800f49c:	e7a1      	b.n	800f3e2 <_malloc_r+0x22>
 800f49e:	6025      	str	r5, [r4, #0]
 800f4a0:	e7de      	b.n	800f460 <_malloc_r+0xa0>
 800f4a2:	bf00      	nop
 800f4a4:	200090cc 	.word	0x200090cc

0800f4a8 <cleanup_glue>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	460c      	mov	r4, r1
 800f4ac:	6809      	ldr	r1, [r1, #0]
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	b109      	cbz	r1, 800f4b6 <cleanup_glue+0xe>
 800f4b2:	f7ff fff9 	bl	800f4a8 <cleanup_glue>
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4be:	f7ff bf13 	b.w	800f2e8 <_free_r>
	...

0800f4c4 <_reclaim_reent>:
 800f4c4:	4b2c      	ldr	r3, [pc, #176]	; (800f578 <_reclaim_reent+0xb4>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4283      	cmp	r3, r0
 800f4ca:	b570      	push	{r4, r5, r6, lr}
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	d051      	beq.n	800f574 <_reclaim_reent+0xb0>
 800f4d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f4d2:	b143      	cbz	r3, 800f4e6 <_reclaim_reent+0x22>
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d14a      	bne.n	800f570 <_reclaim_reent+0xac>
 800f4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4dc:	6819      	ldr	r1, [r3, #0]
 800f4de:	b111      	cbz	r1, 800f4e6 <_reclaim_reent+0x22>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f7ff ff01 	bl	800f2e8 <_free_r>
 800f4e6:	6961      	ldr	r1, [r4, #20]
 800f4e8:	b111      	cbz	r1, 800f4f0 <_reclaim_reent+0x2c>
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7ff fefc 	bl	800f2e8 <_free_r>
 800f4f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f4f2:	b111      	cbz	r1, 800f4fa <_reclaim_reent+0x36>
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f7ff fef7 	bl	800f2e8 <_free_r>
 800f4fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f4fc:	b111      	cbz	r1, 800f504 <_reclaim_reent+0x40>
 800f4fe:	4620      	mov	r0, r4
 800f500:	f7ff fef2 	bl	800f2e8 <_free_r>
 800f504:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f506:	b111      	cbz	r1, 800f50e <_reclaim_reent+0x4a>
 800f508:	4620      	mov	r0, r4
 800f50a:	f7ff feed 	bl	800f2e8 <_free_r>
 800f50e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f510:	b111      	cbz	r1, 800f518 <_reclaim_reent+0x54>
 800f512:	4620      	mov	r0, r4
 800f514:	f7ff fee8 	bl	800f2e8 <_free_r>
 800f518:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f51a:	b111      	cbz	r1, 800f522 <_reclaim_reent+0x5e>
 800f51c:	4620      	mov	r0, r4
 800f51e:	f7ff fee3 	bl	800f2e8 <_free_r>
 800f522:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f524:	b111      	cbz	r1, 800f52c <_reclaim_reent+0x68>
 800f526:	4620      	mov	r0, r4
 800f528:	f7ff fede 	bl	800f2e8 <_free_r>
 800f52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f52e:	b111      	cbz	r1, 800f536 <_reclaim_reent+0x72>
 800f530:	4620      	mov	r0, r4
 800f532:	f7ff fed9 	bl	800f2e8 <_free_r>
 800f536:	69a3      	ldr	r3, [r4, #24]
 800f538:	b1e3      	cbz	r3, 800f574 <_reclaim_reent+0xb0>
 800f53a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f53c:	4620      	mov	r0, r4
 800f53e:	4798      	blx	r3
 800f540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f542:	b1b9      	cbz	r1, 800f574 <_reclaim_reent+0xb0>
 800f544:	4620      	mov	r0, r4
 800f546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f54a:	f7ff bfad 	b.w	800f4a8 <cleanup_glue>
 800f54e:	5949      	ldr	r1, [r1, r5]
 800f550:	b941      	cbnz	r1, 800f564 <_reclaim_reent+0xa0>
 800f552:	3504      	adds	r5, #4
 800f554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f556:	2d80      	cmp	r5, #128	; 0x80
 800f558:	68d9      	ldr	r1, [r3, #12]
 800f55a:	d1f8      	bne.n	800f54e <_reclaim_reent+0x8a>
 800f55c:	4620      	mov	r0, r4
 800f55e:	f7ff fec3 	bl	800f2e8 <_free_r>
 800f562:	e7ba      	b.n	800f4da <_reclaim_reent+0x16>
 800f564:	680e      	ldr	r6, [r1, #0]
 800f566:	4620      	mov	r0, r4
 800f568:	f7ff febe 	bl	800f2e8 <_free_r>
 800f56c:	4631      	mov	r1, r6
 800f56e:	e7ef      	b.n	800f550 <_reclaim_reent+0x8c>
 800f570:	2500      	movs	r5, #0
 800f572:	e7ef      	b.n	800f554 <_reclaim_reent+0x90>
 800f574:	bd70      	pop	{r4, r5, r6, pc}
 800f576:	bf00      	nop
 800f578:	20000078 	.word	0x20000078

0800f57c <_sbrk_r>:
 800f57c:	b538      	push	{r3, r4, r5, lr}
 800f57e:	4d06      	ldr	r5, [pc, #24]	; (800f598 <_sbrk_r+0x1c>)
 800f580:	2300      	movs	r3, #0
 800f582:	4604      	mov	r4, r0
 800f584:	4608      	mov	r0, r1
 800f586:	602b      	str	r3, [r5, #0]
 800f588:	f7f2 fe14 	bl	80021b4 <_sbrk>
 800f58c:	1c43      	adds	r3, r0, #1
 800f58e:	d102      	bne.n	800f596 <_sbrk_r+0x1a>
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	b103      	cbz	r3, 800f596 <_sbrk_r+0x1a>
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	200090d4 	.word	0x200090d4

0800f59c <__malloc_lock>:
 800f59c:	4801      	ldr	r0, [pc, #4]	; (800f5a4 <__malloc_lock+0x8>)
 800f59e:	f7ff be7b 	b.w	800f298 <__retarget_lock_acquire_recursive>
 800f5a2:	bf00      	nop
 800f5a4:	200090c8 	.word	0x200090c8

0800f5a8 <__malloc_unlock>:
 800f5a8:	4801      	ldr	r0, [pc, #4]	; (800f5b0 <__malloc_unlock+0x8>)
 800f5aa:	f7ff be76 	b.w	800f29a <__retarget_lock_release_recursive>
 800f5ae:	bf00      	nop
 800f5b0:	200090c8 	.word	0x200090c8

0800f5b4 <sqrt>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	ed2d 8b02 	vpush	{d8}
 800f5ba:	ec55 4b10 	vmov	r4, r5, d0
 800f5be:	f000 f825 	bl	800f60c <__ieee754_sqrt>
 800f5c2:	4622      	mov	r2, r4
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f5ce:	eef0 8a60 	vmov.f32	s17, s1
 800f5d2:	f7f1 fa63 	bl	8000a9c <__aeabi_dcmpun>
 800f5d6:	b990      	cbnz	r0, 800f5fe <sqrt+0x4a>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2300      	movs	r3, #0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f7f1 fa34 	bl	8000a4c <__aeabi_dcmplt>
 800f5e4:	b158      	cbz	r0, 800f5fe <sqrt+0x4a>
 800f5e6:	f7ff fe2d 	bl	800f244 <__errno>
 800f5ea:	2321      	movs	r3, #33	; 0x21
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	f7f1 f8e1 	bl	80007bc <__aeabi_ddiv>
 800f5fa:	ec41 0b18 	vmov	d8, r0, r1
 800f5fe:	eeb0 0a48 	vmov.f32	s0, s16
 800f602:	eef0 0a68 	vmov.f32	s1, s17
 800f606:	ecbd 8b02 	vpop	{d8}
 800f60a:	bd38      	pop	{r3, r4, r5, pc}

0800f60c <__ieee754_sqrt>:
 800f60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f610:	ec55 4b10 	vmov	r4, r5, d0
 800f614:	4e55      	ldr	r6, [pc, #340]	; (800f76c <__ieee754_sqrt+0x160>)
 800f616:	43ae      	bics	r6, r5
 800f618:	ee10 0a10 	vmov	r0, s0
 800f61c:	ee10 3a10 	vmov	r3, s0
 800f620:	462a      	mov	r2, r5
 800f622:	4629      	mov	r1, r5
 800f624:	d110      	bne.n	800f648 <__ieee754_sqrt+0x3c>
 800f626:	ee10 2a10 	vmov	r2, s0
 800f62a:	462b      	mov	r3, r5
 800f62c:	f7f0 ff9c 	bl	8000568 <__aeabi_dmul>
 800f630:	4602      	mov	r2, r0
 800f632:	460b      	mov	r3, r1
 800f634:	4620      	mov	r0, r4
 800f636:	4629      	mov	r1, r5
 800f638:	f7f0 fde0 	bl	80001fc <__adddf3>
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	ec45 4b10 	vmov	d0, r4, r5
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f648:	2d00      	cmp	r5, #0
 800f64a:	dc10      	bgt.n	800f66e <__ieee754_sqrt+0x62>
 800f64c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f650:	4330      	orrs	r0, r6
 800f652:	d0f5      	beq.n	800f640 <__ieee754_sqrt+0x34>
 800f654:	b15d      	cbz	r5, 800f66e <__ieee754_sqrt+0x62>
 800f656:	ee10 2a10 	vmov	r2, s0
 800f65a:	462b      	mov	r3, r5
 800f65c:	ee10 0a10 	vmov	r0, s0
 800f660:	f7f0 fdca 	bl	80001f8 <__aeabi_dsub>
 800f664:	4602      	mov	r2, r0
 800f666:	460b      	mov	r3, r1
 800f668:	f7f1 f8a8 	bl	80007bc <__aeabi_ddiv>
 800f66c:	e7e6      	b.n	800f63c <__ieee754_sqrt+0x30>
 800f66e:	1512      	asrs	r2, r2, #20
 800f670:	d074      	beq.n	800f75c <__ieee754_sqrt+0x150>
 800f672:	07d4      	lsls	r4, r2, #31
 800f674:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f678:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f67c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f680:	bf5e      	ittt	pl
 800f682:	0fda      	lsrpl	r2, r3, #31
 800f684:	005b      	lslpl	r3, r3, #1
 800f686:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f68a:	2400      	movs	r4, #0
 800f68c:	0fda      	lsrs	r2, r3, #31
 800f68e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f692:	107f      	asrs	r7, r7, #1
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	2516      	movs	r5, #22
 800f698:	4620      	mov	r0, r4
 800f69a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f69e:	1886      	adds	r6, r0, r2
 800f6a0:	428e      	cmp	r6, r1
 800f6a2:	bfde      	ittt	le
 800f6a4:	1b89      	suble	r1, r1, r6
 800f6a6:	18b0      	addle	r0, r6, r2
 800f6a8:	18a4      	addle	r4, r4, r2
 800f6aa:	0049      	lsls	r1, r1, #1
 800f6ac:	3d01      	subs	r5, #1
 800f6ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f6b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f6b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6ba:	d1f0      	bne.n	800f69e <__ieee754_sqrt+0x92>
 800f6bc:	462a      	mov	r2, r5
 800f6be:	f04f 0e20 	mov.w	lr, #32
 800f6c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f6c6:	4281      	cmp	r1, r0
 800f6c8:	eb06 0c05 	add.w	ip, r6, r5
 800f6cc:	dc02      	bgt.n	800f6d4 <__ieee754_sqrt+0xc8>
 800f6ce:	d113      	bne.n	800f6f8 <__ieee754_sqrt+0xec>
 800f6d0:	459c      	cmp	ip, r3
 800f6d2:	d811      	bhi.n	800f6f8 <__ieee754_sqrt+0xec>
 800f6d4:	f1bc 0f00 	cmp.w	ip, #0
 800f6d8:	eb0c 0506 	add.w	r5, ip, r6
 800f6dc:	da43      	bge.n	800f766 <__ieee754_sqrt+0x15a>
 800f6de:	2d00      	cmp	r5, #0
 800f6e0:	db41      	blt.n	800f766 <__ieee754_sqrt+0x15a>
 800f6e2:	f100 0801 	add.w	r8, r0, #1
 800f6e6:	1a09      	subs	r1, r1, r0
 800f6e8:	459c      	cmp	ip, r3
 800f6ea:	bf88      	it	hi
 800f6ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f6f0:	eba3 030c 	sub.w	r3, r3, ip
 800f6f4:	4432      	add	r2, r6
 800f6f6:	4640      	mov	r0, r8
 800f6f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f6fc:	f1be 0e01 	subs.w	lr, lr, #1
 800f700:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f708:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f70c:	d1db      	bne.n	800f6c6 <__ieee754_sqrt+0xba>
 800f70e:	430b      	orrs	r3, r1
 800f710:	d006      	beq.n	800f720 <__ieee754_sqrt+0x114>
 800f712:	1c50      	adds	r0, r2, #1
 800f714:	bf13      	iteet	ne
 800f716:	3201      	addne	r2, #1
 800f718:	3401      	addeq	r4, #1
 800f71a:	4672      	moveq	r2, lr
 800f71c:	f022 0201 	bicne.w	r2, r2, #1
 800f720:	1063      	asrs	r3, r4, #1
 800f722:	0852      	lsrs	r2, r2, #1
 800f724:	07e1      	lsls	r1, r4, #31
 800f726:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f72a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f72e:	bf48      	it	mi
 800f730:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f734:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f738:	4614      	mov	r4, r2
 800f73a:	e781      	b.n	800f640 <__ieee754_sqrt+0x34>
 800f73c:	0ad9      	lsrs	r1, r3, #11
 800f73e:	3815      	subs	r0, #21
 800f740:	055b      	lsls	r3, r3, #21
 800f742:	2900      	cmp	r1, #0
 800f744:	d0fa      	beq.n	800f73c <__ieee754_sqrt+0x130>
 800f746:	02cd      	lsls	r5, r1, #11
 800f748:	d50a      	bpl.n	800f760 <__ieee754_sqrt+0x154>
 800f74a:	f1c2 0420 	rsb	r4, r2, #32
 800f74e:	fa23 f404 	lsr.w	r4, r3, r4
 800f752:	1e55      	subs	r5, r2, #1
 800f754:	4093      	lsls	r3, r2
 800f756:	4321      	orrs	r1, r4
 800f758:	1b42      	subs	r2, r0, r5
 800f75a:	e78a      	b.n	800f672 <__ieee754_sqrt+0x66>
 800f75c:	4610      	mov	r0, r2
 800f75e:	e7f0      	b.n	800f742 <__ieee754_sqrt+0x136>
 800f760:	0049      	lsls	r1, r1, #1
 800f762:	3201      	adds	r2, #1
 800f764:	e7ef      	b.n	800f746 <__ieee754_sqrt+0x13a>
 800f766:	4680      	mov	r8, r0
 800f768:	e7bd      	b.n	800f6e6 <__ieee754_sqrt+0xda>
 800f76a:	bf00      	nop
 800f76c:	7ff00000 	.word	0x7ff00000

0800f770 <_init>:
 800f770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f772:	bf00      	nop
 800f774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f776:	bc08      	pop	{r3}
 800f778:	469e      	mov	lr, r3
 800f77a:	4770      	bx	lr

0800f77c <_fini>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	bf00      	nop
 800f780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f782:	bc08      	pop	{r3}
 800f784:	469e      	mov	lr, r3
 800f786:	4770      	bx	lr
